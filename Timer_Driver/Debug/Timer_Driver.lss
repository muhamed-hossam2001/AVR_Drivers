
Timer_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00003da6  00003e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  008001a2  008001a2  00003f7c  2**0
                  ALLOC
  3 .stab         00004c08  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003835  00000000  00000000  00008b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c559  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c74b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000eb56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000110b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001156a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__vector_1>
       8:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_2>
       c:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_3>
      10:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_4>
      14:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_5>
      18:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__vector_6>
      1c:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__vector_7>
      20:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_8>
      24:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_9>
      28:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__vector_10>
      2c:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <main>
      8a:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 58       	subi	r30, 0x80	; 128
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TMR0_VoidInit_Prebuild>:


static void(*Timer_VidCallBack_ISR_Funtion[8])(void)={NULL};

void TMR0_VoidInit_Prebuild()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=WAVEFORM_TIMER0_MODE_MASK;
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 7b       	andi	r24, 0xB7	; 183
     e42:	8c 93       	st	X, r24
	TCCR0_REG |=TIMER0_OP_MODE;
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 64       	ori	r24, 0x48	; 72
     e50:	8c 93       	st	X, r24
	TCCR0_REG &=TIMER0_CTC_OUTPUT_MODES_MASK;
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7c       	andi	r24, 0xCF	; 207
     e5e:	8c 93       	st	X, r24
	TCCR0_REG |=TIMER0_OUTPUT_MODE;
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	8c 93       	st	X, r24
				{
					SET_BIT(TIMSK_REG,TMR0_OCIE0);
				}
			#else
				{
					CLR_BIT(TIMSK_REG,TMR0_OCIE0);
     e6e:	a9 e5       	ldi	r26, 0x59	; 89
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e9 e5       	ldi	r30, 0x59	; 89
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8d 7f       	andi	r24, 0xFD	; 253
     e7a:	8c 93       	st	X, r24
				}
			#endif
	}
#endif

TCCR0_REG &=TIMER0_CLK_SELCT_MASK;
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	88 7f       	andi	r24, 0xF8	; 248
     e88:	8c 93       	st	X, r24
TCCR0_REG |=TIMER0_CLK_SEL;
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <TMR0_VoidClkSelection>:

void TMR0_VoidClkSelection(u8 Copy_u8ClkSelectVal)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG &=TIMER0_CLK_SELCT_MASK;
     eaa:	a3 e5       	ldi	r26, 0x53	; 83
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e3 e5       	ldi	r30, 0x53	; 83
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 7f       	andi	r24, 0xF8	; 248
     eb6:	8c 93       	st	X, r24
	TCCR0_REG |=Copy_u8ClkSelectVal;
     eb8:	a3 e5       	ldi	r26, 0x53	; 83
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	90 81       	ld	r25, Z
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	89 2b       	or	r24, r25
     ec6:	8c 93       	st	X, r24
}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <TMR0_VoidStartTimer>:

void TMR0_VoidStartTimer()
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TIMER0_CLK_SELCT_MASK;
     ed8:	a3 e5       	ldi	r26, 0x53	; 83
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e3 e5       	ldi	r30, 0x53	; 83
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 7f       	andi	r24, 0xF8	; 248
     ee4:	8c 93       	st	X, r24
	TCNT0_REG=0x00;
     ee6:	e2 e5       	ldi	r30, 0x52	; 82
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	10 82       	st	Z, r1

}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <TMR0_VoidStopTimer>:

void TMR0_VoidStopTimer()
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TIMER0_CLK_SELCT_MASK;
     efa:	a3 e5       	ldi	r26, 0x53	; 83
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e5       	ldi	r30, 0x53	; 83
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	88 7f       	andi	r24, 0xF8	; 248
     f06:	8c 93       	st	X, r24

}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <TMR0_VoidSetPreLoadValue>:

void TMR0_VoidSetPreLoadValue(u8 Copy_u8PreLoadVal)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	0f 92       	push	r0
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG=Copy_u8PreLoadVal;
     f1a:	ec e5       	ldi	r30, 0x5C	; 92
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 83       	st	Z, r24
}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <TMR0_VoidSetCTCValue>:

void TMR0_VoidSetCTCValue(u8 Copy_u8CTCVal)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG=Copy_u8CTCVal;
     f36:	ec e5       	ldi	r30, 0x5C	; 92
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 83       	st	Z, r24
}
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <TMR0_VoidEnableINT_OVF>:

void TMR0_VoidEnableINT_OVF()
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR0_TOIE0);
     f4e:	a9 e5       	ldi	r26, 0x59	; 89
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e9 e5       	ldi	r30, 0x59	; 89
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <TMR0_VoidDisableINT_OVF>:

void TMR0_VoidDisableINT_OVF()
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR0_TOIE0);
     f6a:	a9 e5       	ldi	r26, 0x59	; 89
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e9 e5       	ldi	r30, 0x59	; 89
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	8c 93       	st	X, r24
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <TMR0_VoidEnableINT_CTC>:

void TMR0_VoidEnableINT_CTC()
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR0_OCIE0);
     f86:	a9 e5       	ldi	r26, 0x59	; 89
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e9 e5       	ldi	r30, 0x59	; 89
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	8c 93       	st	X, r24
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <TMR0_VoidDisableINT_CTC>:

void TMR0_VoidDisableINT_CTC()
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR0_OCIE0);
     fa2:	a9 e5       	ldi	r26, 0x59	; 89
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e9 e5       	ldi	r30, 0x59	; 89
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8d 7f       	andi	r24, 0xFD	; 253
     fae:	8c 93       	st	X, r24
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <TMR0_VoidResetTimer>:

void TMR0_VoidResetTimer()
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	TCNT0_REG=0x00;
     fbe:	e2 e5       	ldi	r30, 0x52	; 82
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	10 82       	st	Z, r1
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <TMR1_VoidInit_Prebuild>:

/*=================================================================================================End Timer 0====================================================================*/


void TMR1_VoidInit_Prebuild()
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG &=WAVEFORM_TIMER1_MODE_MASK_H1;
     fd2:	af e4       	ldi	r26, 0x4F	; 79
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8c 7f       	andi	r24, 0xFC	; 252
     fde:	8c 93       	st	X, r24
	TCCR1B_REG &=WAVEFORM_TIMER1_MODE_MASK_H2;
     fe0:	ae e4       	ldi	r26, 0x4E	; 78
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ee e4       	ldi	r30, 0x4E	; 78
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	87 7e       	andi	r24, 0xE7	; 231
     fec:	8c 93       	st	X, r24
	switch(TIMER1_OP_MODE)
		{

		case TIMER1_MODE_NORMAL:
							{
									TCCR1A_REG|=TIMER1_MODE_NORMAL_H1;
     fee:	af e4       	ldi	r26, 0x4F	; 79
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ef e4       	ldi	r30, 0x4F	; 79
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8c 93       	st	X, r24
									TCCR1B_REG|=TIMER1_MODE_NORMAL_H2<<3;
     ffa:	ae e4       	ldi	r26, 0x4E	; 78
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ee e4       	ldi	r30, 0x4E	; 78
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8c 93       	st	X, r24
										break;
								}

		}

				TCCR1A_REG &=TIMER1_CHANNELA_CTC_OUTPUT_MODES_MASK;
    1006:	af e4       	ldi	r26, 0x4F	; 79
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ef e4       	ldi	r30, 0x4F	; 79
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8f 73       	andi	r24, 0x3F	; 63
    1012:	8c 93       	st	X, r24
				TCCR1A_REG |=TIMER1_OUTPUT_CHANNELA_MODE<<6;
    1014:	af e4       	ldi	r26, 0x4F	; 79
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ef e4       	ldi	r30, 0x4F	; 79
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 68       	ori	r24, 0x80	; 128
    1020:	8c 93       	st	X, r24
				TCCR1A_REG &=TIMER1_CHANNELB_CTC_OUTPUT_MODES_MASK;
    1022:	af e4       	ldi	r26, 0x4F	; 79
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ef e4       	ldi	r30, 0x4F	; 79
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7c       	andi	r24, 0xCF	; 207
    102e:	8c 93       	st	X, r24
				TCCR1A_REG |=TIMER1_OUTPUT_CHANNELB_MODE<<4;
    1030:	af e4       	ldi	r26, 0x4F	; 79
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ef e4       	ldi	r30, 0x4F	; 79
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 62       	ori	r24, 0x20	; 32
    103c:	8c 93       	st	X, r24
					{
						CLR_BIT(TCCR1B_REG ,TCCR1B_ICES1);
					}
				#elif (INPUT_CAPTURE_EDGE==CAPTURE_EDGE_DETECTION_RISING)
					{
						SET_BIT(TCCR1B_REG ,TCCR1B_ICES1);
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 64       	ori	r24, 0x40	; 64
    104a:	8c 93       	st	X, r24
					{
						SET_BIT(TIMSK_REG,TMR1_TOIE1);
					}
				#else
					{
						CLR_BIT(TIMSK_REG,TMR1_TOIE1);
    104c:	a9 e5       	ldi	r26, 0x59	; 89
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e9 e5       	ldi	r30, 0x59	; 89
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8b 7f       	andi	r24, 0xFB	; 251
    1058:	8c 93       	st	X, r24
					{
						SET_BIT(TIMSK_REG,TMR1_OCIE1A);
					}
				#else
					{
						CLR_BIT(TIMSK_REG,TMR1_OCIE1A);
    105a:	a9 e5       	ldi	r26, 0x59	; 89
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e9 e5       	ldi	r30, 0x59	; 89
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8f 7e       	andi	r24, 0xEF	; 239
    1066:	8c 93       	st	X, r24
				{
					SET_BIT(TIMSK_REG,TMR1_OCIE1B);
				}
			#else
				{
					CLR_BIT(TIMSK_REG,TMR1_OCIE1B);
    1068:	a9 e5       	ldi	r26, 0x59	; 89
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e9 e5       	ldi	r30, 0x59	; 89
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	87 7f       	andi	r24, 0xF7	; 247
    1074:	8c 93       	st	X, r24
	        #endif


			#if (TIMER1_CAPTURE_INT==ENABLE)
            	{
            		SET_BIT(TIMSK_REG,TMR1_TICIE1);
    1076:	a9 e5       	ldi	r26, 0x59	; 89
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e9 e5       	ldi	r30, 0x59	; 89
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 62       	ori	r24, 0x20	; 32
    1082:	8c 93       	st	X, r24
			#else
				{
					CLR_BIT(TIMSK_REG,TMR1_TICIE1);
				}
			#endif
	TCCR1B_REG &=TIMER1_CLK_SELCT_MASK;
    1084:	ae e4       	ldi	r26, 0x4E	; 78
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ee e4       	ldi	r30, 0x4E	; 78
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	88 7f       	andi	r24, 0xF8	; 248
    1090:	8c 93       	st	X, r24
	TCCR1B_REG |=TIMER1_CLK_SEL;
    1092:	ae e4       	ldi	r26, 0x4E	; 78
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ee e4       	ldi	r30, 0x4E	; 78
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	8c 93       	st	X, r24


}
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <ss>:
void ss()
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG &=TIMER1_CHANNELA_CTC_OUTPUT_MODES_MASK;
    10ae:	af e4       	ldi	r26, 0x4F	; 79
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ef e4       	ldi	r30, 0x4F	; 79
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 73       	andi	r24, 0x3F	; 63
    10ba:	8c 93       	st	X, r24
						TCCR1A_REG |=TIMER1_OUTPUT_CHANNELA_MODE<<6;
    10bc:	af e4       	ldi	r26, 0x4F	; 79
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ef e4       	ldi	r30, 0x4F	; 79
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	80 68       	ori	r24, 0x80	; 128
    10c8:	8c 93       	st	X, r24
						TCCR1A_REG &=TIMER1_CHANNELB_CTC_OUTPUT_MODES_MASK;
    10ca:	af e4       	ldi	r26, 0x4F	; 79
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ef e4       	ldi	r30, 0x4F	; 79
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7c       	andi	r24, 0xCF	; 207
    10d6:	8c 93       	st	X, r24
						TCCR1A_REG |=TIMER1_OUTPUT_CHANNELB_MODE<<4;
    10d8:	af e4       	ldi	r26, 0x4F	; 79
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ef e4       	ldi	r30, 0x4F	; 79
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 62       	ori	r24, 0x20	; 32
    10e4:	8c 93       	st	X, r24
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <TMR1_VoidSetInputCaptureEdge>:
void TMR1_VoidSetInputCaptureEdge(u8 Copy_u8CAPTURE_EDGE)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8CAPTURE_EDGE==CAPTURE_EDGE_DETECTION_FALLING)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 23       	and	r24, r24
    10fc:	41 f4       	brne	.+16     	; 0x110e <TMR1_VoidSetInputCaptureEdge+0x22>
	{
		CLR_BIT(TCCR1B_REG,TCCR1B_ICES1);
    10fe:	ae e4       	ldi	r26, 0x4E	; 78
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ee e4       	ldi	r30, 0x4E	; 78
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	8c 93       	st	X, r24
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <TMR1_VoidSetInputCaptureEdge+0x36>
	}
else if(Copy_u8CAPTURE_EDGE==CAPTURE_EDGE_DETECTION_RISING)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	39 f4       	brne	.+14     	; 0x1122 <TMR1_VoidSetInputCaptureEdge+0x36>
	{
		SET_BIT(TCCR1B_REG ,TCCR1B_ICES1);
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	8c 93       	st	X, r24
	}

}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <TMR1_VoidStartTimer>:

void TMR1_VoidStartTimer()
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG &=TIMER1_CLK_SELCT_MASK;
    1132:	ae e4       	ldi	r26, 0x4E	; 78
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ee e4       	ldi	r30, 0x4E	; 78
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	8c 93       	st	X, r24
	TCCR1B_REG |=TIMER1_CLK_SEL;
    1140:	ae e4       	ldi	r26, 0x4E	; 78
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ee e4       	ldi	r30, 0x4E	; 78
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	8c 93       	st	X, r24
	TCNT1_REG=0x00;
    114e:	ec e4       	ldi	r30, 0x4C	; 76
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	11 82       	std	Z+1, r1	; 0x01
    1154:	10 82       	st	Z, r1

}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <TMR1_VoidReadInputCapture>:

u16 TMR1_VoidReadInputCapture()
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    1164:	e6 e4       	ldi	r30, 0x46	; 70
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <TMR1_VoidSetTopVal_FastPWM>:


void TMR1_VoidSetTopVal_FastPWM(u16 Copy_u16TopVal)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <TMR1_VoidSetTopVal_FastPWM+0x6>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
	 ICR1_REG=Copy_u16TopVal;
    1180:	e6 e4       	ldi	r30, 0x46	; 70
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TMR1_VoidClkSelection>:

void TMR1_VoidClkSelection(u8 Copy_u8ClkSelectVal)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG &=TIMER1_CLK_SELCT_MASK;
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 7f       	andi	r24, 0xF8	; 248
    11ae:	8c 93       	st	X, r24
	TCCR1B_REG |=Copy_u8ClkSelectVal;
    11b0:	ae e4       	ldi	r26, 0x4E	; 78
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ee e4       	ldi	r30, 0x4E	; 78
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	90 81       	ld	r25, Z
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	89 2b       	or	r24, r25
    11be:	8c 93       	st	X, r24
}
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <TMR1_VoidResetTimer>:

void TMR1_VoidResetTimer()
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG=0;
    11d0:	ec e4       	ldi	r30, 0x4C	; 76
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	11 82       	std	Z+1, r1	; 0x01
    11d6:	10 82       	st	Z, r1
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <TMR1_VoidStopTimer>:

void TMR1_VoidStopTimer()
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG &=TIMER1_CLK_SELCT_MASK;
    11e6:	ae e4       	ldi	r26, 0x4E	; 78
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ee e4       	ldi	r30, 0x4E	; 78
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 7f       	andi	r24, 0xF8	; 248
    11f2:	8c 93       	st	X, r24

}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TMR1_VoidSetCompareMathChannelA>:

void TMR1_VoidSetCompareMathChannelA(u16 Copy_u16CompMode)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <TMR1_VoidSetCompareMathChannelA+0x6>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG=Copy_u16CompMode;
    1208:	ea e4       	ldi	r30, 0x4A	; 74
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <TMR1_VoidSetCompareMathChannelB>:
void TMR1_VoidSetCompareMathChannelB(u16 Copy_u16CompMode)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <TMR1_VoidSetCompareMathChannelB+0x6>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG=Copy_u16CompMode;
    122c:	e8 e4       	ldi	r30, 0x48	; 72
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24

}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <TMR1_VoidSetTopVal>:

void TMR1_VoidSetTopVal(u16 Copy_u8TopVal)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <TMR1_VoidSetTopVal+0x6>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG=Copy_u8TopVal;
    1250:	e6 e4       	ldi	r30, 0x46	; 70
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24

}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <TMR1_VoidEnableINT_OVF>:

void TMR1_VoidEnableINT_OVF()
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR1_TOIE1);
    126e:	a9 e5       	ldi	r26, 0x59	; 89
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e9 e5       	ldi	r30, 0x59	; 89
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	84 60       	ori	r24, 0x04	; 4
    127a:	8c 93       	st	X, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <TMR1_VoidDisableINT_OVF>:

void TMR1_VoidDisableINT_OVF()
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR1_TOIE1);
    128a:	a9 e5       	ldi	r26, 0x59	; 89
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e9 e5       	ldi	r30, 0x59	; 89
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8b 7f       	andi	r24, 0xFB	; 251
    1296:	8c 93       	st	X, r24
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <TMR1_VoidEnableINT_CTC_ChannelA>:

void TMR1_VoidEnableINT_CTC_ChannelA()
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR1_OCIE1A);
    12a6:	a9 e5       	ldi	r26, 0x59	; 89
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 e5       	ldi	r30, 0x59	; 89
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	8c 93       	st	X, r24
}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <TMR1_VoidDisableINT_CTC_ChannelA>:

void TMR1_VoidDisableINT_CTC_ChannelA()
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR1_OCIE1A);
    12c2:	a9 e5       	ldi	r26, 0x59	; 89
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e9 e5       	ldi	r30, 0x59	; 89
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7e       	andi	r24, 0xEF	; 239
    12ce:	8c 93       	st	X, r24
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <TMR1_VoidEnableINT_CTC_ChannelB>:

void TMR1_VoidEnableINT_CTC_ChannelB()
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR1_OCIE1B);
    12de:	a9 e5       	ldi	r26, 0x59	; 89
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e9 e5       	ldi	r30, 0x59	; 89
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 60       	ori	r24, 0x08	; 8
    12ea:	8c 93       	st	X, r24
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <TMR1_VoidDisableINT_CTC_ChannelB>:

void TMR1_VoidDisableINT_CTC_ChannelB()
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR1_OCIE1B);
    12fa:	a9 e5       	ldi	r26, 0x59	; 89
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e9 e5       	ldi	r30, 0x59	; 89
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	87 7f       	andi	r24, 0xF7	; 247
    1306:	8c 93       	st	X, r24
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <TMR1_VoidEnableINT_CaptureMode>:

void TMR1_VoidEnableINT_CaptureMode()
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR1_TICIE1);
    1316:	a9 e5       	ldi	r26, 0x59	; 89
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e9 e5       	ldi	r30, 0x59	; 89
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 62       	ori	r24, 0x20	; 32
    1322:	8c 93       	st	X, r24
}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <TMR1_VoidDisableINT_CaptureMode>:

void TMR1_VoidDisableINT_CaptureMode()
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR1_TICIE1);
    1332:	a9 e5       	ldi	r26, 0x59	; 89
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e9 e5       	ldi	r30, 0x59	; 89
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8f 7d       	andi	r24, 0xDF	; 223
    133e:	8c 93       	st	X, r24
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <TMR1_VoidSetTimerVal>:

void TMR1_VoidSetTimerVal(u16 Copy_u16Timer1Value)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <TMR1_VoidSetTimerVal+0x6>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG=Copy_u16Timer1Value;
    1354:	ec e4       	ldi	r30, 0x4C	; 76
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <TMR1_VoidGetTimerVal>:
u16 TMR1_VoidGetTimerVal()
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    1372:	ec e4       	ldi	r30, 0x4C	; 76
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <power>:

u32 power(u32 a, u32 b)
{  u32 n=a;
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	29 97       	sbiw	r28, 0x09	; 9
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	9d 83       	std	Y+5, r25	; 0x05
    1396:	8c 83       	std	Y+4, r24	; 0x04
    1398:	7f 83       	std	Y+7, r23	; 0x07
    139a:	6e 83       	std	Y+6, r22	; 0x06
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	9b 83       	std	Y+3, r25	; 0x03
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    if(b==0)
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	9f 81       	ldd	r25, Y+7	; 0x07
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	29 f4       	brne	.+10     	; 0x13b6 <power+0x36>
        return 1;
    13ac:	41 e0       	ldi	r20, 0x01	; 1
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	59 87       	std	Y+9, r21	; 0x09
    13b2:	48 87       	std	Y+8, r20	; 0x08
    13b4:	20 c0       	rjmp	.+64     	; 0x13f6 <power+0x76>
    for (u8 i=1; i<b; i++)
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	11 c0       	rjmp	.+34     	; 0x13de <power+0x5e>
      a=a*n;
    13bc:	2c 81       	ldd	r18, Y+4	; 0x04
    13be:	3d 81       	ldd	r19, Y+5	; 0x05
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	9b 81       	ldd	r25, Y+3	; 0x03
    13c4:	ac 01       	movw	r20, r24
    13c6:	24 9f       	mul	r18, r20
    13c8:	c0 01       	movw	r24, r0
    13ca:	25 9f       	mul	r18, r21
    13cc:	90 0d       	add	r25, r0
    13ce:	34 9f       	mul	r19, r20
    13d0:	90 0d       	add	r25, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	9d 83       	std	Y+5, r25	; 0x05
    13d6:	8c 83       	std	Y+4, r24	; 0x04

u32 power(u32 a, u32 b)
{  u32 n=a;
    if(b==0)
        return 1;
    for (u8 i=1; i<b; i++)
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	8f 5f       	subi	r24, 0xFF	; 255
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	28 17       	cp	r18, r24
    13ea:	39 07       	cpc	r19, r25
    13ec:	38 f3       	brcs	.-50     	; 0x13bc <power+0x3c>
      a=a*n;
    return a;
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	99 87       	std	Y+9, r25	; 0x09
    13f4:	88 87       	std	Y+8, r24	; 0x08
    13f6:	88 85       	ldd	r24, Y+8	; 0x08
    13f8:	99 85       	ldd	r25, Y+9	; 0x09
}
    13fa:	29 96       	adiw	r28, 0x09	; 9
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <TIM0_VidPreloadVal>:

u32 TIM0_VidPreloadVal(u8 Copy_u8Bits_Numbers ,u32 Copy_u32SystemFreq_inMiga ,u16 Copy_u8TimerPrescaller,f64 Copy_u32DiseredTime_inMicro)

{
    140c:	af 92       	push	r10
    140e:	bf 92       	push	r11
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	67 97       	sbiw	r28, 0x17	; 23
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	8d 87       	std	Y+13, r24	; 0x0d
    1432:	7f 87       	std	Y+15, r23	; 0x0f
    1434:	6e 87       	std	Y+14, r22	; 0x0e
    1436:	59 8b       	std	Y+17, r21	; 0x11
    1438:	48 8b       	std	Y+16, r20	; 0x10
    143a:	0a 8b       	std	Y+18, r16	; 0x12
    143c:	1b 8b       	std	Y+19, r17	; 0x13
    143e:	2c 8b       	std	Y+20, r18	; 0x14
    1440:	3d 8b       	std	Y+21, r19	; 0x15
    f64 Local_f64NumberOfCounts;
    u32 Local_u32PreloadValue;
    u32 Local_u32NumberTicks=power(2,Copy_u8Bits_Numbers );
    1442:	8d 85       	ldd	r24, Y+13	; 0x0d
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	b9 01       	movw	r22, r18
    144e:	0e 94 c0 09 	call	0x1380	; 0x1380 <power>
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    f64 Local_f64OverFlowTime_inMicro=Local_u32NumberTicks*(( (f64)Copy_u8TimerPrescaller)/ ( (f64)Copy_u32SystemFreq_inMiga ) );
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	cc 01       	movw	r24, r24
    145c:	a0 e0       	ldi	r26, 0x00	; 0
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1468:	5b 01       	movw	r10, r22
    146a:	6c 01       	movw	r12, r24
    146c:	88 89       	ldd	r24, Y+16	; 0x10
    146e:	99 89       	ldd	r25, Y+17	; 0x11
    1470:	cc 01       	movw	r24, r24
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    147e:	7b 01       	movw	r14, r22
    1480:	8c 01       	movw	r16, r24
    1482:	8e 85       	ldd	r24, Y+14	; 0x0e
    1484:	9f 85       	ldd	r25, Y+15	; 0x0f
    1486:	cc 01       	movw	r24, r24
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	c8 01       	movw	r24, r16
    149a:	b7 01       	movw	r22, r14
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9c 01       	movw	r18, r24
    14a6:	ad 01       	movw	r20, r26
    14a8:	c6 01       	movw	r24, r12
    14aa:	b5 01       	movw	r22, r10
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	ab 83       	std	Y+3, r26	; 0x03
    14ba:	bc 83       	std	Y+4, r27	; 0x04
    if(Copy_u32DiseredTime_inMicro>Local_f64OverFlowTime_inMicro)
    14bc:	6a 89       	ldd	r22, Y+18	; 0x12
    14be:	7b 89       	ldd	r23, Y+19	; 0x13
    14c0:	8c 89       	ldd	r24, Y+20	; 0x14
    14c2:	9d 89       	ldd	r25, Y+21	; 0x15
    14c4:	29 81       	ldd	r18, Y+1	; 0x01
    14c6:	3a 81       	ldd	r19, Y+2	; 0x02
    14c8:	4b 81       	ldd	r20, Y+3	; 0x03
    14ca:	5c 81       	ldd	r21, Y+4	; 0x04
    14cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14d0:	18 16       	cp	r1, r24
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <TIM0_VidPreloadVal+0xca>
    14d4:	5c c0       	rjmp	.+184    	; 0x158e <TIM0_VidPreloadVal+0x182>
    {
        Local_f64NumberOfCounts =Copy_u32DiseredTime_inMicro/Local_f64OverFlowTime_inMicro;
    14d6:	6a 89       	ldd	r22, Y+18	; 0x12
    14d8:	7b 89       	ldd	r23, Y+19	; 0x13
    14da:	8c 89       	ldd	r24, Y+20	; 0x14
    14dc:	9d 89       	ldd	r25, Y+21	; 0x15
    14de:	29 81       	ldd	r18, Y+1	; 0x01
    14e0:	3a 81       	ldd	r19, Y+2	; 0x02
    14e2:	4b 81       	ldd	r20, Y+3	; 0x03
    14e4:	5c 81       	ldd	r21, Y+4	; 0x04
    14e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	89 87       	std	Y+9, r24	; 0x09
    14f0:	9a 87       	std	Y+10, r25	; 0x0a
    14f2:	ab 87       	std	Y+11, r26	; 0x0b
    14f4:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u32PreloadValue=Local_u32NumberTicks*(1-(Local_f64NumberOfCounts-(u32)(Local_f64NumberOfCounts)) );
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	cc 01       	movw	r24, r24
    14fc:	a0 e0       	ldi	r26, 0x00	; 0
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1508:	7b 01       	movw	r14, r22
    150a:	8c 01       	movw	r16, r24
    150c:	69 85       	ldd	r22, Y+9	; 0x09
    150e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1510:	8b 85       	ldd	r24, Y+11	; 0x0b
    1512:	9c 85       	ldd	r25, Y+12	; 0x0c
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	cc 01       	movw	r24, r24
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	69 85       	ldd	r22, Y+9	; 0x09
    1530:	7a 85       	ldd	r23, Y+10	; 0x0a
    1532:	8b 85       	ldd	r24, Y+11	; 0x0b
    1534:	9c 85       	ldd	r25, Y+12	; 0x0c
    1536:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9c 01       	movw	r18, r24
    1540:	ad 01       	movw	r20, r26
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	80 e8       	ldi	r24, 0x80	; 128
    1548:	9f e3       	ldi	r25, 0x3F	; 63
    154a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9c 01       	movw	r18, r24
    1554:	ad 01       	movw	r20, r26
    1556:	c8 01       	movw	r24, r16
    1558:	b7 01       	movw	r22, r14
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	98 87       	std	Y+8, r25	; 0x08
    1570:	8f 83       	std	Y+7, r24	; 0x07
        return (u32)(Local_f64NumberOfCounts)+1;
    1572:	69 85       	ldd	r22, Y+9	; 0x09
    1574:	7a 85       	ldd	r23, Y+10	; 0x0a
    1576:	8b 85       	ldd	r24, Y+11	; 0x0b
    1578:	9c 85       	ldd	r25, Y+12	; 0x0c
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9c 01       	movw	r18, r24
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	3f 8b       	std	Y+23, r19	; 0x17
    158a:	2e 8b       	std	Y+22, r18	; 0x16
    158c:	64 c0       	rjmp	.+200    	; 0x1656 <TIM0_VidPreloadVal+0x24a>
            }


        }*/
    }
    else if(Copy_u32DiseredTime_inMicro<Local_f64OverFlowTime_inMicro)
    158e:	6a 89       	ldd	r22, Y+18	; 0x12
    1590:	7b 89       	ldd	r23, Y+19	; 0x13
    1592:	8c 89       	ldd	r24, Y+20	; 0x14
    1594:	9d 89       	ldd	r25, Y+21	; 0x15
    1596:	29 81       	ldd	r18, Y+1	; 0x01
    1598:	3a 81       	ldd	r19, Y+2	; 0x02
    159a:	4b 81       	ldd	r20, Y+3	; 0x03
    159c:	5c 81       	ldd	r21, Y+4	; 0x04
    159e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	0c f0       	brlt	.+2      	; 0x15a8 <TIM0_VidPreloadVal+0x19c>
    15a6:	53 c0       	rjmp	.+166    	; 0x164e <TIM0_VidPreloadVal+0x242>
    {
        Local_f64NumberOfCounts =Copy_u32DiseredTime_inMicro/Local_f64OverFlowTime_inMicro;
    15a8:	6a 89       	ldd	r22, Y+18	; 0x12
    15aa:	7b 89       	ldd	r23, Y+19	; 0x13
    15ac:	8c 89       	ldd	r24, Y+20	; 0x14
    15ae:	9d 89       	ldd	r25, Y+21	; 0x15
    15b0:	29 81       	ldd	r18, Y+1	; 0x01
    15b2:	3a 81       	ldd	r19, Y+2	; 0x02
    15b4:	4b 81       	ldd	r20, Y+3	; 0x03
    15b6:	5c 81       	ldd	r21, Y+4	; 0x04
    15b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	89 87       	std	Y+9, r24	; 0x09
    15c2:	9a 87       	std	Y+10, r25	; 0x0a
    15c4:	ab 87       	std	Y+11, r26	; 0x0b
    15c6:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u32PreloadValue=Local_u32NumberTicks*(1-(Local_f64NumberOfCounts-(u32)(Local_f64NumberOfCounts)) );
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	9e 81       	ldd	r25, Y+6	; 0x06
    15cc:	cc 01       	movw	r24, r24
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15da:	7b 01       	movw	r14, r22
    15dc:	8c 01       	movw	r16, r24
    15de:	69 85       	ldd	r22, Y+9	; 0x09
    15e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    15e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	cc 01       	movw	r24, r24
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	69 85       	ldd	r22, Y+9	; 0x09
    1602:	7a 85       	ldd	r23, Y+10	; 0x0a
    1604:	8b 85       	ldd	r24, Y+11	; 0x0b
    1606:	9c 85       	ldd	r25, Y+12	; 0x0c
    1608:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9c 01       	movw	r18, r24
    1612:	ad 01       	movw	r20, r26
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	80 e8       	ldi	r24, 0x80	; 128
    161a:	9f e3       	ldi	r25, 0x3F	; 63
    161c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9c 01       	movw	r18, r24
    1626:	ad 01       	movw	r20, r26
    1628:	c8 01       	movw	r24, r16
    162a:	b7 01       	movw	r22, r14
    162c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	98 87       	std	Y+8, r25	; 0x08
    1642:	8f 83       	std	Y+7, r24	; 0x07
        return 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9f 8b       	std	Y+23, r25	; 0x17
    164a:	8e 8b       	std	Y+22, r24	; 0x16
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <TIM0_VidPreloadVal+0x24a>
           //Tack_ACtion
           // Timer_reg=Preloadval=.......

       }*/
    }
    return 1;
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3f 8b       	std	Y+23, r19	; 0x17
    1654:	2e 8b       	std	Y+22, r18	; 0x16
    1656:	8e 89       	ldd	r24, Y+22	; 0x16
    1658:	9f 89       	ldd	r25, Y+23	; 0x17

}
    165a:	67 96       	adiw	r28, 0x17	; 23
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	bf 90       	pop	r11
    1678:	af 90       	pop	r10
    167a:	08 95       	ret

0000167c <TMR2_VoidInit_Prebuild>:
/*=============================================================End Timer1===========================================================*/
void TMR2_VoidInit_Prebuild()
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	TCCR2_REG &=WAVEFORM_TIMER2_MODE_MASK;
    1684:	a5 e4       	ldi	r26, 0x45	; 69
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e4       	ldi	r30, 0x45	; 69
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	87 7b       	andi	r24, 0xB7	; 183
    1690:	8c 93       	st	X, r24
	TCCR2_REG |=TIMER2_OP_MODE;
    1692:	a5 e4       	ldi	r26, 0x45	; 69
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e4       	ldi	r30, 0x45	; 69
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	88 64       	ori	r24, 0x48	; 72
    169e:	8c 93       	st	X, r24
	TCCR2_REG &=TIMER2_CTC_OUTPUT_MODES_MASK;
    16a0:	a5 e4       	ldi	r26, 0x45	; 69
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e5 e4       	ldi	r30, 0x45	; 69
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 7c       	andi	r24, 0xCF	; 207
    16ac:	8c 93       	st	X, r24
	TCCR2_REG |=TIMER2_OUTPUT_MODE;
    16ae:	a5 e4       	ldi	r26, 0x45	; 69
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e4       	ldi	r30, 0x45	; 69
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 62       	ori	r24, 0x20	; 32
    16ba:	8c 93       	st	X, r24
				{
					SET_BIT(TIMSK_REG,TMR2_OCIE2);
				}
			#else
				{
					CLR_BIT(TIMSK_REG,TMR2_OCIE2);
    16bc:	a9 e5       	ldi	r26, 0x59	; 89
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e9 e5       	ldi	r30, 0x59	; 89
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 77       	andi	r24, 0x7F	; 127
    16c8:	8c 93       	st	X, r24
				}
			#endif
	}
#endif

TCCR2_REG &=TIMER2_CLK_SELCT_MASK;
    16ca:	a5 e4       	ldi	r26, 0x45	; 69
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e4       	ldi	r30, 0x45	; 69
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 7f       	andi	r24, 0xF8	; 248
    16d6:	8c 93       	st	X, r24
TCCR2_REG |=TIMER2_CLK_SEL;
    16d8:	a5 e4       	ldi	r26, 0x45	; 69
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e4       	ldi	r30, 0x45	; 69
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	82 60       	ori	r24, 0x02	; 2
    16e4:	8c 93       	st	X, r24
}
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <TMR2_VoidClkSelection>:

void TMR2_VoidClkSelection(u8 Copy_u8ClkSelectVal)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	89 83       	std	Y+1, r24	; 0x01
	TCCR2_REG &=TIMER2_CLK_SELCT_MASK;
    16f8:	a5 e4       	ldi	r26, 0x45	; 69
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e4       	ldi	r30, 0x45	; 69
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	88 7f       	andi	r24, 0xF8	; 248
    1704:	8c 93       	st	X, r24
	TCCR2_REG |=Copy_u8ClkSelectVal;
    1706:	a5 e4       	ldi	r26, 0x45	; 69
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e4       	ldi	r30, 0x45	; 69
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	90 81       	ld	r25, Z
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	89 2b       	or	r24, r25
    1714:	8c 93       	st	X, r24
}
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <TMR2_VoidStartTimer>:

void TMR2_VoidStartTimer()
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
	TCCR2_REG &=TIMER2_CLK_SELCT_MASK;
    1726:	a5 e4       	ldi	r26, 0x45	; 69
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e5 e4       	ldi	r30, 0x45	; 69
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	88 7f       	andi	r24, 0xF8	; 248
    1732:	8c 93       	st	X, r24
	TCNT2_REG=0x00;
    1734:	e4 e4       	ldi	r30, 0x44	; 68
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	10 82       	st	Z, r1

}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <TMR2_VoidStopTimer>:

void TMR2_VoidStopTimer()
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	TCCR2_REG &=TIMER2_CLK_SELCT_MASK;
    1748:	a5 e4       	ldi	r26, 0x45	; 69
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e4       	ldi	r30, 0x45	; 69
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	88 7f       	andi	r24, 0xF8	; 248
    1754:	8c 93       	st	X, r24

}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <TMR2_VoidSetPreLoadValue>:

void TMR2_VoidSetPreLoadValue(u8 Copy_u8PreLoadVal)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG=Copy_u8PreLoadVal;
    1768:	e3 e4       	ldi	r30, 0x43	; 67
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	80 83       	st	Z, r24
}
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <TMR2_VoidSetCTCValue>:

void TMR2_VoidSetCTCValue(u8 Copy_u8CTCVal)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG=Copy_u8CTCVal;
    1784:	e3 e4       	ldi	r30, 0x43	; 67
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	80 83       	st	Z, r24
}
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <TMR2_VoidEnableINT_OVF>:

void TMR2_VoidEnableINT_OVF()
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR2_TOIE2);
    179c:	a9 e5       	ldi	r26, 0x59	; 89
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e9 e5       	ldi	r30, 0x59	; 89
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 64       	ori	r24, 0x40	; 64
    17a8:	8c 93       	st	X, r24
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <TMR2_VoidDisableINT_OVF>:

void TMR2_VoidDisableINT_OVF()
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR2_TOIE2);
    17b8:	a9 e5       	ldi	r26, 0x59	; 89
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e9 e5       	ldi	r30, 0x59	; 89
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 7b       	andi	r24, 0xBF	; 191
    17c4:	8c 93       	st	X, r24
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <TMR2_VoidEnableINT_CTC>:

void TMR2_VoidEnableINT_CTC()
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TMR2_OCIE2);
    17d4:	a9 e5       	ldi	r26, 0x59	; 89
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e9 e5       	ldi	r30, 0x59	; 89
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 68       	ori	r24, 0x80	; 128
    17e0:	8c 93       	st	X, r24
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <TMR2_VoidDisableINT_CTC>:

void TMR2_VoidDisableINT_CTC()
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TMR2_OCIE2);
    17f0:	a9 e5       	ldi	r26, 0x59	; 89
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e9 e5       	ldi	r30, 0x59	; 89
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	8f 77       	andi	r24, 0x7F	; 127
    17fc:	8c 93       	st	X, r24
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <TMR2_VoidResetTimer>:

void TMR2_VoidResetTimer()
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
	TCNT2_REG=0x00;
    180c:	e4 e4       	ldi	r30, 0x44	; 68
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	10 82       	st	Z, r1
}
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <SendAddressTimer_Callback>:

/*=============================================================End Timer2===========================================================*/

u8 SendAddressTimer_Callback(void (*ISR_Timer)(void),u8 Copy_u8INT_Number)
{ u8 Local_u8Status=RT_OK;
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <SendAddressTimer_Callback+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <SendAddressTimer_Callback+0x8>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9b 83       	std	Y+3, r25	; 0x03
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	6c 83       	std	Y+4, r22	; 0x04
    182a:	19 82       	std	Y+1, r1	; 0x01

	if(Timer_VidCallBack_ISR_Funtion[Copy_u8INT_Number]!=NULL)
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	fc 01       	movw	r30, r24
    1838:	ee 55       	subi	r30, 0x5E	; 94
    183a:	fe 4f       	sbci	r31, 0xFE	; 254
    183c:	80 81       	ld	r24, Z
    183e:	91 81       	ldd	r25, Z+1	; 0x01
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f0       	breq	.+26     	; 0x185e <SendAddressTimer_Callback+0x46>
	{
		Timer_VidCallBack_ISR_Funtion[Copy_u8INT_Number]=ISR_Timer;
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	fc 01       	movw	r30, r24
    1850:	ee 55       	subi	r30, 0x5E	; 94
    1852:	fe 4f       	sbci	r31, 0xFE	; 254
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	9b 81       	ldd	r25, Y+3	; 0x03
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <SendAddressTimer_Callback+0x4a>
	}
	else
	{
		Local_u8Status=NULL_POINTER;
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    1862:	89 81       	ldd	r24, Y+1	; 0x01

}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <__vector_11>:

void __vector_11 (void) __attribute__((signal));     //Timer0 OVF
void __vector_11 (void)
{
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	11 24       	eor	r1, r1
    187c:	2f 93       	push	r18
    187e:	3f 93       	push	r19
    1880:	4f 93       	push	r20
    1882:	5f 93       	push	r21
    1884:	6f 93       	push	r22
    1886:	7f 93       	push	r23
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	af 93       	push	r26
    188e:	bf 93       	push	r27
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62

	Timer_VidCallBack_ISR_Funtion[TIM0_OVF]();
    189c:	e0 91 a2 01 	lds	r30, 0x01A2
    18a0:	f0 91 a3 01 	lds	r31, 0x01A3
    18a4:	09 95       	icall

}
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	ff 91       	pop	r31
    18ac:	ef 91       	pop	r30
    18ae:	bf 91       	pop	r27
    18b0:	af 91       	pop	r26
    18b2:	9f 91       	pop	r25
    18b4:	8f 91       	pop	r24
    18b6:	7f 91       	pop	r23
    18b8:	6f 91       	pop	r22
    18ba:	5f 91       	pop	r21
    18bc:	4f 91       	pop	r20
    18be:	3f 91       	pop	r19
    18c0:	2f 91       	pop	r18
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <__vector_9>:

}*/

void __vector_9 (void) __attribute__((signal));		//Timer1 OVF
void __vector_9 (void)
{
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	2f 93       	push	r18
    18d8:	3f 93       	push	r19
    18da:	4f 93       	push	r20
    18dc:	5f 93       	push	r21
    18de:	6f 93       	push	r22
    18e0:	7f 93       	push	r23
    18e2:	8f 93       	push	r24
    18e4:	9f 93       	push	r25
    18e6:	af 93       	push	r26
    18e8:	bf 93       	push	r27
    18ea:	ef 93       	push	r30
    18ec:	ff 93       	push	r31
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62

	Timer_VidCallBack_ISR_Funtion[TMR1_OVF]();
    18f6:	e0 91 a6 01 	lds	r30, 0x01A6
    18fa:	f0 91 a7 01 	lds	r31, 0x01A7
    18fe:	09 95       	icall

}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	0f 90       	pop	r0
    1922:	1f 90       	pop	r1
    1924:	18 95       	reti

00001926 <__vector_8>:

void __vector_8 (void) __attribute__((signal)); 	//Timer1 CTC_B
void __vector_8 (void)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	2f 93       	push	r18
    1932:	3f 93       	push	r19
    1934:	4f 93       	push	r20
    1936:	5f 93       	push	r21
    1938:	6f 93       	push	r22
    193a:	7f 93       	push	r23
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	af 93       	push	r26
    1942:	bf 93       	push	r27
    1944:	ef 93       	push	r30
    1946:	ff 93       	push	r31
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62

	Timer_VidCallBack_ISR_Funtion[TMR1_CTC_ChannelB]();
    1950:	e0 91 aa 01 	lds	r30, 0x01AA
    1954:	f0 91 ab 01 	lds	r31, 0x01AB
    1958:	09 95       	icall

}
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	ff 91       	pop	r31
    1960:	ef 91       	pop	r30
    1962:	bf 91       	pop	r27
    1964:	af 91       	pop	r26
    1966:	9f 91       	pop	r25
    1968:	8f 91       	pop	r24
    196a:	7f 91       	pop	r23
    196c:	6f 91       	pop	r22
    196e:	5f 91       	pop	r21
    1970:	4f 91       	pop	r20
    1972:	3f 91       	pop	r19
    1974:	2f 91       	pop	r18
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	0f 90       	pop	r0
    197c:	1f 90       	pop	r1
    197e:	18 95       	reti

00001980 <__vector_7>:

void __vector_7 (void) __attribute__((signal));		//Timer1 CTC_A
void __vector_7 (void)
{
    1980:	1f 92       	push	r1
    1982:	0f 92       	push	r0
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	0f 92       	push	r0
    1988:	11 24       	eor	r1, r1
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62

	Timer_VidCallBack_ISR_Funtion[TMR1_CTC_ChannelA]();
    19aa:	e0 91 a8 01 	lds	r30, 0x01A8
    19ae:	f0 91 a9 01 	lds	r31, 0x01A9
    19b2:	09 95       	icall

}
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <__vector_5>:

}
*/
void __vector_5 (void) __attribute__((signal));	     //Timer2 OVF
void __vector_5 (void)
{
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62

	Timer_VidCallBack_ISR_Funtion[TMR2_OVF]();
    1a04:	e0 91 ae 01 	lds	r30, 0x01AE
    1a08:	f0 91 af 01 	lds	r31, 0x01AF
    1a0c:	09 95       	icall

}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	ff 91       	pop	r31
    1a14:	ef 91       	pop	r30
    1a16:	bf 91       	pop	r27
    1a18:	af 91       	pop	r26
    1a1a:	9f 91       	pop	r25
    1a1c:	8f 91       	pop	r24
    1a1e:	7f 91       	pop	r23
    1a20:	6f 91       	pop	r22
    1a22:	5f 91       	pop	r21
    1a24:	4f 91       	pop	r20
    1a26:	3f 91       	pop	r19
    1a28:	2f 91       	pop	r18
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <__vector_4>:

void __vector_4 (void) __attribute__((signal));		//Timer2 CTC
void __vector_4 (void)
{
    1a34:	1f 92       	push	r1
    1a36:	0f 92       	push	r0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	0f 92       	push	r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62

	Timer_VidCallBack_ISR_Funtion[TMR2_CTC]();
    1a5e:	e0 91 b0 01 	lds	r30, 0x01B0
    1a62:	f0 91 b1 01 	lds	r31, 0x01B1
    1a66:	09 95       	icall

}
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	ff 91       	pop	r31
    1a6e:	ef 91       	pop	r30
    1a70:	bf 91       	pop	r27
    1a72:	af 91       	pop	r26
    1a74:	9f 91       	pop	r25
    1a76:	8f 91       	pop	r24
    1a78:	7f 91       	pop	r23
    1a7a:	6f 91       	pop	r22
    1a7c:	5f 91       	pop	r21
    1a7e:	4f 91       	pop	r20
    1a80:	3f 91       	pop	r19
    1a82:	2f 91       	pop	r18
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	0f 90       	pop	r0
    1a8a:	1f 90       	pop	r1
    1a8c:	18 95       	reti

00001a8e <PORT_VoidInit>:
#include "PORT_Interface.h"
#include "PORT_REG.h"
#include "PORT_private.h"

void PORT_VoidInit()
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
DDRA_REG=PORTA_DIR;
    1a96:	ea e3       	ldi	r30, 0x3A	; 58
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 ef       	ldi	r24, 0xF0	; 240
    1a9c:	80 83       	st	Z, r24
DDRB_REG=PORTB_DIR;
    1a9e:	e7 e3       	ldi	r30, 0x37	; 55
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	80 83       	st	Z, r24
DDRC_REG=PORTC_DIR;
    1aa6:	e4 e3       	ldi	r30, 0x34	; 52
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	80 83       	st	Z, r24
DDRD_REG=PORTD_DIR;
    1aae:	e1 e3       	ldi	r30, 0x31	; 49
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	8b eb       	ldi	r24, 0xBB	; 187
    1ab4:	80 83       	st	Z, r24

PORTA_REG_INITIAL=PORTA_INITIAL_VALUE;
    1ab6:	eb e3       	ldi	r30, 0x3B	; 59
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	80 83       	st	Z, r24
PORTB_REG_INITIAL=PORTB_INITIAL_VALUE;
    1abe:	e8 e3       	ldi	r30, 0x38	; 56
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	10 82       	st	Z, r1
PORTC_REG_INITIAL=PORTC_INITIAL_VALUE;
    1ac4:	e5 e3       	ldi	r30, 0x35	; 53
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	10 82       	st	Z, r1
PORTD_REG_INITIAL=PORTD_INITIAL_VALUE;
    1aca:	e2 e3       	ldi	r30, 0x32	; 50
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	10 82       	st	Z, r1

}
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <EXTI_VidEnableOrDisableGIE>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Interface.h"
#include "GIE_REG.h"

void EXTI_VidEnableOrDisableGIE(u8 Copy_u8EN_DIS)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	0f 92       	push	r0
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8EN_DIS==ENABLE)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	41 f4       	brne	.+16     	; 0x1af8 <EXTI_VidEnableOrDisableGIE+0x22>
		{
			SET_BIT(SREG_REG,SREG_I_BIT);
    1ae8:	af e5       	ldi	r26, 0x5F	; 95
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ef e5       	ldi	r30, 0x5F	; 95
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 68       	ori	r24, 0x80	; 128
    1af4:	8c 93       	st	X, r24
    1af6:	0a c0       	rjmp	.+20     	; 0x1b0c <EXTI_VidEnableOrDisableGIE+0x36>

		}
	else if( Copy_u8EN_DIS==DISABLE)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	88 23       	and	r24, r24
    1afc:	39 f4       	brne	.+14     	; 0x1b0c <EXTI_VidEnableOrDisableGIE+0x36>
		{
		    CLR_BIT(SREG_REG,SREG_I_BIT);
    1afe:	af e5       	ldi	r26, 0x5F	; 95
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	ef e5       	ldi	r30, 0x5F	; 95
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	8c 93       	st	X, r24
		}
}
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <EXTI_u8EnableOrDisableInterruptPin_Postbuild>:
#include "External_Interrupt_Config.h"
#include "../DIO_Driver/DIO_REG.h"
#include "../DIO_Driver/DIO_Interface.h"

u8 EXTI_u8EnableOrDisableInterruptPin_Postbuild(u8 Copy_u8INTNum,u8 Copy_u8EN_DIS)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	27 97       	sbiw	r28, 0x07	; 7
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	8a 83       	std	Y+2, r24	; 0x02
    1b2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Status=RT_OK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01
if (Copy_u8EN_DIS==ENABLE)
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	a9 f5       	brne	.+106    	; 0x1b9e <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x8a>
	{
	    /*GIE  Enable*/
		SET_BIT(SREG_REG,SREG_I_BIT);
    1b34:	af e5       	ldi	r26, 0x5F	; 95
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ef e5       	ldi	r30, 0x5F	; 95
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 68       	ori	r24, 0x80	; 128
    1b40:	8c 93       	st	X, r24
		switch(Copy_u8INTNum)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	3f 83       	std	Y+7, r19	; 0x07
    1b4a:	2e 83       	std	Y+6, r18	; 0x06
    1b4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	91 05       	cpc	r25, r1
    1b54:	89 f0       	breq	.+34     	; 0x1b78 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x64>
    1b56:	2e 81       	ldd	r18, Y+6	; 0x06
    1b58:	3f 81       	ldd	r19, Y+7	; 0x07
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	a1 f0       	breq	.+40     	; 0x1b88 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x74>
    1b60:	8e 81       	ldd	r24, Y+6	; 0x06
    1b62:	9f 81       	ldd	r25, Y+7	; 0x07
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	c1 f4       	brne	.+48     	; 0x1b98 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x84>
		{
		case INT0:{SET_BIT(GICR_REG,GICR_INT0); break;}
    1b68:	ab e5       	ldi	r26, 0x5B	; 91
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	eb e5       	ldi	r30, 0x5B	; 91
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 64       	ori	r24, 0x40	; 64
    1b74:	8c 93       	st	X, r24
    1b76:	46 c0       	rjmp	.+140    	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT1:{SET_BIT(GICR_REG,GICR_INT1); break;}
    1b78:	ab e5       	ldi	r26, 0x5B	; 91
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e5       	ldi	r30, 0x5B	; 91
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 68       	ori	r24, 0x80	; 128
    1b84:	8c 93       	st	X, r24
    1b86:	3e c0       	rjmp	.+124    	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT2:{SET_BIT(GICR_REG,GICR_INT2); break;}
    1b88:	ab e5       	ldi	r26, 0x5B	; 91
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	eb e5       	ldi	r30, 0x5B	; 91
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	80 62       	ori	r24, 0x20	; 32
    1b94:	8c 93       	st	X, r24
    1b96:	36 c0       	rjmp	.+108    	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		default:{Local_u8Status=RT_NOK;}
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	33 c0       	rjmp	.+102    	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		}
	}
else if( Copy_u8EN_DIS==DISABLE)
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	88 23       	and	r24, r24
    1ba2:	71 f5       	brne	.+92     	; 0x1c00 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xec>
	{

		switch(Copy_u8INTNum)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3d 83       	std	Y+5, r19	; 0x05
    1bac:	2c 83       	std	Y+4, r18	; 0x04
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	89 f0       	breq	.+34     	; 0x1bda <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xc6>
    1bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bba:	3d 81       	ldd	r19, Y+5	; 0x05
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	a1 f0       	breq	.+40     	; 0x1bea <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xd6>
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	c1 f4       	brne	.+48     	; 0x1bfa <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xe6>
		{
		case INT0:{CLR_BIT(GICR_REG,GICR_INT0); break;}
    1bca:	ab e5       	ldi	r26, 0x5B	; 91
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb e5       	ldi	r30, 0x5B	; 91
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 7b       	andi	r24, 0xBF	; 191
    1bd6:	8c 93       	st	X, r24
    1bd8:	15 c0       	rjmp	.+42     	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT1:{CLR_BIT(GICR_REG,GICR_INT1); break;}
    1bda:	ab e5       	ldi	r26, 0x5B	; 91
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	eb e5       	ldi	r30, 0x5B	; 91
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 77       	andi	r24, 0x7F	; 127
    1be6:	8c 93       	st	X, r24
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT2:{CLR_BIT(GICR_REG,GICR_INT2); break;}
    1bea:	ab e5       	ldi	r26, 0x5B	; 91
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e5       	ldi	r30, 0x5B	; 91
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8f 7d       	andi	r24, 0xDF	; 223
    1bf6:	8c 93       	st	X, r24
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		default:{Local_u8Status=RT_NOK;}
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		}
	}
else
	{
	  Local_u8Status=RT_NOK;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_u8Status;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c06:	27 96       	adiw	r28, 0x07	; 7
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <EXTI_voidEnableOrDisableInterruptPin_Prebuild>:

void EXTI_voidEnableOrDisableInterruptPin_Prebuild()
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
/*Configuration for INT0*/
#if INT0_INITAIL_STATE==ENABLE
	{
		SET_BIT(SREG_REG,SREG_I_BIT);
    1c20:	af e5       	ldi	r26, 0x5F	; 95
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	ef e5       	ldi	r30, 0x5F	; 95
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 68       	ori	r24, 0x80	; 128
    1c2c:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,GICR_INT0);
    1c2e:	ab e5       	ldi	r26, 0x5B	; 91
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	eb e5       	ldi	r30, 0x5B	; 91
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,GICR_INT1);

	}
#elif( INT1_INITAIL_STATE==DISABLE)
	{
		CLR_BIT(GICR_REG,GICR_INT1);
    1c3c:	ab e5       	ldi	r26, 0x5B	; 91
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	eb e5       	ldi	r30, 0x5B	; 91
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 77       	andi	r24, 0x7F	; 127
    1c48:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,GICR_INT2);

	}
#elif( INT2_INITAIL_STATE==DISABLE)
	{
		CLR_BIT(GICR_REG,GICR_INT2);
    1c4a:	ab e5       	ldi	r26, 0x5B	; 91
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	eb e5       	ldi	r30, 0x5B	; 91
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7d       	andi	r24, 0xDF	; 223
    1c56:	8c 93       	st	X, r24
	}
#endif


}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <EXTI_u8ControlSense_Postbuild>:

u8 EXTI_u8ControlSense_Postbuild(u8 Copy_u8INTNum,u8 Copy_u8Sense)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	2e 97       	sbiw	r28, 0x0e	; 14
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    1c74:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Status=RT_OK;
    1c76:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TempReg = MCUCR_REG;
    1c78:	e5 e5       	ldi	r30, 0x55	; 85
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Sense)
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3e 87       	std	Y+14, r19	; 0x0e
    1c88:	2d 87       	std	Y+13, r18	; 0x0d
    1c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	c9 f1       	breq	.+114    	; 0x1d06 <EXTI_u8ControlSense_Postbuild+0xa8>
    1c94:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c96:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <EXTI_u8ControlSense_Postbuild+0x4a>
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	71 f0       	breq	.+28     	; 0x1cc2 <EXTI_u8ControlSense_Postbuild+0x64>
    1ca6:	bf c0       	rjmp	.+382    	; 0x1e26 <EXTI_u8ControlSense_Postbuild+0x1c8>
    1ca8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1caa:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <EXTI_u8ControlSense_Postbuild+0x56>
    1cb2:	51 c0       	rjmp	.+162    	; 0x1d56 <EXTI_u8ControlSense_Postbuild+0xf8>
    1cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	91 05       	cpc	r25, r1
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <EXTI_u8ControlSense_Postbuild+0x62>
    1cbe:	7f c0       	rjmp	.+254    	; 0x1dbe <EXTI_u8ControlSense_Postbuild+0x160>
    1cc0:	b2 c0       	rjmp	.+356    	; 0x1e26 <EXTI_u8ControlSense_Postbuild+0x1c8>
	{
		case LOW_LEVEL:
		{
			switch(Copy_u8INTNum)
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3c 87       	std	Y+12, r19	; 0x0c
    1cca:	2b 87       	std	Y+11, r18	; 0x0b
    1ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cce:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <EXTI_u8ControlSense_Postbuild+0x82>
    1cd4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cd6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cd8:	21 30       	cpi	r18, 0x01	; 1
    1cda:	31 05       	cpc	r19, r1
    1cdc:	49 f0       	breq	.+18     	; 0x1cf0 <EXTI_u8ControlSense_Postbuild+0x92>
    1cde:	10 c0       	rjmp	.+32     	; 0x1d00 <EXTI_u8ControlSense_Postbuild+0xa2>
				{
				case INT0:{	Local_u8TempReg&=INT0_SENSE_MASK;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	8c 7f       	andi	r24, 0xFC	; 252
    1ce4:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOW_LEVEL_INT01<<MCUCR_ISC01_ISC00_SELECT);
							MCUCR_REG=Local_u8TempReg;
    1ce6:	e5 e5       	ldi	r30, 0x55	; 85
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	9d c0       	rjmp	.+314    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>

							break;
						   }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	83 7f       	andi	r24, 0xF3	; 243
    1cf4:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOW_LEVEL_INT01<<MCUCR_ISC11_ISC10_SELECT);
							MCUCR_REG=Local_u8TempReg;
    1cf6:	e5 e5       	ldi	r30, 0x55	; 85
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	95 c0       	rjmp	.+298    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>

							break;
						  }
				default:{Local_u8Status=RT_NOK;}
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	8a 83       	std	Y+2, r24	; 0x02
    1d04:	92 c0       	rjmp	.+292    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
		break;
		}
		case LOGICAL_CHANGE:
		{
			switch(Copy_u8INTNum)
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	3a 87       	std	Y+10, r19	; 0x0a
    1d0e:	29 87       	std	Y+9, r18	; 0x09
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <EXTI_u8ControlSense_Postbuild+0xc6>
    1d18:	29 85       	ldd	r18, Y+9	; 0x09
    1d1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d1c:	21 30       	cpi	r18, 0x01	; 1
    1d1e:	31 05       	cpc	r19, r1
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <EXTI_u8ControlSense_Postbuild+0xdc>
    1d22:	16 c0       	rjmp	.+44     	; 0x1d50 <EXTI_u8ControlSense_Postbuild+0xf2>
				{
				case INT0:{
							Local_u8TempReg&=INT0_SENSE_MASK;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	8c 7f       	andi	r24, 0xFC	; 252
    1d28:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOGICAL_CHANGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	81 60       	ori	r24, 0x01	; 1
    1d2e:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
    1d30:	e5 e5       	ldi	r30, 0x55	; 85
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	78 c0       	rjmp	.+240    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	83 7f       	andi	r24, 0xF3	; 243
    1d3e:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOGICAL_CHANGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	84 60       	ori	r24, 0x04	; 4
    1d44:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
    1d46:	e5 e5       	ldi	r30, 0x55	; 85
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	6d c0       	rjmp	.+218    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				default:{Local_u8Status=RT_NOK;}
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	8a 83       	std	Y+2, r24	; 0x02
    1d54:	6a c0       	rjmp	.+212    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
			break;
		}
		case FALLING_EDGE:
		{
			switch(Copy_u8INTNum)
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	38 87       	std	Y+8, r19	; 0x08
    1d5e:	2f 83       	std	Y+7, r18	; 0x07
    1d60:	8f 81       	ldd	r24, Y+7	; 0x07
    1d62:	98 85       	ldd	r25, Y+8	; 0x08
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	91 05       	cpc	r25, r1
    1d68:	a1 f0       	breq	.+40     	; 0x1d92 <EXTI_u8ControlSense_Postbuild+0x134>
    1d6a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d6c:	38 85       	ldd	r19, Y+8	; 0x08
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	d1 f0       	breq	.+52     	; 0x1da8 <EXTI_u8ControlSense_Postbuild+0x14a>
    1d74:	8f 81       	ldd	r24, Y+7	; 0x07
    1d76:	98 85       	ldd	r25, Y+8	; 0x08
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	f1 f4       	brne	.+60     	; 0x1db8 <EXTI_u8ControlSense_Postbuild+0x15a>
				{
				case INT0:{
							Local_u8TempReg&=INT0_SENSE_MASK;
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	8c 7f       	andi	r24, 0xFC	; 252
    1d80:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(FALLING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	82 60       	ori	r24, 0x02	; 2
    1d86:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
    1d88:	e5 e5       	ldi	r30, 0x55	; 85
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	4c c0       	rjmp	.+152    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	83 7f       	andi	r24, 0xF3	; 243
    1d96:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(FALLING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	88 60       	ori	r24, 0x08	; 8
    1d9c:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
    1d9e:	e5 e5       	ldi	r30, 0x55	; 85
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	41 c0       	rjmp	.+130    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT2:{CLR_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT); break;}
    1da8:	a4 e5       	ldi	r26, 0x54	; 84
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e4 e5       	ldi	r30, 0x54	; 84
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	8f 7b       	andi	r24, 0xBF	; 191
    1db4:	8c 93       	st	X, r24
    1db6:	39 c0       	rjmp	.+114    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
				default:{Local_u8Status=RT_NOK;}
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	8a 83       	std	Y+2, r24	; 0x02
    1dbc:	36 c0       	rjmp	.+108    	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
			break;
		}
		case RISING_EDGE:
		{
			switch(Copy_u8INTNum)
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	3e 83       	std	Y+6, r19	; 0x06
    1dc6:	2d 83       	std	Y+5, r18	; 0x05
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	91 05       	cpc	r25, r1
    1dd0:	a1 f0       	breq	.+40     	; 0x1dfa <EXTI_u8ControlSense_Postbuild+0x19c>
    1dd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd6:	22 30       	cpi	r18, 0x02	; 2
    1dd8:	31 05       	cpc	r19, r1
    1dda:	d1 f0       	breq	.+52     	; 0x1e10 <EXTI_u8ControlSense_Postbuild+0x1b2>
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	f1 f4       	brne	.+60     	; 0x1e20 <EXTI_u8ControlSense_Postbuild+0x1c2>
				{
				case INT0:{

							Local_u8TempReg&=INT0_SENSE_MASK;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	8c 7f       	andi	r24, 0xFC	; 252
    1de8:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(RISING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	83 60       	ori	r24, 0x03	; 3
    1dee:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
    1df0:	e5 e5       	ldi	r30, 0x55	; 85
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	18 c0       	rjmp	.+48     	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	83 7f       	andi	r24, 0xF3	; 243
    1dfe:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(RISING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	8c 60       	ori	r24, 0x0C	; 12
    1e04:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
    1e06:	e5 e5       	ldi	r30, 0x55	; 85
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	80 83       	st	Z, r24
    1e0e:	0d c0       	rjmp	.+26     	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT2:{SET_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT); break;}
    1e10:	a4 e5       	ldi	r26, 0x54	; 84
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e4 e5       	ldi	r30, 0x54	; 84
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 64       	ori	r24, 0x40	; 64
    1e1c:	8c 93       	st	X, r24
    1e1e:	05 c0       	rjmp	.+10     	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
				default:{Local_u8Status=RT_NOK;}
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	8a 83       	std	Y+2, r24	; 0x02
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
			break;
		}
		default:{Local_u8Status=RT_NOK;}
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	8a 83       	std	Y+2, r24	; 0x02

	}
	return Local_u8Status;
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1e2c:	2e 96       	adiw	r28, 0x0e	; 14
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <EXTI_VidControlSense_Prebuild>:


void EXTI_VidControlSense_Prebuild(void)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	/*select Sense for INT0*/
#if (INT0_SENSE==FALLING_EDGE_INT01)
	{
		MCUCR_REG&=INT0_SENSE_MASK;
    1e46:	a5 e5       	ldi	r26, 0x55	; 85
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e5       	ldi	r30, 0x55	; 85
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8c 7f       	andi	r24, 0xFC	; 252
    1e52:	8c 93       	st	X, r24
		MCUCR_REG|=(FALLING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
    1e54:	a5 e5       	ldi	r26, 0x55	; 85
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e5       	ldi	r30, 0x55	; 85
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	82 60       	ori	r24, 0x02	; 2
    1e60:	8c 93       	st	X, r24
		MCUCR_REG|=(FALLING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);

	}
#elif (INT1_SENSE==RISING_EDGE_INT01)
	{
		MCUCR_REG&=INT1_SENSE_MASK;
    1e62:	a5 e5       	ldi	r26, 0x55	; 85
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e5       	ldi	r30, 0x55	; 85
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	83 7f       	andi	r24, 0xF3	; 243
    1e6e:	8c 93       	st	X, r24
		MCUCR_REG|=(RISING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
    1e70:	a5 e5       	ldi	r26, 0x55	; 85
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e5 e5       	ldi	r30, 0x55	; 85
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8c 60       	ori	r24, 0x0C	; 12
    1e7c:	8c 93       	st	X, r24


	/*select Sense for INT2*/
#if INT2_SENSE==FALLING_EDGE_INT2
	{
		CLR_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
    1e7e:	a4 e5       	ldi	r26, 0x54	; 84
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e4 e5       	ldi	r30, 0x54	; 84
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7b       	andi	r24, 0xBF	; 191
    1e8a:	8c 93       	st	X, r24
	{
		SET_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
	}
#endif

}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <SendAddress_Callback>:

static void (*EXTI_VidCallBack_ISR_Funtion[3])(void)={NULL};


u8 SendAddress_Callback(void (*ISR_INT0)(void),u8 Copy_u8Id)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <SendAddress_Callback+0x6>
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <SendAddress_Callback+0x8>
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	9b 83       	std	Y+3, r25	; 0x03
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=RT_OK;
    1ea4:	19 82       	std	Y+1, r1	; 0x01



	if(ISR_INT0!=NULL)
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f0       	breq	.+26     	; 0x1ec8 <SendAddress_Callback+0x36>
	{
		//SET_BIT(PORTA_REG,PIN1);
		EXTI_VidCallBack_ISR_Funtion[Copy_u8Id]=ISR_INT0;
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	fc 01       	movw	r30, r24
    1eba:	ee 54       	subi	r30, 0x4E	; 78
    1ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <SendAddress_Callback+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	0f 92       	push	r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	2f 93       	push	r18
    1ee8:	3f 93       	push	r19
    1eea:	4f 93       	push	r20
    1eec:	5f 93       	push	r21
    1eee:	6f 93       	push	r22
    1ef0:	7f 93       	push	r23
    1ef2:	8f 93       	push	r24
    1ef4:	9f 93       	push	r25
    1ef6:	af 93       	push	r26
    1ef8:	bf 93       	push	r27
    1efa:	ef 93       	push	r30
    1efc:	ff 93       	push	r31
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62

	EXTI_VidCallBack_ISR_Funtion[0]();
    1f06:	e0 91 b2 01 	lds	r30, 0x01B2
    1f0a:	f0 91 b3 01 	lds	r31, 0x01B3
    1f0e:	09 95       	icall
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    1f36:	1f 92       	push	r1
    1f38:	0f 92       	push	r0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	2f 93       	push	r18
    1f42:	3f 93       	push	r19
    1f44:	4f 93       	push	r20
    1f46:	5f 93       	push	r21
    1f48:	6f 93       	push	r22
    1f4a:	7f 93       	push	r23
    1f4c:	8f 93       	push	r24
    1f4e:	9f 93       	push	r25
    1f50:	af 93       	push	r26
    1f52:	bf 93       	push	r27
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62

	EXTI_VidCallBack_ISR_Funtion[1]();
    1f60:	e0 91 b4 01 	lds	r30, 0x01B4
    1f64:	f0 91 b5 01 	lds	r31, 0x01B5
    1f68:	09 95       	icall
}
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	ff 91       	pop	r31
    1f70:	ef 91       	pop	r30
    1f72:	bf 91       	pop	r27
    1f74:	af 91       	pop	r26
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	7f 91       	pop	r23
    1f7c:	6f 91       	pop	r22
    1f7e:	5f 91       	pop	r21
    1f80:	4f 91       	pop	r20
    1f82:	3f 91       	pop	r19
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	0f 90       	pop	r0
    1f8c:	1f 90       	pop	r1
    1f8e:	18 95       	reti

00001f90 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1f90:	1f 92       	push	r1
    1f92:	0f 92       	push	r0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	0f 92       	push	r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	2f 93       	push	r18
    1f9c:	3f 93       	push	r19
    1f9e:	4f 93       	push	r20
    1fa0:	5f 93       	push	r21
    1fa2:	6f 93       	push	r22
    1fa4:	7f 93       	push	r23
    1fa6:	8f 93       	push	r24
    1fa8:	9f 93       	push	r25
    1faa:	af 93       	push	r26
    1fac:	bf 93       	push	r27
    1fae:	ef 93       	push	r30
    1fb0:	ff 93       	push	r31
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62

	EXTI_VidCallBack_ISR_Funtion[2]();
    1fba:	e0 91 b6 01 	lds	r30, 0x01B6
    1fbe:	f0 91 b7 01 	lds	r31, 0x01B7
    1fc2:	09 95       	icall
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	ff 91       	pop	r31
    1fca:	ef 91       	pop	r30
    1fcc:	bf 91       	pop	r27
    1fce:	af 91       	pop	r26
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	7f 91       	pop	r23
    1fd6:	6f 91       	pop	r22
    1fd8:	5f 91       	pop	r21
    1fda:	4f 91       	pop	r20
    1fdc:	3f 91       	pop	r19
    1fde:	2f 91       	pop	r18
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	0f 90       	pop	r0
    1fe6:	1f 90       	pop	r1
    1fe8:	18 95       	reti

00001fea <DIO_U8SetPortDir>:
#include "DIO_REG.h"
#include "DIO_Interface.h"


u8 DIO_U8SetPortDir(enum PORTS Copy_u8PortNo,u8  Copy_u8dDir)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <DIO_U8SetPortDir+0x6>
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <DIO_U8SetPortDir+0x8>
    1ff2:	0f 92       	push	r0
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
    1ffa:	6b 83       	std	Y+3, r22	; 0x03

	 u8 Local_Status=RT_OK;
    1ffc:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo<0||Copy_u8PortNo>3)
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	18 f0       	brcs	.+6      	; 0x200a <DIO_U8SetPortDir+0x20>
{
	Local_Status=RT_NOK;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	32 c0       	rjmp	.+100    	; 0x206e <DIO_U8SetPortDir+0x84>

}
else
{
	switch(Copy_u8PortNo)
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	3d 83       	std	Y+5, r19	; 0x05
    2012:	2c 83       	std	Y+4, r18	; 0x04
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	91 05       	cpc	r25, r1
    201c:	d1 f0       	breq	.+52     	; 0x2052 <DIO_U8SetPortDir+0x68>
    201e:	2c 81       	ldd	r18, Y+4	; 0x04
    2020:	3d 81       	ldd	r19, Y+5	; 0x05
    2022:	22 30       	cpi	r18, 0x02	; 2
    2024:	31 05       	cpc	r19, r1
    2026:	2c f4       	brge	.+10     	; 0x2032 <DIO_U8SetPortDir+0x48>
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	61 f0       	breq	.+24     	; 0x2048 <DIO_U8SetPortDir+0x5e>
    2030:	1e c0       	rjmp	.+60     	; 0x206e <DIO_U8SetPortDir+0x84>
    2032:	2c 81       	ldd	r18, Y+4	; 0x04
    2034:	3d 81       	ldd	r19, Y+5	; 0x05
    2036:	22 30       	cpi	r18, 0x02	; 2
    2038:	31 05       	cpc	r19, r1
    203a:	81 f0       	breq	.+32     	; 0x205c <DIO_U8SetPortDir+0x72>
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	83 30       	cpi	r24, 0x03	; 3
    2042:	91 05       	cpc	r25, r1
    2044:	81 f0       	breq	.+32     	; 0x2066 <DIO_U8SetPortDir+0x7c>
    2046:	13 c0       	rjmp	.+38     	; 0x206e <DIO_U8SetPortDir+0x84>
	{
	case 0:{DDRA_REG=Copy_u8dDir; break;}
    2048:	ea e3       	ldi	r30, 0x3A	; 58
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	80 83       	st	Z, r24
    2050:	0e c0       	rjmp	.+28     	; 0x206e <DIO_U8SetPortDir+0x84>
	case 1:{DDRB_REG=Copy_u8dDir; break;}
    2052:	e7 e3       	ldi	r30, 0x37	; 55
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	80 83       	st	Z, r24
    205a:	09 c0       	rjmp	.+18     	; 0x206e <DIO_U8SetPortDir+0x84>
	case 2:{DDRC_REG=Copy_u8dDir; break;}
    205c:	e4 e3       	ldi	r30, 0x34	; 52
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	80 83       	st	Z, r24
    2064:	04 c0       	rjmp	.+8      	; 0x206e <DIO_U8SetPortDir+0x84>
	case 3:{DDRD_REG=Copy_u8dDir; break;}
    2066:	e1 e3       	ldi	r30, 0x31	; 49
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	80 83       	st	Z, r24
	}
}
return Local_Status;
    206e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <DIO_U8SetPortVal>:

u8 DIO_U8SetPortVal(enum PORTS Copy_u8PortNo , u8 Copy_Val)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <DIO_U8SetPortVal+0x6>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <DIO_U8SetPortVal+0x8>
    2088:	0f 92       	push	r0
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	8a 83       	std	Y+2, r24	; 0x02
    2090:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Status=RT_OK;
    2092:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <0||Copy_u8PortNo>3)
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	84 30       	cpi	r24, 0x04	; 4
    2098:	18 f0       	brcs	.+6      	; 0x20a0 <DIO_U8SetPortVal+0x20>
	{
		 Local_Status=RT_NOK;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	32 c0       	rjmp	.+100    	; 0x2104 <DIO_U8SetPortVal+0x84>

	}
	else
	{
		switch(Copy_u8PortNo)
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3d 83       	std	Y+5, r19	; 0x05
    20a8:	2c 83       	std	Y+4, r18	; 0x04
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	d1 f0       	breq	.+52     	; 0x20e8 <DIO_U8SetPortVal+0x68>
    20b4:	2c 81       	ldd	r18, Y+4	; 0x04
    20b6:	3d 81       	ldd	r19, Y+5	; 0x05
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <DIO_U8SetPortVal+0x48>
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	61 f0       	breq	.+24     	; 0x20de <DIO_U8SetPortVal+0x5e>
    20c6:	1e c0       	rjmp	.+60     	; 0x2104 <DIO_U8SetPortVal+0x84>
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	81 f0       	breq	.+32     	; 0x20f2 <DIO_U8SetPortVal+0x72>
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	81 f0       	breq	.+32     	; 0x20fc <DIO_U8SetPortVal+0x7c>
    20dc:	13 c0       	rjmp	.+38     	; 0x2104 <DIO_U8SetPortVal+0x84>
		{
		case 0:{PORTA_REG=Copy_Val; break;}
    20de:	eb e3       	ldi	r30, 0x3B	; 59
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	80 83       	st	Z, r24
    20e6:	0e c0       	rjmp	.+28     	; 0x2104 <DIO_U8SetPortVal+0x84>
		case 1:{PORTB_REG=Copy_Val; break;}
    20e8:	e8 e3       	ldi	r30, 0x38	; 56
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	80 83       	st	Z, r24
    20f0:	09 c0       	rjmp	.+18     	; 0x2104 <DIO_U8SetPortVal+0x84>
		case 2:{PORTC_REG=Copy_Val; break;}
    20f2:	e5 e3       	ldi	r30, 0x35	; 53
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	80 83       	st	Z, r24
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <DIO_U8SetPortVal+0x84>
		case 3:{PORTD_REG=Copy_Val; break;}
    20fc:	e2 e3       	ldi	r30, 0x32	; 50
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
    2104:	89 81       	ldd	r24, Y+1	; 0x01

}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <DIO_U8GetPortVal>:

u8 DIO_U8GetPortVal(enum PORTS Copy_u8PortNo, u8* u8_Val)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <DIO_U8GetPortVal+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <DIO_U8GetPortVal+0x8>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <DIO_U8GetPortVal+0xa>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	8a 83       	std	Y+2, r24	; 0x02
    2126:	7c 83       	std	Y+4, r23	; 0x04
    2128:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_Status=RT_OK;
    212a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo<0|| Copy_u8PortNo>3)
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	84 30       	cpi	r24, 0x04	; 4
    2130:	18 f0       	brcs	.+6      	; 0x2138 <DIO_U8GetPortVal+0x22>
	{
		Local_Status=RT_NOK;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	3a c0       	rjmp	.+116    	; 0x21ac <DIO_U8GetPortVal+0x96>

	}
	else
	{
		switch(Copy_u8PortNo)
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	3e 83       	std	Y+6, r19	; 0x06
    2140:	2d 83       	std	Y+5, r18	; 0x05
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	91 05       	cpc	r25, r1
    214a:	e1 f0       	breq	.+56     	; 0x2184 <DIO_U8GetPortVal+0x6e>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	22 30       	cpi	r18, 0x02	; 2
    2152:	31 05       	cpc	r19, r1
    2154:	2c f4       	brge	.+10     	; 0x2160 <DIO_U8GetPortVal+0x4a>
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	61 f0       	breq	.+24     	; 0x2176 <DIO_U8GetPortVal+0x60>
    215e:	26 c0       	rjmp	.+76     	; 0x21ac <DIO_U8GetPortVal+0x96>
    2160:	2d 81       	ldd	r18, Y+5	; 0x05
    2162:	3e 81       	ldd	r19, Y+6	; 0x06
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	31 05       	cpc	r19, r1
    2168:	a1 f0       	breq	.+40     	; 0x2192 <DIO_U8GetPortVal+0x7c>
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	83 30       	cpi	r24, 0x03	; 3
    2170:	91 05       	cpc	r25, r1
    2172:	b1 f0       	breq	.+44     	; 0x21a0 <DIO_U8GetPortVal+0x8a>
    2174:	1b c0       	rjmp	.+54     	; 0x21ac <DIO_U8GetPortVal+0x96>
		{
		case 0:{*u8_Val=PINA_REG; break;}
    2176:	e9 e3       	ldi	r30, 0x39	; 57
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	eb 81       	ldd	r30, Y+3	; 0x03
    217e:	fc 81       	ldd	r31, Y+4	; 0x04
    2180:	80 83       	st	Z, r24
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <DIO_U8GetPortVal+0x96>
		case 1:{*u8_Val=PINB_REG; break;}
    2184:	e6 e3       	ldi	r30, 0x36	; 54
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	eb 81       	ldd	r30, Y+3	; 0x03
    218c:	fc 81       	ldd	r31, Y+4	; 0x04
    218e:	80 83       	st	Z, r24
    2190:	0d c0       	rjmp	.+26     	; 0x21ac <DIO_U8GetPortVal+0x96>
		case 2:{*u8_Val=PINC_REG; break;}
    2192:	e3 e3       	ldi	r30, 0x33	; 51
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	eb 81       	ldd	r30, Y+3	; 0x03
    219a:	fc 81       	ldd	r31, Y+4	; 0x04
    219c:	80 83       	st	Z, r24
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <DIO_U8GetPortVal+0x96>
		case 3:{*u8_Val=PIND_REG; break;}
    21a0:	e0 e3       	ldi	r30, 0x30	; 48
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	eb 81       	ldd	r30, Y+3	; 0x03
    21a8:	fc 81       	ldd	r31, Y+4	; 0x04
    21aa:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    21ae:	26 96       	adiw	r28, 0x06	; 6
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <DIO_U8SetPinDir>:

u8 DIO_U8SetPinDir(enum PORTS Copy_u8PortNo , enum PINS Copy_u8PinNo,u8 Copy_u8Dir)
{	u8 Local_Status=RT_OK;
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	28 97       	sbiw	r28, 0x08	; 8
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	8a 83       	std	Y+2, r24	; 0x02
    21d6:	6b 83       	std	Y+3, r22	; 0x03
    21d8:	4c 83       	std	Y+4, r20	; 0x04
    21da:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_u8Dir == HIGH)
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <DIO_U8SetPinDir+0x24>
    21e2:	6f c0       	rjmp	.+222    	; 0x22c2 <DIO_U8SetPinDir+0x102>
		{
			switch(Copy_u8PortNo)
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	38 87       	std	Y+8, r19	; 0x08
    21ec:	2f 83       	std	Y+7, r18	; 0x07
    21ee:	8f 81       	ldd	r24, Y+7	; 0x07
    21f0:	98 85       	ldd	r25, Y+8	; 0x08
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	91 05       	cpc	r25, r1
    21f6:	49 f1       	breq	.+82     	; 0x224a <DIO_U8SetPinDir+0x8a>
    21f8:	2f 81       	ldd	r18, Y+7	; 0x07
    21fa:	38 85       	ldd	r19, Y+8	; 0x08
    21fc:	22 30       	cpi	r18, 0x02	; 2
    21fe:	31 05       	cpc	r19, r1
    2200:	2c f4       	brge	.+10     	; 0x220c <DIO_U8SetPinDir+0x4c>
    2202:	8f 81       	ldd	r24, Y+7	; 0x07
    2204:	98 85       	ldd	r25, Y+8	; 0x08
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	61 f0       	breq	.+24     	; 0x2222 <DIO_U8SetPinDir+0x62>
    220a:	d5 c0       	rjmp	.+426    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
    220c:	2f 81       	ldd	r18, Y+7	; 0x07
    220e:	38 85       	ldd	r19, Y+8	; 0x08
    2210:	22 30       	cpi	r18, 0x02	; 2
    2212:	31 05       	cpc	r19, r1
    2214:	71 f1       	breq	.+92     	; 0x2272 <DIO_U8SetPinDir+0xb2>
    2216:	8f 81       	ldd	r24, Y+7	; 0x07
    2218:	98 85       	ldd	r25, Y+8	; 0x08
    221a:	83 30       	cpi	r24, 0x03	; 3
    221c:	91 05       	cpc	r25, r1
    221e:	e9 f1       	breq	.+122    	; 0x229a <DIO_U8SetPinDir+0xda>
    2220:	ca c0       	rjmp	.+404    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
			{
			case 0:
			{
				SET_BIT(DDRA_REG,Copy_u8PinNo);
    2222:	aa e3       	ldi	r26, 0x3A	; 58
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ea e3       	ldi	r30, 0x3A	; 58
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_U8SetPinDir+0x80>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_U8SetPinDir+0x7c>
    2244:	84 2b       	or	r24, r20
    2246:	8c 93       	st	X, r24
    2248:	b6 c0       	rjmp	.+364    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 1:
			{
				SET_BIT(DDRB_REG,Copy_u8PinNo);
    224a:	a7 e3       	ldi	r26, 0x37	; 55
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e7 e3       	ldi	r30, 0x37	; 55
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	48 2f       	mov	r20, r24
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	02 2e       	mov	r0, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <DIO_U8SetPinDir+0xa8>
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <DIO_U8SetPinDir+0xa4>
    226c:	84 2b       	or	r24, r20
    226e:	8c 93       	st	X, r24
    2270:	a2 c0       	rjmp	.+324    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 2:
			{
				SET_BIT(DDRC_REG,Copy_u8PinNo);
    2272:	a4 e3       	ldi	r26, 0x34	; 52
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e4 e3       	ldi	r30, 0x34	; 52
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	48 2f       	mov	r20, r24
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	02 2e       	mov	r0, r18
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <DIO_U8SetPinDir+0xd0>
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	0a 94       	dec	r0
    2292:	e2 f7       	brpl	.-8      	; 0x228c <DIO_U8SetPinDir+0xcc>
    2294:	84 2b       	or	r24, r20
    2296:	8c 93       	st	X, r24
    2298:	8e c0       	rjmp	.+284    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 3:
			{
				SET_BIT(DDRD_REG,Copy_u8PinNo);
    229a:	a1 e3       	ldi	r26, 0x31	; 49
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e1 e3       	ldi	r30, 0x31	; 49
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	48 2f       	mov	r20, r24
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	02 2e       	mov	r0, r18
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <DIO_U8SetPinDir+0xf8>
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	0a 94       	dec	r0
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <DIO_U8SetPinDir+0xf4>
    22bc:	84 2b       	or	r24, r20
    22be:	8c 93       	st	X, r24
    22c0:	7a c0       	rjmp	.+244    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
				break;
			}

			}
		}
		else if(Copy_u8Dir==LOW)
    22c2:	8c 81       	ldd	r24, Y+4	; 0x04
    22c4:	88 23       	and	r24, r24
    22c6:	09 f0       	breq	.+2      	; 0x22ca <DIO_U8SetPinDir+0x10a>
    22c8:	74 c0       	rjmp	.+232    	; 0x23b2 <DIO_U8SetPinDir+0x1f2>
		{
			switch(Copy_u8PortNo)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	3e 83       	std	Y+6, r19	; 0x06
    22d2:	2d 83       	std	Y+5, r18	; 0x05
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	91 05       	cpc	r25, r1
    22dc:	59 f1       	breq	.+86     	; 0x2334 <DIO_U8SetPinDir+0x174>
    22de:	2d 81       	ldd	r18, Y+5	; 0x05
    22e0:	3e 81       	ldd	r19, Y+6	; 0x06
    22e2:	22 30       	cpi	r18, 0x02	; 2
    22e4:	31 05       	cpc	r19, r1
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <DIO_U8SetPinDir+0x132>
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f0       	breq	.+26     	; 0x230a <DIO_U8SetPinDir+0x14a>
    22f0:	62 c0       	rjmp	.+196    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
    22f2:	2d 81       	ldd	r18, Y+5	; 0x05
    22f4:	3e 81       	ldd	r19, Y+6	; 0x06
    22f6:	22 30       	cpi	r18, 0x02	; 2
    22f8:	31 05       	cpc	r19, r1
    22fa:	89 f1       	breq	.+98     	; 0x235e <DIO_U8SetPinDir+0x19e>
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	83 30       	cpi	r24, 0x03	; 3
    2302:	91 05       	cpc	r25, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <DIO_U8SetPinDir+0x148>
    2306:	40 c0       	rjmp	.+128    	; 0x2388 <DIO_U8SetPinDir+0x1c8>
    2308:	56 c0       	rjmp	.+172    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
			{
				case 0:
				{
					CLR_BIT(DDRA_REG,Copy_u8PinNo);
    230a:	aa e3       	ldi	r26, 0x3A	; 58
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	ea e3       	ldi	r30, 0x3A	; 58
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	48 2f       	mov	r20, r24
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	02 2e       	mov	r0, r18
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <DIO_U8SetPinDir+0x168>
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	0a 94       	dec	r0
    232a:	e2 f7       	brpl	.-8      	; 0x2324 <DIO_U8SetPinDir+0x164>
    232c:	80 95       	com	r24
    232e:	84 23       	and	r24, r20
    2330:	8c 93       	st	X, r24
    2332:	41 c0       	rjmp	.+130    	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 1:
				{
					CLR_BIT(DDRB_REG,Copy_u8PinNo);
    2334:	a7 e3       	ldi	r26, 0x37	; 55
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e7 e3       	ldi	r30, 0x37	; 55
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	48 2f       	mov	r20, r24
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 2e       	mov	r0, r18
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <DIO_U8SetPinDir+0x192>
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	0a 94       	dec	r0
    2354:	e2 f7       	brpl	.-8      	; 0x234e <DIO_U8SetPinDir+0x18e>
    2356:	80 95       	com	r24
    2358:	84 23       	and	r24, r20
    235a:	8c 93       	st	X, r24
    235c:	2c c0       	rjmp	.+88     	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 2:
				{
					CLR_BIT(DDRC_REG,Copy_u8PinNo);
    235e:	a4 e3       	ldi	r26, 0x34	; 52
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e4 e3       	ldi	r30, 0x34	; 52
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	48 2f       	mov	r20, r24
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <DIO_U8SetPinDir+0x1bc>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <DIO_U8SetPinDir+0x1b8>
    2380:	80 95       	com	r24
    2382:	84 23       	and	r24, r20
    2384:	8c 93       	st	X, r24
    2386:	17 c0       	rjmp	.+46     	; 0x23b6 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 3:
				{
					CLR_BIT(DDRD_REG,Copy_u8PinNo);
    2388:	a1 e3       	ldi	r26, 0x31	; 49
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e1 e3       	ldi	r30, 0x31	; 49
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <DIO_U8SetPinDir+0x1e6>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <DIO_U8SetPinDir+0x1e2>
    23aa:	80 95       	com	r24
    23ac:	84 23       	and	r24, r20
    23ae:	8c 93       	st	X, r24
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_U8SetPinDir+0x1f6>

			}
		}
		else
		{
			Local_Status=RT_NOK;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    23b8:	28 96       	adiw	r28, 0x08	; 8
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <DIO_U8SetPinVal>:

u8 DIO_U8SetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo,u8 Copy_Val)

{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	28 97       	sbiw	r28, 0x08	; 8
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	8a 83       	std	Y+2, r24	; 0x02
    23e0:	6b 83       	std	Y+3, r22	; 0x03
    23e2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    23e4:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_Val == HIGH)
    23e6:	8c 81       	ldd	r24, Y+4	; 0x04
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	09 f0       	breq	.+2      	; 0x23ee <DIO_U8SetPinVal+0x24>
    23ec:	6f c0       	rjmp	.+222    	; 0x24cc <DIO_U8SetPinVal+0x102>
		{
			switch(Copy_u8PortNo)
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	38 87       	std	Y+8, r19	; 0x08
    23f6:	2f 83       	std	Y+7, r18	; 0x07
    23f8:	8f 81       	ldd	r24, Y+7	; 0x07
    23fa:	98 85       	ldd	r25, Y+8	; 0x08
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	91 05       	cpc	r25, r1
    2400:	49 f1       	breq	.+82     	; 0x2454 <DIO_U8SetPinVal+0x8a>
    2402:	2f 81       	ldd	r18, Y+7	; 0x07
    2404:	38 85       	ldd	r19, Y+8	; 0x08
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	31 05       	cpc	r19, r1
    240a:	2c f4       	brge	.+10     	; 0x2416 <DIO_U8SetPinVal+0x4c>
    240c:	8f 81       	ldd	r24, Y+7	; 0x07
    240e:	98 85       	ldd	r25, Y+8	; 0x08
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	61 f0       	breq	.+24     	; 0x242c <DIO_U8SetPinVal+0x62>
    2414:	d5 c0       	rjmp	.+426    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
    2416:	2f 81       	ldd	r18, Y+7	; 0x07
    2418:	38 85       	ldd	r19, Y+8	; 0x08
    241a:	22 30       	cpi	r18, 0x02	; 2
    241c:	31 05       	cpc	r19, r1
    241e:	71 f1       	breq	.+92     	; 0x247c <DIO_U8SetPinVal+0xb2>
    2420:	8f 81       	ldd	r24, Y+7	; 0x07
    2422:	98 85       	ldd	r25, Y+8	; 0x08
    2424:	83 30       	cpi	r24, 0x03	; 3
    2426:	91 05       	cpc	r25, r1
    2428:	e9 f1       	breq	.+122    	; 0x24a4 <DIO_U8SetPinVal+0xda>
    242a:	ca c0       	rjmp	.+404    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
			{
			case 0:
			{
				SET_BIT(PORTA_REG,Copy_u8PinNo);
    242c:	ab e3       	ldi	r26, 0x3B	; 59
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	eb e3       	ldi	r30, 0x3B	; 59
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	48 2f       	mov	r20, r24
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 2e       	mov	r0, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <DIO_U8SetPinVal+0x80>
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	0a 94       	dec	r0
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <DIO_U8SetPinVal+0x7c>
    244e:	84 2b       	or	r24, r20
    2450:	8c 93       	st	X, r24
    2452:	b6 c0       	rjmp	.+364    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 1:
			{
				SET_BIT(PORTB_REG,Copy_u8PinNo);
    2454:	a8 e3       	ldi	r26, 0x38	; 56
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e8 e3       	ldi	r30, 0x38	; 56
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	48 2f       	mov	r20, r24
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <DIO_U8SetPinVal+0xa8>
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <DIO_U8SetPinVal+0xa4>
    2476:	84 2b       	or	r24, r20
    2478:	8c 93       	st	X, r24
    247a:	a2 c0       	rjmp	.+324    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 2:
			{
				SET_BIT(PORTC_REG,Copy_u8PinNo);
    247c:	a5 e3       	ldi	r26, 0x35	; 53
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e5 e3       	ldi	r30, 0x35	; 53
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	48 2f       	mov	r20, r24
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 2e       	mov	r0, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <DIO_U8SetPinVal+0xd0>
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	0a 94       	dec	r0
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <DIO_U8SetPinVal+0xcc>
    249e:	84 2b       	or	r24, r20
    24a0:	8c 93       	st	X, r24
    24a2:	8e c0       	rjmp	.+284    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 3:
			{
				SET_BIT(PORTD_REG,Copy_u8PinNo);
    24a4:	a2 e3       	ldi	r26, 0x32	; 50
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e2 e3       	ldi	r30, 0x32	; 50
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	48 2f       	mov	r20, r24
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	02 2e       	mov	r0, r18
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <DIO_U8SetPinVal+0xf8>
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	0a 94       	dec	r0
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <DIO_U8SetPinVal+0xf4>
    24c6:	84 2b       	or	r24, r20
    24c8:	8c 93       	st	X, r24
    24ca:	7a c0       	rjmp	.+244    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
				break;
			}

			}
		}
		else if(Copy_Val==LOW)
    24cc:	8c 81       	ldd	r24, Y+4	; 0x04
    24ce:	88 23       	and	r24, r24
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <DIO_U8SetPinVal+0x10a>
    24d2:	74 c0       	rjmp	.+232    	; 0x25bc <DIO_U8SetPinVal+0x1f2>
		{
			switch(Copy_u8PortNo)
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	3e 83       	std	Y+6, r19	; 0x06
    24dc:	2d 83       	std	Y+5, r18	; 0x05
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	91 05       	cpc	r25, r1
    24e6:	59 f1       	breq	.+86     	; 0x253e <DIO_U8SetPinVal+0x174>
    24e8:	2d 81       	ldd	r18, Y+5	; 0x05
    24ea:	3e 81       	ldd	r19, Y+6	; 0x06
    24ec:	22 30       	cpi	r18, 0x02	; 2
    24ee:	31 05       	cpc	r19, r1
    24f0:	2c f4       	brge	.+10     	; 0x24fc <DIO_U8SetPinVal+0x132>
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	69 f0       	breq	.+26     	; 0x2514 <DIO_U8SetPinVal+0x14a>
    24fa:	62 c0       	rjmp	.+196    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
    24fc:	2d 81       	ldd	r18, Y+5	; 0x05
    24fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2500:	22 30       	cpi	r18, 0x02	; 2
    2502:	31 05       	cpc	r19, r1
    2504:	89 f1       	breq	.+98     	; 0x2568 <DIO_U8SetPinVal+0x19e>
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	83 30       	cpi	r24, 0x03	; 3
    250c:	91 05       	cpc	r25, r1
    250e:	09 f4       	brne	.+2      	; 0x2512 <DIO_U8SetPinVal+0x148>
    2510:	40 c0       	rjmp	.+128    	; 0x2592 <DIO_U8SetPinVal+0x1c8>
    2512:	56 c0       	rjmp	.+172    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
			{
				case 0:
				{
					CLR_BIT(PORTA_REG,Copy_u8PinNo);
    2514:	ab e3       	ldi	r26, 0x3B	; 59
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	eb e3       	ldi	r30, 0x3B	; 59
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	48 2f       	mov	r20, r24
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	02 2e       	mov	r0, r18
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <DIO_U8SetPinVal+0x168>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <DIO_U8SetPinVal+0x164>
    2536:	80 95       	com	r24
    2538:	84 23       	and	r24, r20
    253a:	8c 93       	st	X, r24
    253c:	41 c0       	rjmp	.+130    	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 1:
				{
					CLR_BIT(PORTB_REG,Copy_u8PinNo);
    253e:	a8 e3       	ldi	r26, 0x38	; 56
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e8 e3       	ldi	r30, 0x38	; 56
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	48 2f       	mov	r20, r24
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	02 2e       	mov	r0, r18
    2556:	02 c0       	rjmp	.+4      	; 0x255c <DIO_U8SetPinVal+0x192>
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	0a 94       	dec	r0
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <DIO_U8SetPinVal+0x18e>
    2560:	80 95       	com	r24
    2562:	84 23       	and	r24, r20
    2564:	8c 93       	st	X, r24
    2566:	2c c0       	rjmp	.+88     	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 2:
				{
					CLR_BIT(PORTC_REG,Copy_u8PinNo);
    2568:	a5 e3       	ldi	r26, 0x35	; 53
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e5 e3       	ldi	r30, 0x35	; 53
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	48 2f       	mov	r20, r24
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	02 2e       	mov	r0, r18
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <DIO_U8SetPinVal+0x1bc>
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	0a 94       	dec	r0
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <DIO_U8SetPinVal+0x1b8>
    258a:	80 95       	com	r24
    258c:	84 23       	and	r24, r20
    258e:	8c 93       	st	X, r24
    2590:	17 c0       	rjmp	.+46     	; 0x25c0 <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 3:
				{
					CLR_BIT(PORTD_REG,Copy_u8PinNo);
    2592:	a2 e3       	ldi	r26, 0x32	; 50
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e2 e3       	ldi	r30, 0x32	; 50
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	48 2f       	mov	r20, r24
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	02 2e       	mov	r0, r18
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <DIO_U8SetPinVal+0x1e6>
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	0a 94       	dec	r0
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <DIO_U8SetPinVal+0x1e2>
    25b4:	80 95       	com	r24
    25b6:	84 23       	and	r24, r20
    25b8:	8c 93       	st	X, r24
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <DIO_U8SetPinVal+0x1f6>

			}
		}
		else
		{
			Local_Status=RT_NOK;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25c2:	28 96       	adiw	r28, 0x08	; 8
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <DIO_U8GetPinVal>:

u8 DIO_U8GetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo, u8* u8_Val)
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	27 97       	sbiw	r28, 0x07	; 7
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    25ea:	6b 83       	std	Y+3, r22	; 0x03
    25ec:	5d 83       	std	Y+5, r21	; 0x05
    25ee:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    25f0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
	{
		if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
		{

				switch(Copy_u8PortNo)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	3f 83       	std	Y+7, r19	; 0x07
    25fa:	2e 83       	std	Y+6, r18	; 0x06
    25fc:	4e 81       	ldd	r20, Y+6	; 0x06
    25fe:	5f 81       	ldd	r21, Y+7	; 0x07
    2600:	41 30       	cpi	r20, 0x01	; 1
    2602:	51 05       	cpc	r21, r1
    2604:	59 f1       	breq	.+86     	; 0x265c <DIO_U8GetPinVal+0x88>
    2606:	8e 81       	ldd	r24, Y+6	; 0x06
    2608:	9f 81       	ldd	r25, Y+7	; 0x07
    260a:	82 30       	cpi	r24, 0x02	; 2
    260c:	91 05       	cpc	r25, r1
    260e:	34 f4       	brge	.+12     	; 0x261c <DIO_U8GetPinVal+0x48>
    2610:	2e 81       	ldd	r18, Y+6	; 0x06
    2612:	3f 81       	ldd	r19, Y+7	; 0x07
    2614:	21 15       	cp	r18, r1
    2616:	31 05       	cpc	r19, r1
    2618:	69 f0       	breq	.+26     	; 0x2634 <DIO_U8GetPinVal+0x60>
    261a:	5b c0       	rjmp	.+182    	; 0x26d2 <DIO_U8GetPinVal+0xfe>
    261c:	4e 81       	ldd	r20, Y+6	; 0x06
    261e:	5f 81       	ldd	r21, Y+7	; 0x07
    2620:	42 30       	cpi	r20, 0x02	; 2
    2622:	51 05       	cpc	r21, r1
    2624:	79 f1       	breq	.+94     	; 0x2684 <DIO_U8GetPinVal+0xb0>
    2626:	8e 81       	ldd	r24, Y+6	; 0x06
    2628:	9f 81       	ldd	r25, Y+7	; 0x07
    262a:	83 30       	cpi	r24, 0x03	; 3
    262c:	91 05       	cpc	r25, r1
    262e:	09 f4       	brne	.+2      	; 0x2632 <DIO_U8GetPinVal+0x5e>
    2630:	3d c0       	rjmp	.+122    	; 0x26ac <DIO_U8GetPinVal+0xd8>
    2632:	4f c0       	rjmp	.+158    	; 0x26d2 <DIO_U8GetPinVal+0xfe>
				{
				case 0:
				{
					*u8_Val=GET_BIT(PINA_REG,Copy_u8PinNo);
    2634:	e9 e3       	ldi	r30, 0x39	; 57
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a9 01       	movw	r20, r18
    2646:	02 c0       	rjmp	.+4      	; 0x264c <DIO_U8GetPinVal+0x78>
    2648:	55 95       	asr	r21
    264a:	47 95       	ror	r20
    264c:	8a 95       	dec	r24
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <DIO_U8GetPinVal+0x74>
    2650:	ca 01       	movw	r24, r20
    2652:	81 70       	andi	r24, 0x01	; 1
    2654:	ec 81       	ldd	r30, Y+4	; 0x04
    2656:	fd 81       	ldd	r31, Y+5	; 0x05
    2658:	80 83       	st	Z, r24
    265a:	3b c0       	rjmp	.+118    	; 0x26d2 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 1:
				{
					*u8_Val=GET_BIT(PINB_REG,Copy_u8PinNo);
    265c:	e6 e3       	ldi	r30, 0x36	; 54
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a9 01       	movw	r20, r18
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <DIO_U8GetPinVal+0xa0>
    2670:	55 95       	asr	r21
    2672:	47 95       	ror	r20
    2674:	8a 95       	dec	r24
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <DIO_U8GetPinVal+0x9c>
    2678:	ca 01       	movw	r24, r20
    267a:	81 70       	andi	r24, 0x01	; 1
    267c:	ec 81       	ldd	r30, Y+4	; 0x04
    267e:	fd 81       	ldd	r31, Y+5	; 0x05
    2680:	80 83       	st	Z, r24
    2682:	27 c0       	rjmp	.+78     	; 0x26d2 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 2:
				{
					*u8_Val=GET_BIT(PINC_REG,Copy_u8PinNo);
    2684:	e3 e3       	ldi	r30, 0x33	; 51
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a9 01       	movw	r20, r18
    2696:	02 c0       	rjmp	.+4      	; 0x269c <DIO_U8GetPinVal+0xc8>
    2698:	55 95       	asr	r21
    269a:	47 95       	ror	r20
    269c:	8a 95       	dec	r24
    269e:	e2 f7       	brpl	.-8      	; 0x2698 <DIO_U8GetPinVal+0xc4>
    26a0:	ca 01       	movw	r24, r20
    26a2:	81 70       	andi	r24, 0x01	; 1
    26a4:	ec 81       	ldd	r30, Y+4	; 0x04
    26a6:	fd 81       	ldd	r31, Y+5	; 0x05
    26a8:	80 83       	st	Z, r24
    26aa:	13 c0       	rjmp	.+38     	; 0x26d2 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 3:
				{
					*u8_Val=GET_BIT(PIND_REG,Copy_u8PinNo);
    26ac:	e0 e3       	ldi	r30, 0x30	; 48
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a9 01       	movw	r20, r18
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <DIO_U8GetPinVal+0xf0>
    26c0:	55 95       	asr	r21
    26c2:	47 95       	ror	r20
    26c4:	8a 95       	dec	r24
    26c6:	e2 f7       	brpl	.-8      	; 0x26c0 <DIO_U8GetPinVal+0xec>
    26c8:	ca 01       	movw	r24, r20
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	ec 81       	ldd	r30, Y+4	; 0x04
    26ce:	fd 81       	ldd	r31, Y+5	; 0x05
    26d0:	80 83       	st	Z, r24
	{
		Local_Status=RT_NOK;
	}


		return Local_Status;
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d4:	27 96       	adiw	r28, 0x07	; 7
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <ADC_VoidInit_PreBuild>:

#define IDIL (u8)1
#define BUZY (u8)0
u8 Global_u8State=IDIL;
void ADC_VoidInit_PreBuild(void)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG=ADMUX_INITAIL_VALUE;
    26ee:	e7 e2       	ldi	r30, 0x27	; 39
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 e4       	ldi	r24, 0x40	; 64
    26f4:	80 83       	st	Z, r24
	ADCSRA_REG=ADCSRA_REG_INITAIL_VALUE;
    26f6:	e6 e2       	ldi	r30, 0x26	; 38
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	86 e8       	ldi	r24, 0x86	; 134
    26fc:	80 83       	st	Z, r24
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <ADC_u8AdjustmentSelect_Postbuild>:

u8 ADC_u8AdjustmentSelect_Postbuild(u8 Copy_u8Justfication)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <ADC_u8AdjustmentSelect_Postbuild+0x6>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status=RT_OK;
    2710:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Justfication==LEFT_JUSTFICATION)
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	41 f4       	brne	.+16     	; 0x2728 <ADC_u8AdjustmentSelect_Postbuild+0x24>
	{
	 SET_BIT(ADMUX_REG,ADLAR);
    2718:	a7 e2       	ldi	r26, 0x27	; 39
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e7 e2       	ldi	r30, 0x27	; 39
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	80 62       	ori	r24, 0x20	; 32
    2724:	8c 93       	st	X, r24
    2726:	0d c0       	rjmp	.+26     	; 0x2742 <ADC_u8AdjustmentSelect_Postbuild+0x3e>
	}
else if (Copy_u8Justfication==RIGHT_JUSTFICATION)
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	88 23       	and	r24, r24
    272c:	41 f4       	brne	.+16     	; 0x273e <ADC_u8AdjustmentSelect_Postbuild+0x3a>
	{
	 CLR_BIT(ADMUX_REG,ADLAR);
    272e:	a7 e2       	ldi	r26, 0x27	; 39
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e7 e2       	ldi	r30, 0x27	; 39
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	8f 7d       	andi	r24, 0xDF	; 223
    273a:	8c 93       	st	X, r24
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <ADC_u8AdjustmentSelect_Postbuild+0x3e>
	}
else
	{
	 Local_u8Status=RT_NOK;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_u8Status;
    2742:	89 81       	ldd	r24, Y+1	; 0x01

}
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <ADC_VoidVrefSelect_Postbuild>:

void ADC_VoidVrefSelect_Postbuild(u8 Copy_u8Vref)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	00 d0       	rcall	.+0      	; 0x2754 <ADC_VoidVrefSelect_Postbuild+0x6>
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp=ADMUX_REG;
    275a:	e7 e2       	ldi	r30, 0x27	; 39
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp&=SELECT_VREF_MASK;
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	8f 73       	andi	r24, 0x3F	; 63
    2766:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp|=Copy_u8Vref;
    2768:	99 81       	ldd	r25, Y+1	; 0x01
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	89 2b       	or	r24, r25
    276e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG=Local_u8Temp;
    2770:	e7 e2       	ldi	r30, 0x27	; 39
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	80 83       	st	Z, r24
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <ADC_VoidPrescalerSelect_Postbuild>:
void ADC_VoidPrescalerSelect_Postbuild(enum ADC_PRESACLEERS Copy_u8Prescaler)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <ADC_VoidPrescalerSelect_Postbuild+0x6>
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp=ADCSRA_REG;
    278e:	e6 e2       	ldi	r30, 0x26	; 38
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp&=SELECT_PRESCALER_MASK;
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 7f       	andi	r24, 0xF8	; 248
    279a:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp|=Copy_u8Prescaler;
    279c:	99 81       	ldd	r25, Y+1	; 0x01
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	89 2b       	or	r24, r25
    27a2:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA_REG=Local_u8Temp;
    27a4:	e6 e2       	ldi	r30, 0x26	; 38
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	80 83       	st	Z, r24
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <ADC_u8ONO_OFFStateSelect_Postbuild>:

u8 ADC_u8ONO_OFFStateSelect_Postbuild(u8 Copy_u8ADC_State)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <ADC_u8ONO_OFFStateSelect_Postbuild+0x6>
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status=RT_OK;
    27c2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8ADC_State==ENABLE)
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	41 f4       	brne	.+16     	; 0x27da <ADC_u8ONO_OFFStateSelect_Postbuild+0x24>
		{
		 SET_BIT(ADCSRA_REG,ADEN);
    27ca:	a6 e2       	ldi	r26, 0x26	; 38
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e6 e2       	ldi	r30, 0x26	; 38
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 68       	ori	r24, 0x80	; 128
    27d6:	8c 93       	st	X, r24
    27d8:	0d c0       	rjmp	.+26     	; 0x27f4 <ADC_u8ONO_OFFStateSelect_Postbuild+0x3e>
		}
	else if (Copy_u8ADC_State==DISABLE)
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	88 23       	and	r24, r24
    27de:	41 f4       	brne	.+16     	; 0x27f0 <ADC_u8ONO_OFFStateSelect_Postbuild+0x3a>
		{
		 CLR_BIT(ADCSRA_REG,ADEN);
    27e0:	a6 e2       	ldi	r26, 0x26	; 38
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e6 e2       	ldi	r30, 0x26	; 38
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8f 77       	andi	r24, 0x7F	; 127
    27ec:	8c 93       	st	X, r24
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <ADC_u8ONO_OFFStateSelect_Postbuild+0x3e>
		}
	else
		{
		 Local_u8Status=RT_NOK;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8Status;
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <ADC_u8AutoTriggerEnable_Postbuild>:
u8 ADC_u8AutoTriggerEnable_Postbuild(u8 Copy_u8ADC_AutoTriggerEnable,u8 Copy_u8TriggerSource)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <ADC_u8AutoTriggerEnable_Postbuild+0x6>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <ADC_u8AutoTriggerEnable_Postbuild+0x8>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	8b 83       	std	Y+3, r24	; 0x03
    280e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Status=RT_OK;
    2810:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8ADC_AutoTriggerEnable==ENABLE)
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	b9 f4       	brne	.+46     	; 0x2846 <ADC_u8AutoTriggerEnable_Postbuild+0x46>
		{
		 SET_BIT(ADCSRA_REG,ADATE);
    2818:	a6 e2       	ldi	r26, 0x26	; 38
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e6 e2       	ldi	r30, 0x26	; 38
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	80 62       	ori	r24, 0x20	; 32
    2824:	8c 93       	st	X, r24
		 u8 Local_u8Temp=ADCSRA_REG;
    2826:	e6 e2       	ldi	r30, 0x26	; 38
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	89 83       	std	Y+1, r24	; 0x01
		 	Local_u8Temp&=SELECT_AUTO_TRIGER_SOURSE_MASK;
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	8f 71       	andi	r24, 0x1F	; 31
    2832:	89 83       	std	Y+1, r24	; 0x01
		 	Local_u8Temp|=Copy_u8TriggerSource;
    2834:	99 81       	ldd	r25, Y+1	; 0x01
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	89 2b       	or	r24, r25
    283a:	89 83       	std	Y+1, r24	; 0x01
		 	ADCSRA_REG=Local_u8Temp;
    283c:	e6 e2       	ldi	r30, 0x26	; 38
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	80 83       	st	Z, r24
    2844:	0d c0       	rjmp	.+26     	; 0x2860 <ADC_u8AutoTriggerEnable_Postbuild+0x60>

		}
	else if (Copy_u8ADC_AutoTriggerEnable==DISABLE)
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	88 23       	and	r24, r24
    284a:	41 f4       	brne	.+16     	; 0x285c <ADC_u8AutoTriggerEnable_Postbuild+0x5c>
		{
		 CLR_BIT(ADCSRA_REG,ADATE);
    284c:	a6 e2       	ldi	r26, 0x26	; 38
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e6 e2       	ldi	r30, 0x26	; 38
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	8f 7d       	andi	r24, 0xDF	; 223
    2858:	8c 93       	st	X, r24
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <ADC_u8AutoTriggerEnable_Postbuild+0x60>
		}
	else
		{
		 Local_u8Status=RT_NOK;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	8a 83       	std	Y+2, r24	; 0x02
		}

	return Local_u8Status;
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <ADC_u8GetDigitalValChannel>:




u8 ADC_u8GetDigitalValChannel(u8 Copy_u8Channel,u16 *Reading_Channel)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	27 97       	sbiw	r28, 0x07	; 7
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	7f 83       	std	Y+7, r23	; 0x07
    2888:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_u8Status=RT_OK;
    288a:	1c 82       	std	Y+4, r1	; 0x04
	if(Global_u8State==IDIL)
    288c:	80 91 80 01 	lds	r24, 0x0180
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	09 f0       	breq	.+2      	; 0x2896 <ADC_u8GetDigitalValChannel+0x26>
    2894:	74 c0       	rjmp	.+232    	; 0x297e <ADC_u8GetDigitalValChannel+0x10e>
	{
		Global_u8State=BUZY;
    2896:	10 92 80 01 	sts	0x0180, r1
		u32 Local_u32Counter=0;
    289a:	1b 82       	std	Y+3, r1	; 0x03
    289c:	1a 82       	std	Y+2, r1	; 0x02
		u8 Local_u8Temp=ADMUX_REG;
    289e:	e7 e2       	ldi	r30, 0x27	; 39
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Temp&=SELECT_ENDED_CHANNEL_MASK;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	80 7e       	andi	r24, 0xE0	; 224
    28aa:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Temp|=Copy_u8Channel;
    28ac:	99 81       	ldd	r25, Y+1	; 0x01
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	89 2b       	or	r24, r25
    28b2:	89 83       	std	Y+1, r24	; 0x01
		ADMUX_REG=Local_u8Temp;
    28b4:	e7 e2       	ldi	r30, 0x27	; 39
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	80 83       	st	Z, r24
		SET_BIT(ADCSRA_REG,ADSC);
    28bc:	a6 e2       	ldi	r26, 0x26	; 38
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e6 e2       	ldi	r30, 0x26	; 38
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	80 64       	ori	r24, 0x40	; 64
    28c8:	8c 93       	st	X, r24

			if(GET_BIT(ADCSRA_REG,ADIE)==DISABLE)
    28ca:	e6 e2       	ldi	r30, 0x26	; 38
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	86 95       	lsr	r24
    28d2:	86 95       	lsr	r24
    28d4:	86 95       	lsr	r24
    28d6:	88 2f       	mov	r24, r24
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	81 70       	andi	r24, 0x01	; 1
    28dc:	90 70       	andi	r25, 0x00	; 0
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <ADC_u8GetDigitalValChannel+0x74>
    28e2:	4f c0       	rjmp	.+158    	; 0x2982 <ADC_u8GetDigitalValChannel+0x112>
			{
				while((GET_BIT(ADCSRA_REG,ADIF)!=1)&&(Local_u32Counter<TIME_OUT_WAITING))
    28e4:	e6 e2       	ldi	r30, 0x26	; 38
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	82 95       	swap	r24
    28ec:	8f 70       	andi	r24, 0x0F	; 15
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	81 70       	andi	r24, 0x01	; 1
    28f4:	90 70       	andi	r25, 0x00	; 0
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	31 f4       	brne	.+12     	; 0x2906 <ADC_u8GetDigitalValChannel+0x96>
				{
					Local_u32Counter++;
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	9b 81       	ldd	r25, Y+3	; 0x03
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	9b 83       	std	Y+3, r25	; 0x03
    2902:	8a 83       	std	Y+2, r24	; 0x02
    2904:	ef cf       	rjmp	.-34     	; 0x28e4 <ADC_u8GetDigitalValChannel+0x74>
					/*return error status because the time defined in configuration is out*/
					Local_u8Status=RT_NOK;
				}
				else
				{
					SET_BIT(ADCSRA_REG,ADIF);
    2906:	a6 e2       	ldi	r26, 0x26	; 38
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e6 e2       	ldi	r30, 0x26	; 38
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	80 61       	ori	r24, 0x10	; 16
    2912:	8c 93       	st	X, r24

					if(Reading_Channel!=NULL)
    2914:	8e 81       	ldd	r24, Y+6	; 0x06
    2916:	9f 81       	ldd	r25, Y+7	; 0x07
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	71 f1       	breq	.+92     	; 0x2978 <ADC_u8GetDigitalValChannel+0x108>
					{
						if(GET_BIT(ADMUX_REG,ADLAR)==LEFT_JUSTFICATION)
    291c:	e7 e2       	ldi	r30, 0x27	; 39
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	82 95       	swap	r24
    2924:	86 95       	lsr	r24
    2926:	87 70       	andi	r24, 0x07	; 7
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	81 70       	andi	r24, 0x01	; 1
    292e:	90 70       	andi	r25, 0x00	; 0
    2930:	88 23       	and	r24, r24
    2932:	51 f0       	breq	.+20     	; 0x2948 <ADC_u8GetDigitalValChannel+0xd8>
						{
							*Reading_Channel= ADCH_REG;
    2934:	e5 e2       	ldi	r30, 0x25	; 37
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	ee 81       	ldd	r30, Y+6	; 0x06
    2940:	ff 81       	ldd	r31, Y+7	; 0x07
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	80 83       	st	Z, r24
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <ADC_u8GetDigitalValChannel+0x100>
						}
						else if (GET_BIT(ADMUX_REG,ADLAR)==RIGHT_JUSTFICATION)
    2948:	e7 e2       	ldi	r30, 0x27	; 39
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	82 95       	swap	r24
    2950:	86 95       	lsr	r24
    2952:	87 70       	andi	r24, 0x07	; 7
    2954:	88 2f       	mov	r24, r24
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	81 70       	andi	r24, 0x01	; 1
    295a:	90 70       	andi	r25, 0x00	; 0
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	41 f4       	brne	.+16     	; 0x2970 <ADC_u8GetDigitalValChannel+0x100>
						{
							*Reading_Channel=ADC_10_BIT_RESULT ;
    2960:	e4 e2       	ldi	r30, 0x24	; 36
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	ee 81       	ldd	r30, Y+6	; 0x06
    296a:	ff 81       	ldd	r31, Y+7	; 0x07
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
						}
						Global_u8State=IDIL;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	80 93 80 01 	sts	0x0180, r24
    2976:	05 c0       	rjmp	.+10     	; 0x2982 <ADC_u8GetDigitalValChannel+0x112>
					}
					else
					{
						Local_u8Status=NULL_POINTER;
    2978:	82 e0       	ldi	r24, 0x02	; 2
    297a:	8c 83       	std	Y+4, r24	; 0x04
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <ADC_u8GetDigitalValChannel+0x112>

			}
	}
	else
	{
		Local_u8Status=BUSY_FUNC;
    297e:	83 e0       	ldi	r24, 0x03	; 3
    2980:	8c 83       	std	Y+4, r24	; 0x04
	}

return Local_u8Status;
    2982:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2984:	27 96       	adiw	r28, 0x07	; 7
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <ADC_u8GetDigitalValChannelAsynchronus>:

u8 ADC_u8GetDigitalValChannelAsynchronus(u8 Copy_u8Channel,u16 *Reading_Channel,void(*ADC_Notifications)(void))
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	28 97       	sbiw	r28, 0x08	; 8
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	8b 83       	std	Y+3, r24	; 0x03
    29ac:	7d 83       	std	Y+5, r23	; 0x05
    29ae:	6c 83       	std	Y+4, r22	; 0x04
    29b0:	5f 83       	std	Y+7, r21	; 0x07
    29b2:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8Status=RT_OK;
    29b4:	1a 82       	std	Y+2, r1	; 0x02
	if(Global_u8State==IDIL)
    29b6:	80 91 80 01 	lds	r24, 0x0180
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	c9 f5       	brne	.+114    	; 0x2a30 <ADC_u8GetDigitalValChannelAsynchronus+0x9a>
	{

		u8 Local_u8Temp=ADMUX_REG;
    29be:	e7 e2       	ldi	r30, 0x27	; 39
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	89 83       	std	Y+1, r24	; 0x01
			if(Reading_Channel!=NULL||ADC_Notifications!=NULL)
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	21 f4       	brne	.+8      	; 0x29d6 <ADC_u8GetDigitalValChannelAsynchronus+0x40>
    29ce:	8e 81       	ldd	r24, Y+6	; 0x06
    29d0:	9f 81       	ldd	r25, Y+7	; 0x07
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	41 f1       	breq	.+80     	; 0x2a26 <ADC_u8GetDigitalValChannelAsynchronus+0x90>
			{
				Global_u8State=BUZY;
    29d6:	10 92 80 01 	sts	0x0180, r1
				Local_u8Temp&=SELECT_ENDED_CHANNEL_MASK;
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	80 7e       	andi	r24, 0xE0	; 224
    29de:	89 83       	std	Y+1, r24	; 0x01
				Local_u8Temp|=Copy_u8Channel;
    29e0:	99 81       	ldd	r25, Y+1	; 0x01
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	89 2b       	or	r24, r25
    29e6:	89 83       	std	Y+1, r24	; 0x01
				ADMUX_REG=Local_u8Temp;
    29e8:	e7 e2       	ldi	r30, 0x27	; 39
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	80 83       	st	Z, r24
				ADC_VidCallBack_ISR_Funtion=ADC_Notifications;
    29f0:	8e 81       	ldd	r24, Y+6	; 0x06
    29f2:	9f 81       	ldd	r25, Y+7	; 0x07
    29f4:	90 93 b9 01 	sts	0x01B9, r25
    29f8:	80 93 b8 01 	sts	0x01B8, r24
				Global_pu16ADC_Reading=	Reading_Channel;
    29fc:	8c 81       	ldd	r24, Y+4	; 0x04
    29fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2a00:	90 93 bb 01 	sts	0x01BB, r25
    2a04:	80 93 ba 01 	sts	0x01BA, r24

				SET_BIT(ADCSRA_REG,ADSC);
    2a08:	a6 e2       	ldi	r26, 0x26	; 38
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e6 e2       	ldi	r30, 0x26	; 38
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	80 64       	ori	r24, 0x40	; 64
    2a14:	8c 93       	st	X, r24
				SET_BIT(ADCSRA_REG,ADIE);
    2a16:	a6 e2       	ldi	r26, 0x26	; 38
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e6 e2       	ldi	r30, 0x26	; 38
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	88 60       	ori	r24, 0x08	; 8
    2a22:	8c 93       	st	X, r24
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <ADC_u8GetDigitalValChannelAsynchronus+0x94>

			}
			else
			{
				Local_u8Status=NULL_POINTER;
    2a26:	82 e0       	ldi	r24, 0x02	; 2
    2a28:	8a 83       	std	Y+2, r24	; 0x02
		return BUSY_FUNC;
	}



return Local_u8Status;
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	88 87       	std	Y+8, r24	; 0x08
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <ADC_u8GetDigitalValChannelAsynchronus+0x9e>
			}

	}
	else
	{
		return BUSY_FUNC;
    2a30:	83 e0       	ldi	r24, 0x03	; 3
    2a32:	88 87       	std	Y+8, r24	; 0x08
    2a34:	88 85       	ldd	r24, Y+8	; 0x08
	}



return Local_u8Status;
}
    2a36:	28 96       	adiw	r28, 0x08	; 8
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <__vector_16>:

}
*/
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    2a48:	1f 92       	push	r1
    2a4a:	0f 92       	push	r0
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	0f 92       	push	r0
    2a50:	11 24       	eor	r1, r1
    2a52:	2f 93       	push	r18
    2a54:	3f 93       	push	r19
    2a56:	4f 93       	push	r20
    2a58:	5f 93       	push	r21
    2a5a:	6f 93       	push	r22
    2a5c:	7f 93       	push	r23
    2a5e:	8f 93       	push	r24
    2a60:	9f 93       	push	r25
    2a62:	af 93       	push	r26
    2a64:	bf 93       	push	r27
    2a66:	ef 93       	push	r30
    2a68:	ff 93       	push	r31
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(ADMUX_REG,ADLAR)==LEFT_JUSTFICATION)
    2a72:	e7 e2       	ldi	r30, 0x27	; 39
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	82 95       	swap	r24
    2a7a:	86 95       	lsr	r24
    2a7c:	87 70       	andi	r24, 0x07	; 7
    2a7e:	88 2f       	mov	r24, r24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	81 70       	andi	r24, 0x01	; 1
    2a84:	90 70       	andi	r25, 0x00	; 0
    2a86:	88 23       	and	r24, r24
    2a88:	69 f0       	breq	.+26     	; 0x2aa4 <__vector_16+0x5c>
	{
		*Global_pu16ADC_Reading= ADCH_REG;
    2a8a:	a0 91 ba 01 	lds	r26, 0x01BA
    2a8e:	b0 91 bb 01 	lds	r27, 0x01BB
    2a92:	e5 e2       	ldi	r30, 0x25	; 37
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	11 96       	adiw	r26, 0x01	; 1
    2a9e:	9c 93       	st	X, r25
    2aa0:	8e 93       	st	-X, r24
    2aa2:	16 c0       	rjmp	.+44     	; 0x2ad0 <__vector_16+0x88>
	}
	else if (GET_BIT(ADMUX_REG,ADLAR)==RIGHT_JUSTFICATION)
    2aa4:	e7 e2       	ldi	r30, 0x27	; 39
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	82 95       	swap	r24
    2aac:	86 95       	lsr	r24
    2aae:	87 70       	andi	r24, 0x07	; 7
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	81 70       	andi	r24, 0x01	; 1
    2ab6:	90 70       	andi	r25, 0x00	; 0
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	51 f4       	brne	.+20     	; 0x2ad0 <__vector_16+0x88>
	{
		*Global_pu16ADC_Reading=ADC_10_BIT_RESULT ;
    2abc:	e0 91 ba 01 	lds	r30, 0x01BA
    2ac0:	f0 91 bb 01 	lds	r31, 0x01BB
    2ac4:	a4 e2       	ldi	r26, 0x24	; 36
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	8d 91       	ld	r24, X+
    2aca:	9c 91       	ld	r25, X
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
	}

	Global_u8State=IDIL;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	80 93 80 01 	sts	0x0180, r24
	ADC_VidCallBack_ISR_Funtion();
    2ad6:	e0 91 b8 01 	lds	r30, 0x01B8
    2ada:	f0 91 b9 01 	lds	r31, 0x01B9
    2ade:	09 95       	icall
	CLR_BIT(ADCSRA_REG,ADIE);
    2ae0:	a6 e2       	ldi	r26, 0x26	; 38
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e6 e2       	ldi	r30, 0x26	; 38
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	87 7f       	andi	r24, 0xF7	; 247
    2aec:	8c 93       	st	X, r24
}
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	ff 91       	pop	r31
    2af4:	ef 91       	pop	r30
    2af6:	bf 91       	pop	r27
    2af8:	af 91       	pop	r26
    2afa:	9f 91       	pop	r25
    2afc:	8f 91       	pop	r24
    2afe:	7f 91       	pop	r23
    2b00:	6f 91       	pop	r22
    2b02:	5f 91       	pop	r21
    2b04:	4f 91       	pop	r20
    2b06:	3f 91       	pop	r19
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	0f 90       	pop	r0
    2b10:	1f 90       	pop	r1
    2b12:	18 95       	reti

00002b14 <ServoMotor_VoidInit>:
#define Angle_0_tickis 750
#define Angle_180_tickis 2500


void ServoMotor_VoidInit()
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
	TMR1_VoidInit_Prebuild();
    2b1c:	0e 94 e5 07 	call	0xfca	; 0xfca <TMR1_VoidInit_Prebuild>
}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <ServoMotor_u16SetAngle>:



void ServoMotor_u16SetAngle(u16 Copy_u16Adngle,u8 Copy_u8Channel )
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	6f 97       	sbiw	r28, 0x1f	; 31
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b3e:	6f 8f       	std	Y+31, r22	; 0x1f

if ( Copy_u8Channel==TIMER1_CHANNELB)
    2b40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <ServoMotor_u16SetAngle+0x22>
    2b46:	79 c0       	rjmp	.+242    	; 0x2c3a <ServoMotor_u16SetAngle+0x114>
{
	OCR1B_REG=Copy_u16Adngle;
    2b48:	e8 e4       	ldi	r30, 0x48	; 72
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e2       	ldi	r26, 0x20	; 32
    2b5a:	b2 e4       	ldi	r27, 0x42	; 66
    2b5c:	89 8f       	std	Y+25, r24	; 0x19
    2b5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b60:	ab 8f       	std	Y+27, r26	; 0x1b
    2b62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	69 8d       	ldd	r22, Y+25	; 0x19
    2b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8d 8b       	std	Y+21, r24	; 0x15
    2b7e:	9e 8b       	std	Y+22, r25	; 0x16
    2b80:	af 8b       	std	Y+23, r26	; 0x17
    2b82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <ServoMotor_u16SetAngle+0x80>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <ServoMotor_u16SetAngle+0xfe>
	else if (__tmp > 65535)
    2ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    2baa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bac:	98 8d       	ldd	r25, Y+24	; 0x18
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <ServoMotor_u16SetAngle+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9c 8b       	std	Y+20, r25	; 0x14
    2be4:	8b 8b       	std	Y+19, r24	; 0x13
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <ServoMotor_u16SetAngle+0xe0>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9a 8b       	std	Y+18, r25	; 0x12
    2bee:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bf0:	89 89       	ldd	r24, Y+17	; 0x11
    2bf2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <ServoMotor_u16SetAngle+0xce>
    2bf8:	9a 8b       	std	Y+18, r25	; 0x12
    2bfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9c 8b       	std	Y+20, r25	; 0x14
    2c04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	8b 89       	ldd	r24, Y+19	; 0x13
    2c08:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <ServoMotor_u16SetAngle+0xc2>
    2c0e:	91 c0       	rjmp	.+290    	; 0x2d32 <ServoMotor_u16SetAngle+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6d 89       	ldd	r22, Y+21	; 0x15
    2c12:	7e 89       	ldd	r23, Y+22	; 0x16
    2c14:	8f 89       	ldd	r24, Y+23	; 0x17
    2c16:	98 8d       	ldd	r25, Y+24	; 0x18
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	98 8b       	std	Y+16, r25	; 0x10
    2c2a:	8f 87       	std	Y+15, r24	; 0x0f
    2c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2e:	98 89       	ldd	r25, Y+16	; 0x10
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <ServoMotor_u16SetAngle+0x10a>
    2c34:	98 8b       	std	Y+16, r25	; 0x10
    2c36:	8f 87       	std	Y+15, r24	; 0x0f
    2c38:	7c c0       	rjmp	.+248    	; 0x2d32 <ServoMotor_u16SetAngle+0x20c>
			  _delay_ms(40);
}

else if(Copy_u8Channel==TIMER1_CHANNELA)
    2c3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c3c:	88 23       	and	r24, r24
    2c3e:	09 f0       	breq	.+2      	; 0x2c42 <ServoMotor_u16SetAngle+0x11c>
    2c40:	78 c0       	rjmp	.+240    	; 0x2d32 <ServoMotor_u16SetAngle+0x20c>
{
	OCR1A_REG=Copy_u16Adngle;
    2c42:	ea e4       	ldi	r30, 0x4A	; 74
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	a0 e2       	ldi	r26, 0x20	; 32
    2c54:	b2 e4       	ldi	r27, 0x42	; 66
    2c56:	8b 87       	std	Y+11, r24	; 0x0b
    2c58:	9c 87       	std	Y+12, r25	; 0x0c
    2c5a:	ad 87       	std	Y+13, r26	; 0x0d
    2c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4a ef       	ldi	r20, 0xFA	; 250
    2c6c:	54 e4       	ldi	r21, 0x44	; 68
    2c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8f 83       	std	Y+7, r24	; 0x07
    2c78:	98 87       	std	Y+8, r25	; 0x08
    2c7a:	a9 87       	std	Y+9, r26	; 0x09
    2c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c80:	78 85       	ldd	r23, Y+8	; 0x08
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e8       	ldi	r20, 0x80	; 128
    2c8c:	5f e3       	ldi	r21, 0x3F	; 63
    2c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c92:	88 23       	and	r24, r24
    2c94:	2c f4       	brge	.+10     	; 0x2ca0 <ServoMotor_u16SetAngle+0x17a>
		__ticks = 1;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	3f c0       	rjmp	.+126    	; 0x2d1e <ServoMotor_u16SetAngle+0x1f8>
	else if (__tmp > 65535)
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	3f ef       	ldi	r19, 0xFF	; 255
    2cac:	4f e7       	ldi	r20, 0x7F	; 127
    2cae:	57 e4       	ldi	r21, 0x47	; 71
    2cb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb4:	18 16       	cp	r1, r24
    2cb6:	4c f5       	brge	.+82     	; 0x2d0a <ServoMotor_u16SetAngle+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e2       	ldi	r20, 0x20	; 32
    2cc6:	51 e4       	ldi	r21, 0x41	; 65
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	0f c0       	rjmp	.+30     	; 0x2d00 <ServoMotor_u16SetAngle+0x1da>
    2ce2:	88 ec       	ldi	r24, 0xC8	; 200
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <ServoMotor_u16SetAngle+0x1c8>
    2cf2:	9c 83       	std	Y+4, r25	; 0x04
    2cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	69 f7       	brne	.-38     	; 0x2ce2 <ServoMotor_u16SetAngle+0x1bc>
    2d08:	14 c0       	rjmp	.+40     	; 0x2d32 <ServoMotor_u16SetAngle+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0c:	78 85       	ldd	r23, Y+8	; 0x08
    2d0e:	89 85       	ldd	r24, Y+9	; 0x09
    2d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d20:	9e 81       	ldd	r25, Y+6	; 0x06
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <ServoMotor_u16SetAngle+0x204>
    2d2e:	9a 83       	std	Y+2, r25	; 0x02
    2d30:	89 83       	std	Y+1, r24	; 0x01
			  _delay_ms(40);
}
}
    2d32:	6f 96       	adiw	r28, 0x1f	; 31
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <SERVO_MOTOR_u16Maapping_Function>:
/*Take Angle and give suitable ON_Time*/
u16 SERVO_MOTOR_u16Maapping_Function(s32 Copy_s32MaxAngle,s32 Copy_s32MinAngle,s32 MaxONTime,s32 MinONTime,s32 Copy_s32EnteredAngle)
{
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	2e 97       	sbiw	r28, 0x0e	; 14
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	78 87       	std	Y+8, r23	; 0x08
    2d62:	6f 83       	std	Y+7, r22	; 0x07
    2d64:	5a 87       	std	Y+10, r21	; 0x0a
    2d66:	49 87       	std	Y+9, r20	; 0x09
    2d68:	3c 87       	std	Y+12, r19	; 0x0c
    2d6a:	2b 87       	std	Y+11, r18	; 0x0b
    2d6c:	1e 87       	std	Y+14, r17	; 0x0e
    2d6e:	0d 87       	std	Y+13, r16	; 0x0d
    s32 Local_s32LineSlope=(MaxONTime-MinONTime)/(Copy_s32MaxAngle-Copy_s32MinAngle);
    2d70:	29 85       	ldd	r18, Y+9	; 0x09
    2d72:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d78:	a9 01       	movw	r20, r18
    2d7a:	48 1b       	sub	r20, r24
    2d7c:	59 0b       	sbc	r21, r25
    2d7e:	2d 81       	ldd	r18, Y+5	; 0x05
    2d80:	3e 81       	ldd	r19, Y+6	; 0x06
    2d82:	8f 81       	ldd	r24, Y+7	; 0x07
    2d84:	98 85       	ldd	r25, Y+8	; 0x08
    2d86:	28 1b       	sub	r18, r24
    2d88:	39 0b       	sbc	r19, r25
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	b9 01       	movw	r22, r18
    2d8e:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__divmodhi4>
    2d92:	cb 01       	movw	r24, r22
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_s32Mapped_Number=Local_s32LineSlope*(Copy_s32EnteredAngle-Copy_s32MaxAngle) +MaxONTime;
    2d98:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d9a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	28 1b       	sub	r18, r24
    2da2:	39 0b       	sbc	r19, r25
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	a9 01       	movw	r20, r18
    2daa:	48 9f       	mul	r20, r24
    2dac:	90 01       	movw	r18, r0
    2dae:	49 9f       	mul	r20, r25
    2db0:	30 0d       	add	r19, r0
    2db2:	58 9f       	mul	r21, r24
    2db4:	30 0d       	add	r19, r0
    2db6:	11 24       	eor	r1, r1
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	82 0f       	add	r24, r18
    2dbe:	93 1f       	adc	r25, r19
    2dc0:	9a 83       	std	Y+2, r25	; 0x02
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    return Local_s32Mapped_Number;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02

}
    2dc8:	2e 96       	adiw	r28, 0x0e	; 14
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	08 95       	ret

00002dde <LM35_VoidInit>:
#include"../../MCAL/ADC_Driver/ADC_Interface.h"
#include "LM35_Interface.h"
const f32 ADC_STEP=4.8828125;

void LM35_VoidInit()
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInit_PreBuild();
    2de6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <ADC_VoidInit_PreBuild>
}
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LM35_u16GetTempretureWithUnit>:

u16 LM35_u16GetTempretureWithUnit(u16 Copy_u16DigitalVoltage,Degree_Unit Copy_enumUnit)
{f32 Local_f32Temprature=(Copy_u16DigitalVoltage*ADC_STEP)/10.0;
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	2d 97       	sbiw	r28, 0x0d	; 13
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	98 87       	std	Y+8, r25	; 0x08
    2e06:	8f 83       	std	Y+7, r24	; 0x07
    2e08:	69 87       	std	Y+9, r22	; 0x09
    2e0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e0c:	98 85       	ldd	r25, Y+8	; 0x08
    2e0e:	cc 01       	movw	r24, r24
    2e10:	a0 e0       	ldi	r26, 0x00	; 0
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	20 91 9d 01 	lds	r18, 0x019D
    2e24:	30 91 9e 01 	lds	r19, 0x019E
    2e28:	40 91 9f 01 	lds	r20, 0x019F
    2e2c:	50 91 a0 01 	lds	r21, 0x01A0
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e2       	ldi	r20, 0x20	; 32
    2e46:	51 e4       	ldi	r21, 0x41	; 65
    2e48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	8b 83       	std	Y+3, r24	; 0x03
    2e52:	9c 83       	std	Y+4, r25	; 0x04
    2e54:	ad 83       	std	Y+5, r26	; 0x05
    2e56:	be 83       	std	Y+6, r27	; 0x06
 u16 Local_u8State=RT_OK;
    2e58:	1a 82       	std	Y+2, r1	; 0x02
    2e5a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_enumUnit)
    2e5c:	89 85       	ldd	r24, Y+9	; 0x09
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	3d 87       	std	Y+13, r19	; 0x0d
    2e64:	2c 87       	std	Y+12, r18	; 0x0c
    2e66:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e68:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	a9 f0       	breq	.+42     	; 0x2e9a <LM35_u16GetTempretureWithUnit+0xaa>
    2e70:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e72:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e74:	22 30       	cpi	r18, 0x02	; 2
    2e76:	31 05       	cpc	r19, r1
    2e78:	29 f1       	breq	.+74     	; 0x2ec4 <LM35_u16GetTempretureWithUnit+0xd4>
    2e7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	09 f0       	breq	.+2      	; 0x2e84 <LM35_u16GetTempretureWithUnit+0x94>
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <LM35_u16GetTempretureWithUnit+0x112>
	{
	case Celsuis_Degree   :{return (u16) (Local_f32Temprature   )   ;break; }
    2e84:	6b 81       	ldd	r22, Y+3	; 0x03
    2e86:	7c 81       	ldd	r23, Y+4	; 0x04
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9b 87       	std	Y+11, r25	; 0x0b
    2e96:	8a 87       	std	Y+10, r24	; 0x0a
    2e98:	3c c0       	rjmp	.+120    	; 0x2f12 <LM35_u16GetTempretureWithUnit+0x122>
	case Kilven_Degree    :{return (u16)(Local_f32Temprature+273.15);break; }
    2e9a:	6b 81       	ldd	r22, Y+3	; 0x03
    2e9c:	7c 81       	ldd	r23, Y+4	; 0x04
    2e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea2:	23 e3       	ldi	r18, 0x33	; 51
    2ea4:	33 e9       	ldi	r19, 0x93	; 147
    2ea6:	48 e8       	ldi	r20, 0x88	; 136
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9b 87       	std	Y+11, r25	; 0x0b
    2ec0:	8a 87       	std	Y+10, r24	; 0x0a
    2ec2:	27 c0       	rjmp	.+78     	; 0x2f12 <LM35_u16GetTempretureWithUnit+0x122>
	case Fairenheit_Degree:{return (u16)(Local_f32Temprature*1.8+32);break; }
    2ec4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ec6:	7c 81       	ldd	r23, Y+4	; 0x04
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ecc:	26 e6       	ldi	r18, 0x66	; 102
    2ece:	36 e6       	ldi	r19, 0x66	; 102
    2ed0:	46 ee       	ldi	r20, 0xE6	; 230
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e0       	ldi	r20, 0x00	; 0
    2ee6:	52 e4       	ldi	r21, 0x42	; 66
    2ee8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9b 87       	std	Y+11, r25	; 0x0b
    2efe:	8a 87       	std	Y+10, r24	; 0x0a
    2f00:	08 c0       	rjmp	.+16     	; 0x2f12 <LM35_u16GetTempretureWithUnit+0x122>
	default:{Local_u8State=RT_NOK;}
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9a 83       	std	Y+2, r25	; 0x02
    2f08:	89 83       	std	Y+1, r24	; 0x01
 	}
	return Local_u8State;
    2f0a:	29 81       	ldd	r18, Y+1	; 0x01
    2f0c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f0e:	3b 87       	std	Y+11, r19	; 0x0b
    2f10:	2a 87       	std	Y+10, r18	; 0x0a
    2f12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f14:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    2f16:	2d 96       	adiw	r28, 0x0d	; 13
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <LED_U8ON_OFF>:
#include  "../../MCAL/DIO_Driver/DIO_REG.h"
#include  "../../MCAL/DIO_Driver/DIO_Interface.h"
#include "LED_Interface.h"

u8 LED_U8ON_OFF(enum PORTS Copy_PortNo,enum LEDs Copy_LedNo,u8 Copy_u8ON_OR_OFF)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	28 97       	sbiw	r28, 0x08	; 8
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
    2f3e:	6b 83       	std	Y+3, r22	; 0x03
    2f40:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    2f42:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_LedNo<0)||(Copy_LedNo>7)||Copy_PortNo<0||Copy_PortNo>3)
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	88 30       	cpi	r24, 0x08	; 8
    2f48:	18 f4       	brcc	.+6      	; 0x2f50 <LED_U8ON_OFF+0x28>
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	84 30       	cpi	r24, 0x04	; 4
    2f4e:	18 f0       	brcs	.+6      	; 0x2f56 <LED_U8ON_OFF+0x2e>
	{
		Local_Status=RT_NOK;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	89 83       	std	Y+1, r24	; 0x01
    2f54:	35 c1       	rjmp	.+618    	; 0x31c0 <LED_U8ON_OFF+0x298>
	}
	else
	{
		if( Copy_u8ON_OR_OFF==LED_ON)
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	09 f0       	breq	.+2      	; 0x2f5e <LED_U8ON_OFF+0x36>
    2f5c:	ba c0       	rjmp	.+372    	; 0x30d2 <LED_U8ON_OFF+0x1aa>
			{
			switch(Copy_PortNo)
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	28 2f       	mov	r18, r24
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	38 87       	std	Y+8, r19	; 0x08
    2f66:	2f 83       	std	Y+7, r18	; 0x07
    2f68:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6a:	98 85       	ldd	r25, Y+8	; 0x08
    2f6c:	81 30       	cpi	r24, 0x01	; 1
    2f6e:	91 05       	cpc	r25, r1
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <LED_U8ON_OFF+0x4c>
    2f72:	3d c0       	rjmp	.+122    	; 0x2fee <LED_U8ON_OFF+0xc6>
    2f74:	2f 81       	ldd	r18, Y+7	; 0x07
    2f76:	38 85       	ldd	r19, Y+8	; 0x08
    2f78:	22 30       	cpi	r18, 0x02	; 2
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	2c f4       	brge	.+10     	; 0x2f88 <LED_U8ON_OFF+0x60>
    2f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f80:	98 85       	ldd	r25, Y+8	; 0x08
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	71 f0       	breq	.+28     	; 0x2fa2 <LED_U8ON_OFF+0x7a>
    2f86:	1c c1       	rjmp	.+568    	; 0x31c0 <LED_U8ON_OFF+0x298>
    2f88:	2f 81       	ldd	r18, Y+7	; 0x07
    2f8a:	38 85       	ldd	r19, Y+8	; 0x08
    2f8c:	22 30       	cpi	r18, 0x02	; 2
    2f8e:	31 05       	cpc	r19, r1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <LED_U8ON_OFF+0x6c>
    2f92:	53 c0       	rjmp	.+166    	; 0x303a <LED_U8ON_OFF+0x112>
    2f94:	8f 81       	ldd	r24, Y+7	; 0x07
    2f96:	98 85       	ldd	r25, Y+8	; 0x08
    2f98:	83 30       	cpi	r24, 0x03	; 3
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <LED_U8ON_OFF+0x78>
    2f9e:	73 c0       	rjmp	.+230    	; 0x3086 <LED_U8ON_OFF+0x15e>
    2fa0:	0f c1       	rjmp	.+542    	; 0x31c0 <LED_U8ON_OFF+0x298>
					{
					case 0:{ SET_BIT(DDRA_REG,Copy_LedNo);SET_BIT(PORTA_REG,Copy_LedNo);break;}
    2fa2:	aa e3       	ldi	r26, 0x3A	; 58
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	ea e3       	ldi	r30, 0x3A	; 58
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	48 2f       	mov	r20, r24
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	28 2f       	mov	r18, r24
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <LED_U8ON_OFF+0x96>
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	2a 95       	dec	r18
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <LED_U8ON_OFF+0x92>
    2fc2:	84 2b       	or	r24, r20
    2fc4:	8c 93       	st	X, r24
    2fc6:	ab e3       	ldi	r26, 0x3B	; 59
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	eb e3       	ldi	r30, 0x3B	; 59
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	48 2f       	mov	r20, r24
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	02 2e       	mov	r0, r18
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <LED_U8ON_OFF+0xbc>
    2fe0:	88 0f       	add	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	0a 94       	dec	r0
    2fe6:	e2 f7       	brpl	.-8      	; 0x2fe0 <LED_U8ON_OFF+0xb8>
    2fe8:	84 2b       	or	r24, r20
    2fea:	8c 93       	st	X, r24
    2fec:	e9 c0       	rjmp	.+466    	; 0x31c0 <LED_U8ON_OFF+0x298>
					case 1:{ SET_BIT(DDRB_REG,Copy_LedNo);SET_BIT(PORTB_REG,Copy_LedNo);break;}
    2fee:	a7 e3       	ldi	r26, 0x37	; 55
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	e7 e3       	ldi	r30, 0x37	; 55
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	48 2f       	mov	r20, r24
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	02 c0       	rjmp	.+4      	; 0x300a <LED_U8ON_OFF+0xe2>
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	2a 95       	dec	r18
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <LED_U8ON_OFF+0xde>
    300e:	84 2b       	or	r24, r20
    3010:	8c 93       	st	X, r24
    3012:	a8 e3       	ldi	r26, 0x38	; 56
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	e8 e3       	ldi	r30, 0x38	; 56
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	48 2f       	mov	r20, r24
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	02 2e       	mov	r0, r18
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <LED_U8ON_OFF+0x108>
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	0a 94       	dec	r0
    3032:	e2 f7       	brpl	.-8      	; 0x302c <LED_U8ON_OFF+0x104>
    3034:	84 2b       	or	r24, r20
    3036:	8c 93       	st	X, r24
    3038:	c3 c0       	rjmp	.+390    	; 0x31c0 <LED_U8ON_OFF+0x298>
					case 2:{ SET_BIT(DDRC_REG,Copy_LedNo);SET_BIT(PORTC_REG,Copy_LedNo);break;}
    303a:	a4 e3       	ldi	r26, 0x34	; 52
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e4 e3       	ldi	r30, 0x34	; 52
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	48 2f       	mov	r20, r24
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	28 2f       	mov	r18, r24
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <LED_U8ON_OFF+0x12e>
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	2a 95       	dec	r18
    3058:	e2 f7       	brpl	.-8      	; 0x3052 <LED_U8ON_OFF+0x12a>
    305a:	84 2b       	or	r24, r20
    305c:	8c 93       	st	X, r24
    305e:	a5 e3       	ldi	r26, 0x35	; 53
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e5 e3       	ldi	r30, 0x35	; 53
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	48 2f       	mov	r20, r24
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	02 2e       	mov	r0, r18
    3076:	02 c0       	rjmp	.+4      	; 0x307c <LED_U8ON_OFF+0x154>
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	0a 94       	dec	r0
    307e:	e2 f7       	brpl	.-8      	; 0x3078 <LED_U8ON_OFF+0x150>
    3080:	84 2b       	or	r24, r20
    3082:	8c 93       	st	X, r24
    3084:	9d c0       	rjmp	.+314    	; 0x31c0 <LED_U8ON_OFF+0x298>
					case 3:{ SET_BIT(DDRD_REG,Copy_LedNo); SET_BIT(PORTD_REG,Copy_LedNo);break;}
    3086:	a1 e3       	ldi	r26, 0x31	; 49
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e1 e3       	ldi	r30, 0x31	; 49
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	48 2f       	mov	r20, r24
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <LED_U8ON_OFF+0x17a>
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	2a 95       	dec	r18
    30a4:	e2 f7       	brpl	.-8      	; 0x309e <LED_U8ON_OFF+0x176>
    30a6:	84 2b       	or	r24, r20
    30a8:	8c 93       	st	X, r24
    30aa:	a2 e3       	ldi	r26, 0x32	; 50
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e2 e3       	ldi	r30, 0x32	; 50
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	48 2f       	mov	r20, r24
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	28 2f       	mov	r18, r24
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	02 2e       	mov	r0, r18
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <LED_U8ON_OFF+0x1a0>
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	0a 94       	dec	r0
    30ca:	e2 f7       	brpl	.-8      	; 0x30c4 <LED_U8ON_OFF+0x19c>
    30cc:	84 2b       	or	r24, r20
    30ce:	8c 93       	st	X, r24
    30d0:	77 c0       	rjmp	.+238    	; 0x31c0 <LED_U8ON_OFF+0x298>

			         }

	        }
		else if( Copy_u8ON_OR_OFF==LED_OFF)
    30d2:	8c 81       	ldd	r24, Y+4	; 0x04
    30d4:	88 23       	and	r24, r24
    30d6:	09 f0       	breq	.+2      	; 0x30da <LED_U8ON_OFF+0x1b2>
    30d8:	73 c0       	rjmp	.+230    	; 0x31c0 <LED_U8ON_OFF+0x298>
					{
					switch(Copy_PortNo)
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	3e 83       	std	Y+6, r19	; 0x06
    30e2:	2d 83       	std	Y+5, r18	; 0x05
    30e4:	8d 81       	ldd	r24, Y+5	; 0x05
    30e6:	9e 81       	ldd	r25, Y+6	; 0x06
    30e8:	81 30       	cpi	r24, 0x01	; 1
    30ea:	91 05       	cpc	r25, r1
    30ec:	59 f1       	breq	.+86     	; 0x3144 <LED_U8ON_OFF+0x21c>
    30ee:	2d 81       	ldd	r18, Y+5	; 0x05
    30f0:	3e 81       	ldd	r19, Y+6	; 0x06
    30f2:	22 30       	cpi	r18, 0x02	; 2
    30f4:	31 05       	cpc	r19, r1
    30f6:	2c f4       	brge	.+10     	; 0x3102 <LED_U8ON_OFF+0x1da>
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	9e 81       	ldd	r25, Y+6	; 0x06
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f0       	breq	.+26     	; 0x311a <LED_U8ON_OFF+0x1f2>
    3100:	5f c0       	rjmp	.+190    	; 0x31c0 <LED_U8ON_OFF+0x298>
    3102:	2d 81       	ldd	r18, Y+5	; 0x05
    3104:	3e 81       	ldd	r19, Y+6	; 0x06
    3106:	22 30       	cpi	r18, 0x02	; 2
    3108:	31 05       	cpc	r19, r1
    310a:	89 f1       	breq	.+98     	; 0x316e <LED_U8ON_OFF+0x246>
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	9e 81       	ldd	r25, Y+6	; 0x06
    3110:	83 30       	cpi	r24, 0x03	; 3
    3112:	91 05       	cpc	r25, r1
    3114:	09 f4       	brne	.+2      	; 0x3118 <LED_U8ON_OFF+0x1f0>
    3116:	40 c0       	rjmp	.+128    	; 0x3198 <LED_U8ON_OFF+0x270>
    3118:	53 c0       	rjmp	.+166    	; 0x31c0 <LED_U8ON_OFF+0x298>
							{
							case 0:{ CLR_BIT(PORTA_REG,Copy_LedNo);break;}
    311a:	ab e3       	ldi	r26, 0x3B	; 59
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	eb e3       	ldi	r30, 0x3B	; 59
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	48 2f       	mov	r20, r24
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	02 2e       	mov	r0, r18
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <LED_U8ON_OFF+0x210>
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	0a 94       	dec	r0
    313a:	e2 f7       	brpl	.-8      	; 0x3134 <LED_U8ON_OFF+0x20c>
    313c:	80 95       	com	r24
    313e:	84 23       	and	r24, r20
    3140:	8c 93       	st	X, r24
    3142:	3e c0       	rjmp	.+124    	; 0x31c0 <LED_U8ON_OFF+0x298>
							case 1:{ CLR_BIT(PORTB_REG,Copy_LedNo);break;}
    3144:	a8 e3       	ldi	r26, 0x38	; 56
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e8 e3       	ldi	r30, 0x38	; 56
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	48 2f       	mov	r20, r24
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	02 2e       	mov	r0, r18
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <LED_U8ON_OFF+0x23a>
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	0a 94       	dec	r0
    3164:	e2 f7       	brpl	.-8      	; 0x315e <LED_U8ON_OFF+0x236>
    3166:	80 95       	com	r24
    3168:	84 23       	and	r24, r20
    316a:	8c 93       	st	X, r24
    316c:	29 c0       	rjmp	.+82     	; 0x31c0 <LED_U8ON_OFF+0x298>
							case 2:{ CLR_BIT(PORTC_REG,Copy_LedNo);break;}
    316e:	a5 e3       	ldi	r26, 0x35	; 53
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e5 e3       	ldi	r30, 0x35	; 53
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	48 2f       	mov	r20, r24
    317a:	8b 81       	ldd	r24, Y+3	; 0x03
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	02 2e       	mov	r0, r18
    3186:	02 c0       	rjmp	.+4      	; 0x318c <LED_U8ON_OFF+0x264>
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	0a 94       	dec	r0
    318e:	e2 f7       	brpl	.-8      	; 0x3188 <LED_U8ON_OFF+0x260>
    3190:	80 95       	com	r24
    3192:	84 23       	and	r24, r20
    3194:	8c 93       	st	X, r24
    3196:	14 c0       	rjmp	.+40     	; 0x31c0 <LED_U8ON_OFF+0x298>
							case 3:{ CLR_BIT(PORTD_REG,Copy_LedNo);break;}
    3198:	a2 e3       	ldi	r26, 0x32	; 50
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e2 e3       	ldi	r30, 0x32	; 50
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	48 2f       	mov	r20, r24
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	28 2f       	mov	r18, r24
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	02 2e       	mov	r0, r18
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <LED_U8ON_OFF+0x28e>
    31b2:	88 0f       	add	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	0a 94       	dec	r0
    31b8:	e2 f7       	brpl	.-8      	; 0x31b2 <LED_U8ON_OFF+0x28a>
    31ba:	80 95       	com	r24
    31bc:	84 23       	and	r24, r20
    31be:	8c 93       	st	X, r24
			        }



	}
	return Local_Status;
    31c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    31c2:	28 96       	adiw	r28, 0x08	; 8
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <LCD_VoidSendCommand>:
u8 Global_u8YPos=0;
u8 Global_u8EnterGoToFunc=0;
/*if we select send command*/
# if(LCD_MODE==BIT_8)
void LCD_VoidSendCommand(u8 Copy_u8Command)
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	2f 97       	sbiw	r28, 0x0f	; 15
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	8f 87       	std	Y+15, r24	; 0x0f
	/*for function set: RS:command,R/W:write */
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_RS_PIN,LOW);
    31ea:	83 e0       	ldi	r24, 0x03	; 3
    31ec:	67 e0       	ldi	r22, 0x07	; 7
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_R_W_PIN,LOW);
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	64 e0       	ldi	r22, 0x04	; 4
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
		DIO_U8SetPortVal(LCD_DATA_PORT,Copy_u8Command);
    31fe:	82 e0       	ldi	r24, 0x02	; 2
    3200:	6f 85       	ldd	r22, Y+15	; 0x0f
    3202:	0e 94 40 10 	call	0x2080	; 0x2080 <DIO_U8SetPortVal>


	/*making enable pulse high for 2mile sec only*/
	DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,HIGH);
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	65 e0       	ldi	r22, 0x05	; 5
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	a0 e0       	ldi	r26, 0x00	; 0
    3216:	b0 e4       	ldi	r27, 0x40	; 64
    3218:	8b 87       	std	Y+11, r24	; 0x0b
    321a:	9c 87       	std	Y+12, r25	; 0x0c
    321c:	ad 87       	std	Y+13, r26	; 0x0d
    321e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3220:	6b 85       	ldd	r22, Y+11	; 0x0b
    3222:	7c 85       	ldd	r23, Y+12	; 0x0c
    3224:	8d 85       	ldd	r24, Y+13	; 0x0d
    3226:	9e 85       	ldd	r25, Y+14	; 0x0e
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	4a ef       	ldi	r20, 0xFA	; 250
    322e:	54 e4       	ldi	r21, 0x44	; 68
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	8f 83       	std	Y+7, r24	; 0x07
    323a:	98 87       	std	Y+8, r25	; 0x08
    323c:	a9 87       	std	Y+9, r26	; 0x09
    323e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3240:	6f 81       	ldd	r22, Y+7	; 0x07
    3242:	78 85       	ldd	r23, Y+8	; 0x08
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	40 e8       	ldi	r20, 0x80	; 128
    324e:	5f e3       	ldi	r21, 0x3F	; 63
    3250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3254:	88 23       	and	r24, r24
    3256:	2c f4       	brge	.+10     	; 0x3262 <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	9e 83       	std	Y+6, r25	; 0x06
    325e:	8d 83       	std	Y+5, r24	; 0x05
    3260:	3f c0       	rjmp	.+126    	; 0x32e0 <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    3262:	6f 81       	ldd	r22, Y+7	; 0x07
    3264:	78 85       	ldd	r23, Y+8	; 0x08
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	3f ef       	ldi	r19, 0xFF	; 255
    326e:	4f e7       	ldi	r20, 0x7F	; 127
    3270:	57 e4       	ldi	r21, 0x47	; 71
    3272:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3276:	18 16       	cp	r1, r24
    3278:	4c f5       	brge	.+82     	; 0x32cc <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    327a:	6b 85       	ldd	r22, Y+11	; 0x0b
    327c:	7c 85       	ldd	r23, Y+12	; 0x0c
    327e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3280:	9e 85       	ldd	r25, Y+14	; 0x0e
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e2       	ldi	r20, 0x20	; 32
    3288:	51 e4       	ldi	r21, 0x41	; 65
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	bc 01       	movw	r22, r24
    3294:	cd 01       	movw	r24, r26
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	9e 83       	std	Y+6, r25	; 0x06
    32a0:	8d 83       	std	Y+5, r24	; 0x05
    32a2:	0f c0       	rjmp	.+30     	; 0x32c2 <LCD_VoidSendCommand+0xee>
    32a4:	88 ec       	ldi	r24, 0xC8	; 200
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	9c 83       	std	Y+4, r25	; 0x04
    32aa:	8b 83       	std	Y+3, r24	; 0x03
    32ac:	8b 81       	ldd	r24, Y+3	; 0x03
    32ae:	9c 81       	ldd	r25, Y+4	; 0x04
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	f1 f7       	brne	.-4      	; 0x32b0 <LCD_VoidSendCommand+0xdc>
    32b4:	9c 83       	std	Y+4, r25	; 0x04
    32b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ba:	9e 81       	ldd	r25, Y+6	; 0x06
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	00 97       	sbiw	r24, 0x00	; 0
    32c8:	69 f7       	brne	.-38     	; 0x32a4 <LCD_VoidSendCommand+0xd0>
    32ca:	14 c0       	rjmp	.+40     	; 0x32f4 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32cc:	6f 81       	ldd	r22, Y+7	; 0x07
    32ce:	78 85       	ldd	r23, Y+8	; 0x08
    32d0:	89 85       	ldd	r24, Y+9	; 0x09
    32d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	9e 83       	std	Y+6, r25	; 0x06
    32de:	8d 83       	std	Y+5, r24	; 0x05
    32e0:	8d 81       	ldd	r24, Y+5	; 0x05
    32e2:	9e 81       	ldd	r25, Y+6	; 0x06
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	9a 81       	ldd	r25, Y+2	; 0x02
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <LCD_VoidSendCommand+0x118>
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,LOW);
    32f4:	83 e0       	ldi	r24, 0x03	; 3
    32f6:	65 e0       	ldi	r22, 0x05	; 5
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>

}
    32fe:	2f 96       	adiw	r28, 0x0f	; 15
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	08 95       	ret

00003310 <LCD_VoidSendData>:

/* if we select send data*/
void LCD_VoidSendData(u8 Copy_u8Data)
{
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	2f 97       	sbiw	r28, 0x0f	; 15
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	8f 87       	std	Y+15, r24	; 0x0f
		    /*for function set:
	        * RS:command
	        * R/W:write
	       */
	        DIO_U8SetPinVal(LCD_Config_PORT,LCD_RS_PIN,HIGH);
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	67 e0       	ldi	r22, 0x07	; 7
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
			DIO_U8SetPinVal(LCD_Config_PORT,LCD_R_W_PIN,LOW);
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	64 e0       	ldi	r22, 0x04	; 4
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
			DIO_U8SetPortVal(LCD_DATA_PORT,Copy_u8Data);
    333a:	82 e0       	ldi	r24, 0x02	; 2
    333c:	6f 85       	ldd	r22, Y+15	; 0x0f
    333e:	0e 94 40 10 	call	0x2080	; 0x2080 <DIO_U8SetPortVal>


		/*making enable pulse high for 2mile sec only*/
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,HIGH);
    3342:	83 e0       	ldi	r24, 0x03	; 3
    3344:	65 e0       	ldi	r22, 0x05	; 5
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e4       	ldi	r27, 0x40	; 64
    3354:	8b 87       	std	Y+11, r24	; 0x0b
    3356:	9c 87       	std	Y+12, r25	; 0x0c
    3358:	ad 87       	std	Y+13, r26	; 0x0d
    335a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335c:	6b 85       	ldd	r22, Y+11	; 0x0b
    335e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3360:	8d 85       	ldd	r24, Y+13	; 0x0d
    3362:	9e 85       	ldd	r25, Y+14	; 0x0e
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	4a ef       	ldi	r20, 0xFA	; 250
    336a:	54 e4       	ldi	r21, 0x44	; 68
    336c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	8f 83       	std	Y+7, r24	; 0x07
    3376:	98 87       	std	Y+8, r25	; 0x08
    3378:	a9 87       	std	Y+9, r26	; 0x09
    337a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    337c:	6f 81       	ldd	r22, Y+7	; 0x07
    337e:	78 85       	ldd	r23, Y+8	; 0x08
    3380:	89 85       	ldd	r24, Y+9	; 0x09
    3382:	9a 85       	ldd	r25, Y+10	; 0x0a
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e8       	ldi	r20, 0x80	; 128
    338a:	5f e3       	ldi	r21, 0x3F	; 63
    338c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3390:	88 23       	and	r24, r24
    3392:	2c f4       	brge	.+10     	; 0x339e <LCD_VoidSendData+0x8e>
		__ticks = 1;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	9e 83       	std	Y+6, r25	; 0x06
    339a:	8d 83       	std	Y+5, r24	; 0x05
    339c:	3f c0       	rjmp	.+126    	; 0x341c <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    339e:	6f 81       	ldd	r22, Y+7	; 0x07
    33a0:	78 85       	ldd	r23, Y+8	; 0x08
    33a2:	89 85       	ldd	r24, Y+9	; 0x09
    33a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	3f ef       	ldi	r19, 0xFF	; 255
    33aa:	4f e7       	ldi	r20, 0x7F	; 127
    33ac:	57 e4       	ldi	r21, 0x47	; 71
    33ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b2:	18 16       	cp	r1, r24
    33b4:	4c f5       	brge	.+82     	; 0x3408 <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    33bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e2       	ldi	r20, 0x20	; 32
    33c4:	51 e4       	ldi	r21, 0x41	; 65
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9e 83       	std	Y+6, r25	; 0x06
    33dc:	8d 83       	std	Y+5, r24	; 0x05
    33de:	0f c0       	rjmp	.+30     	; 0x33fe <LCD_VoidSendData+0xee>
    33e0:	88 ec       	ldi	r24, 0xC8	; 200
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	9c 83       	std	Y+4, r25	; 0x04
    33e6:	8b 83       	std	Y+3, r24	; 0x03
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	9c 81       	ldd	r25, Y+4	; 0x04
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <LCD_VoidSendData+0xdc>
    33f0:	9c 83       	std	Y+4, r25	; 0x04
    33f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f4:	8d 81       	ldd	r24, Y+5	; 0x05
    33f6:	9e 81       	ldd	r25, Y+6	; 0x06
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	9e 83       	std	Y+6, r25	; 0x06
    33fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	69 f7       	brne	.-38     	; 0x33e0 <LCD_VoidSendData+0xd0>
    3406:	14 c0       	rjmp	.+40     	; 0x3430 <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3408:	6f 81       	ldd	r22, Y+7	; 0x07
    340a:	78 85       	ldd	r23, Y+8	; 0x08
    340c:	89 85       	ldd	r24, Y+9	; 0x09
    340e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	9e 83       	std	Y+6, r25	; 0x06
    341a:	8d 83       	std	Y+5, r24	; 0x05
    341c:	8d 81       	ldd	r24, Y+5	; 0x05
    341e:	9e 81       	ldd	r25, Y+6	; 0x06
    3420:	9a 83       	std	Y+2, r25	; 0x02
    3422:	89 83       	std	Y+1, r24	; 0x01
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	9a 81       	ldd	r25, Y+2	; 0x02
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <LCD_VoidSendData+0x118>
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,LOW);
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	65 e0       	ldi	r22, 0x05	; 5
    3434:	40 e0       	ldi	r20, 0x00	; 0
    3436:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>



}
    343a:	2f 96       	adiw	r28, 0x0f	; 15
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <LCD_VoidInit>:



/*to initialize the LCD*/
void LCD_VoidInit(void)
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	a6 97       	sbiw	r28, 0x26	; 38
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e2       	ldi	r26, 0x20	; 32
    3466:	b2 e4       	ldi	r27, 0x42	; 66
    3468:	8b a3       	std	Y+35, r24	; 0x23
    346a:	9c a3       	std	Y+36, r25	; 0x24
    346c:	ad a3       	std	Y+37, r26	; 0x25
    346e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3470:	6b a1       	ldd	r22, Y+35	; 0x23
    3472:	7c a1       	ldd	r23, Y+36	; 0x24
    3474:	8d a1       	ldd	r24, Y+37	; 0x25
    3476:	9e a1       	ldd	r25, Y+38	; 0x26
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a ef       	ldi	r20, 0xFA	; 250
    347e:	54 e4       	ldi	r21, 0x44	; 68
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8f 8f       	std	Y+31, r24	; 0x1f
    348a:	98 a3       	std	Y+32, r25	; 0x20
    348c:	a9 a3       	std	Y+33, r26	; 0x21
    348e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3490:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3492:	78 a1       	ldd	r23, Y+32	; 0x20
    3494:	89 a1       	ldd	r24, Y+33	; 0x21
    3496:	9a a1       	ldd	r25, Y+34	; 0x22
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e8       	ldi	r20, 0x80	; 128
    349e:	5f e3       	ldi	r21, 0x3F	; 63
    34a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a4:	88 23       	and	r24, r24
    34a6:	2c f4       	brge	.+10     	; 0x34b2 <LCD_VoidInit+0x66>
		__ticks = 1;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9e 8f       	std	Y+30, r25	; 0x1e
    34ae:	8d 8f       	std	Y+29, r24	; 0x1d
    34b0:	3f c0       	rjmp	.+126    	; 0x3530 <LCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    34b2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    34b4:	78 a1       	ldd	r23, Y+32	; 0x20
    34b6:	89 a1       	ldd	r24, Y+33	; 0x21
    34b8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	3f ef       	ldi	r19, 0xFF	; 255
    34be:	4f e7       	ldi	r20, 0x7F	; 127
    34c0:	57 e4       	ldi	r21, 0x47	; 71
    34c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c6:	18 16       	cp	r1, r24
    34c8:	4c f5       	brge	.+82     	; 0x351c <LCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ca:	6b a1       	ldd	r22, Y+35	; 0x23
    34cc:	7c a1       	ldd	r23, Y+36	; 0x24
    34ce:	8d a1       	ldd	r24, Y+37	; 0x25
    34d0:	9e a1       	ldd	r25, Y+38	; 0x26
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e2       	ldi	r20, 0x20	; 32
    34d8:	51 e4       	ldi	r21, 0x41	; 65
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	9e 8f       	std	Y+30, r25	; 0x1e
    34f0:	8d 8f       	std	Y+29, r24	; 0x1d
    34f2:	0f c0       	rjmp	.+30     	; 0x3512 <LCD_VoidInit+0xc6>
    34f4:	88 ec       	ldi	r24, 0xC8	; 200
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	9c 8f       	std	Y+28, r25	; 0x1c
    34fa:	8b 8f       	std	Y+27, r24	; 0x1b
    34fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	f1 f7       	brne	.-4      	; 0x3500 <LCD_VoidInit+0xb4>
    3504:	9c 8f       	std	Y+28, r25	; 0x1c
    3506:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    350a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	9e 8f       	std	Y+30, r25	; 0x1e
    3510:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3514:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	69 f7       	brne	.-38     	; 0x34f4 <LCD_VoidInit+0xa8>
    351a:	14 c0       	rjmp	.+40     	; 0x3544 <LCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    351e:	78 a1       	ldd	r23, Y+32	; 0x20
    3520:	89 a1       	ldd	r24, Y+33	; 0x21
    3522:	9a a1       	ldd	r25, Y+34	; 0x22
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9e 8f       	std	Y+30, r25	; 0x1e
    352e:	8d 8f       	std	Y+29, r24	; 0x1d
    3530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3532:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3534:	9a 8f       	std	Y+26, r25	; 0x1a
    3536:	89 8f       	std	Y+25, r24	; 0x19
    3538:	89 8d       	ldd	r24, Y+25	; 0x19
    353a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <LCD_VoidInit+0xf0>
    3540:	9a 8f       	std	Y+26, r25	; 0x1a
    3542:	89 8f       	std	Y+25, r24	; 0x19
		LCD_VoidSendCommand(0b00110000);

	}
#elif NUM_LINES ==LINE2
	{
		LCD_VoidSendCommand(0b00111000);
    3544:	88 e3       	ldi	r24, 0x38	; 56
    3546:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	a8 e4       	ldi	r26, 0x48	; 72
    3550:	b2 e4       	ldi	r27, 0x42	; 66
    3552:	8d 8b       	std	Y+21, r24	; 0x15
    3554:	9e 8b       	std	Y+22, r25	; 0x16
    3556:	af 8b       	std	Y+23, r26	; 0x17
    3558:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    355a:	6d 89       	ldd	r22, Y+21	; 0x15
    355c:	7e 89       	ldd	r23, Y+22	; 0x16
    355e:	8f 89       	ldd	r24, Y+23	; 0x17
    3560:	98 8d       	ldd	r25, Y+24	; 0x18
    3562:	2b ea       	ldi	r18, 0xAB	; 171
    3564:	3a ea       	ldi	r19, 0xAA	; 170
    3566:	4a e2       	ldi	r20, 0x2A	; 42
    3568:	50 e4       	ldi	r21, 0x40	; 64
    356a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	89 8b       	std	Y+17, r24	; 0x11
    3574:	9a 8b       	std	Y+18, r25	; 0x12
    3576:	ab 8b       	std	Y+19, r26	; 0x13
    3578:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    357a:	69 89       	ldd	r22, Y+17	; 0x11
    357c:	7a 89       	ldd	r23, Y+18	; 0x12
    357e:	8b 89       	ldd	r24, Y+19	; 0x13
    3580:	9c 89       	ldd	r25, Y+20	; 0x14
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	1c f4       	brge	.+6      	; 0x3598 <LCD_VoidInit+0x14c>
		__ticks = 1;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	88 8b       	std	Y+16, r24	; 0x10
    3596:	91 c0       	rjmp	.+290    	; 0x36ba <LCD_VoidInit+0x26e>
	else if (__tmp > 255)
    3598:	69 89       	ldd	r22, Y+17	; 0x11
    359a:	7a 89       	ldd	r23, Y+18	; 0x12
    359c:	8b 89       	ldd	r24, Y+19	; 0x13
    359e:	9c 89       	ldd	r25, Y+20	; 0x14
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4f e7       	ldi	r20, 0x7F	; 127
    35a6:	53 e4       	ldi	r21, 0x43	; 67
    35a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ac:	18 16       	cp	r1, r24
    35ae:	0c f0       	brlt	.+2      	; 0x35b2 <LCD_VoidInit+0x166>
    35b0:	7b c0       	rjmp	.+246    	; 0x36a8 <LCD_VoidInit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    35b2:	6d 89       	ldd	r22, Y+21	; 0x15
    35b4:	7e 89       	ldd	r23, Y+22	; 0x16
    35b6:	8f 89       	ldd	r24, Y+23	; 0x17
    35b8:	98 8d       	ldd	r25, Y+24	; 0x18
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	4a e7       	ldi	r20, 0x7A	; 122
    35c0:	54 e4       	ldi	r21, 0x44	; 68
    35c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	8c 87       	std	Y+12, r24	; 0x0c
    35cc:	9d 87       	std	Y+13, r25	; 0x0d
    35ce:	ae 87       	std	Y+14, r26	; 0x0e
    35d0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    35d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    35d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    35d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4a ef       	ldi	r20, 0xFA	; 250
    35e0:	54 e4       	ldi	r21, 0x44	; 68
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	88 87       	std	Y+8, r24	; 0x08
    35ec:	99 87       	std	Y+9, r25	; 0x09
    35ee:	aa 87       	std	Y+10, r26	; 0x0a
    35f0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35f2:	68 85       	ldd	r22, Y+8	; 0x08
    35f4:	79 85       	ldd	r23, Y+9	; 0x09
    35f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    35f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e8       	ldi	r20, 0x80	; 128
    3600:	5f e3       	ldi	r21, 0x3F	; 63
    3602:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3606:	88 23       	and	r24, r24
    3608:	2c f4       	brge	.+10     	; 0x3614 <LCD_VoidInit+0x1c8>
		__ticks = 1;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	9f 83       	std	Y+7, r25	; 0x07
    3610:	8e 83       	std	Y+6, r24	; 0x06
    3612:	3f c0       	rjmp	.+126    	; 0x3692 <LCD_VoidInit+0x246>
	else if (__tmp > 65535)
    3614:	68 85       	ldd	r22, Y+8	; 0x08
    3616:	79 85       	ldd	r23, Y+9	; 0x09
    3618:	8a 85       	ldd	r24, Y+10	; 0x0a
    361a:	9b 85       	ldd	r25, Y+11	; 0x0b
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	3f ef       	ldi	r19, 0xFF	; 255
    3620:	4f e7       	ldi	r20, 0x7F	; 127
    3622:	57 e4       	ldi	r21, 0x47	; 71
    3624:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3628:	18 16       	cp	r1, r24
    362a:	4c f5       	brge	.+82     	; 0x367e <LCD_VoidInit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362c:	6c 85       	ldd	r22, Y+12	; 0x0c
    362e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3630:	8e 85       	ldd	r24, Y+14	; 0x0e
    3632:	9f 85       	ldd	r25, Y+15	; 0x0f
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e2       	ldi	r20, 0x20	; 32
    363a:	51 e4       	ldi	r21, 0x41	; 65
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	bc 01       	movw	r22, r24
    3646:	cd 01       	movw	r24, r26
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9f 83       	std	Y+7, r25	; 0x07
    3652:	8e 83       	std	Y+6, r24	; 0x06
    3654:	0f c0       	rjmp	.+30     	; 0x3674 <LCD_VoidInit+0x228>
    3656:	88 ec       	ldi	r24, 0xC8	; 200
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	9d 83       	std	Y+5, r25	; 0x05
    365c:	8c 83       	std	Y+4, r24	; 0x04
    365e:	8c 81       	ldd	r24, Y+4	; 0x04
    3660:	9d 81       	ldd	r25, Y+5	; 0x05
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <LCD_VoidInit+0x216>
    3666:	9d 83       	std	Y+5, r25	; 0x05
    3668:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366a:	8e 81       	ldd	r24, Y+6	; 0x06
    366c:	9f 81       	ldd	r25, Y+7	; 0x07
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	9f 83       	std	Y+7, r25	; 0x07
    3672:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3674:	8e 81       	ldd	r24, Y+6	; 0x06
    3676:	9f 81       	ldd	r25, Y+7	; 0x07
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	69 f7       	brne	.-38     	; 0x3656 <LCD_VoidInit+0x20a>
    367c:	24 c0       	rjmp	.+72     	; 0x36c6 <LCD_VoidInit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367e:	68 85       	ldd	r22, Y+8	; 0x08
    3680:	79 85       	ldd	r23, Y+9	; 0x09
    3682:	8a 85       	ldd	r24, Y+10	; 0x0a
    3684:	9b 85       	ldd	r25, Y+11	; 0x0b
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	9f 83       	std	Y+7, r25	; 0x07
    3690:	8e 83       	std	Y+6, r24	; 0x06
    3692:	8e 81       	ldd	r24, Y+6	; 0x06
    3694:	9f 81       	ldd	r25, Y+7	; 0x07
    3696:	9b 83       	std	Y+3, r25	; 0x03
    3698:	8a 83       	std	Y+2, r24	; 0x02
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	9b 81       	ldd	r25, Y+3	; 0x03
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <LCD_VoidInit+0x252>
    36a2:	9b 83       	std	Y+3, r25	; 0x03
    36a4:	8a 83       	std	Y+2, r24	; 0x02
    36a6:	0f c0       	rjmp	.+30     	; 0x36c6 <LCD_VoidInit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36a8:	69 89       	ldd	r22, Y+17	; 0x11
    36aa:	7a 89       	ldd	r23, Y+18	; 0x12
    36ac:	8b 89       	ldd	r24, Y+19	; 0x13
    36ae:	9c 89       	ldd	r25, Y+20	; 0x14
    36b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	88 8b       	std	Y+16, r24	; 0x10
    36ba:	88 89       	ldd	r24, Y+16	; 0x10
    36bc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	8a 95       	dec	r24
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <LCD_VoidInit+0x274>
    36c4:	89 83       	std	Y+1, r24	; 0x01
	}
#endif

	_delay_us(50);
/*set ON/OFF Control |  Display :ON, Cursur:OFF ,Blink:OFF*/
	LCD_VoidSendCommand(0b00001100);
    36c6:	8c e0       	ldi	r24, 0x0C	; 12
    36c8:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>

	/* Display Clear */
	LCD_VoidSendCommand(0x01);
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    36d2:	a6 96       	adiw	r28, 0x26	; 38
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <LCD_VoidGoToPos>:



/*To go to defined position in the LCD */
void LCD_VoidGoToPos(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <LCD_VoidGoToPos+0x6>
    36ea:	0f 92       	push	r0
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	8a 83       	std	Y+2, r24	; 0x02
    36f2:	6b 83       	std	Y+3, r22	; 0x03
	Global_u8EnterGoToFunc=1;
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	80 93 bf 01 	sts	0x01BF, r24
	Global_u8XPos=Copy_u8XPos;
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	80 93 bd 01 	sts	0x01BD, r24
	Global_u8YPos=Copy_u8YPos;
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	80 93 be 01 	sts	0x01BE, r24
u8 Local_PositionAddress;
/*if the position in line1 the address is from  0 to 0x40 which is Y position */
	if(Copy_u8XPos==0)
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	88 23       	and	r24, r24
    370a:	19 f4       	brne	.+6      	; 0x3712 <LCD_VoidGoToPos+0x2e>
	{
		Local_PositionAddress=Copy_u8YPos;
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	06 c0       	rjmp	.+12     	; 0x371e <LCD_VoidGoToPos+0x3a>

	}
	/*if the position in line2 the address is from  0x41 to 0x67 which is yposition+0x40 */
	else if(Copy_u8XPos==1)
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	81 30       	cpi	r24, 0x01	; 1
    3716:	19 f4       	brne	.+6      	; 0x371e <LCD_VoidGoToPos+0x3a>
		{
			Local_PositionAddress=Copy_u8YPos+0x40;
    3718:	8b 81       	ldd	r24, Y+3	; 0x03
    371a:	80 5c       	subi	r24, 0xC0	; 192
    371c:	89 83       	std	Y+1, r24	; 0x01

		}
	/*we set the register DDRAM with its command which in d.s the 8th bit is 1 and the rest of bits is address*/

	LCD_VoidSendCommand(1<<7 | Local_PositionAddress);
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	80 68       	ori	r24, 0x80	; 128
    3722:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <LCD_VoidClearDisplay>:


/*To clear the LCD*/
void LCD_VoidClearDisplay(void)
{
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62
	 Global_u8Clear=1;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	80 93 bc 01 	sts	0x01BC, r24
	LCD_VoidSendCommand(1);
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <LCD_VoidCursorON>:
void LCD_VoidCursorON(void)
{
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(SOLID_CURSOR);
    3754:	8e e0       	ldi	r24, 0x0E	; 14
    3756:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <LCD_VoidCursorOFF>:
void LCD_VoidCursorOFF()
{
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(CURSOR_OFF);
    3768:	8c e0       	ldi	r24, 0x0C	; 12
    376a:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <LCD_VoidBlinkingCursorON>:
void LCD_VoidBlinkingCursorON(void)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(BLINK_CURSOR);
    377c:	8f e0       	ldi	r24, 0x0F	; 15
    377e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	08 95       	ret

00003788 <LCD_VoidDisplayON>:

void LCD_VoidDisplayON(void)
{
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(DISPLAY_ON);
    3790:	8c e0       	ldi	r24, 0x0C	; 12
    3792:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	08 95       	ret

0000379c <LCD_VoidDisplayOFF>:
void LCD_VoidDisplayOFF(void)
{
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(DISPLAY_OFF);
    37a4:	88 e0       	ldi	r24, 0x08	; 8
    37a6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>
}
    37aa:	cf 91       	pop	r28
    37ac:	df 91       	pop	r29
    37ae:	08 95       	ret

000037b0 <LCD_VoidShiftLeft>:


/*to shift the words left from defined position*/
void LCD_VoidShiftLeft(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	00 d0       	rcall	.+0      	; 0x37b6 <LCD_VoidShiftLeft+0x6>
    37b6:	00 d0       	rcall	.+0      	; 0x37b8 <LCD_VoidShiftLeft+0x8>
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	8a 83       	std	Y+2, r24	; 0x02
    37be:	6b 83       	std	Y+3, r22	; 0x03
    37c0:	4c 83       	std	Y+4, r20	; 0x04
	s8 Local_ShiftIterator=0;
    37c2:	19 82       	std	Y+1, r1	; 0x01
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator>Copy_u8YPos-Copy_u8ShiftNumber ;Local_ShiftIterator--)
    37c4:	8c 81       	ldd	r24, Y+4	; 0x04
    37c6:	89 83       	std	Y+1, r24	; 0x01
    37c8:	0b c0       	rjmp	.+22     	; 0x37e0 <LCD_VoidShiftLeft+0x30>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
    37ca:	99 81       	ldd	r25, Y+1	; 0x01
    37cc:	8b 81       	ldd	r24, Y+3	; 0x03
    37ce:	69 2f       	mov	r22, r25
    37d0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_VoidGoToPos>
		LCD_VoidSendData(' ');
    37d4:	80 e2       	ldi	r24, 0x20	; 32
    37d6:	0e 94 88 19 	call	0x3310	; 0x3310 <LCD_VoidSendData>

/*to shift the words left from defined position*/
void LCD_VoidShiftLeft(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
	s8 Local_ShiftIterator=0;
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator>Copy_u8YPos-Copy_u8ShiftNumber ;Local_ShiftIterator--)
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	81 50       	subi	r24, 0x01	; 1
    37de:	89 83       	std	Y+1, r24	; 0x01
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	48 2f       	mov	r20, r24
    37e4:	55 27       	eor	r21, r21
    37e6:	47 fd       	sbrc	r20, 7
    37e8:	50 95       	com	r21
    37ea:	8c 81       	ldd	r24, Y+4	; 0x04
    37ec:	28 2f       	mov	r18, r24
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	8a 81       	ldd	r24, Y+2	; 0x02
    37f2:	88 2f       	mov	r24, r24
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	b9 01       	movw	r22, r18
    37f8:	68 1b       	sub	r22, r24
    37fa:	79 0b       	sbc	r23, r25
    37fc:	cb 01       	movw	r24, r22
    37fe:	84 17       	cp	r24, r20
    3800:	95 07       	cpc	r25, r21
    3802:	1c f3       	brlt	.-58     	; 0x37ca <LCD_VoidShiftLeft+0x1a>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
		LCD_VoidSendData(' ');
	}
}
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <LCD_VoidShiftRight>:
/*to shift the words Right from defined position*/
void LCD_VoidShiftRight(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	00 d0       	rcall	.+0      	; 0x3818 <LCD_VoidShiftRight+0x6>
    3818:	00 d0       	rcall	.+0      	; 0x381a <LCD_VoidShiftRight+0x8>
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	8a 83       	std	Y+2, r24	; 0x02
    3820:	6b 83       	std	Y+3, r22	; 0x03
    3822:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_ShiftIterator=0;
    3824:	19 82       	std	Y+1, r1	; 0x01
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator<Copy_u8YPos+Copy_u8ShiftNumber ;Local_ShiftIterator++)
    3826:	8c 81       	ldd	r24, Y+4	; 0x04
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	0a c0       	rjmp	.+20     	; 0x3840 <LCD_VoidShiftRight+0x2e>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	69 81       	ldd	r22, Y+1	; 0x01
    3830:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_VoidGoToPos>
		LCD_VoidSendData(' ');
    3834:	80 e2       	ldi	r24, 0x20	; 32
    3836:	0e 94 88 19 	call	0x3310	; 0x3310 <LCD_VoidSendData>
}
/*to shift the words Right from defined position*/
void LCD_VoidShiftRight(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
	u8 Local_ShiftIterator=0;
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator<Copy_u8YPos+Copy_u8ShiftNumber ;Local_ShiftIterator++)
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	8f 5f       	subi	r24, 0xFF	; 255
    383e:	89 83       	std	Y+1, r24	; 0x01
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	48 2f       	mov	r20, r24
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	8c 81       	ldd	r24, Y+4	; 0x04
    3848:	28 2f       	mov	r18, r24
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	88 2f       	mov	r24, r24
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	82 0f       	add	r24, r18
    3854:	93 1f       	adc	r25, r19
    3856:	48 17       	cp	r20, r24
    3858:	59 07       	cpc	r21, r25
    385a:	44 f3       	brlt	.-48     	; 0x382c <LCD_VoidShiftRight+0x1a>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
		LCD_VoidSendData(' ');
	}
}
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	08 95       	ret

0000386a <LCD_VoidSendNumber>:
/*to convert ascii char to integer*/

void LCD_VoidSendNumber(u32 Copy_u32Char)
{
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	68 97       	sbiw	r28, 0x18	; 24
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	de bf       	out	0x3e, r29	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	cd bf       	out	0x3d, r28	; 61
    387e:	98 8f       	std	Y+24, r25	; 0x18
    3880:	8f 8b       	std	Y+23, r24	; 0x17
u8 Local_Char_Converted[16];
u32  Local_Temp=Copy_u32Char;
    3882:	8f 89       	ldd	r24, Y+23	; 0x17
    3884:	98 8d       	ldd	r25, Y+24	; 0x18
    3886:	9e 83       	std	Y+6, r25	; 0x06
    3888:	8d 83       	std	Y+5, r24	; 0x05
u8 Counter=0;
    388a:	1c 82       	std	Y+4, r1	; 0x04
    388c:	0d c0       	rjmp	.+26     	; 0x38a8 <LCD_VoidSendNumber+0x3e>
while(Local_Temp>=1)
{
    Counter++;
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	8f 5f       	subi	r24, 0xFF	; 255
    3892:	8c 83       	std	Y+4, r24	; 0x04
    Local_Temp/=10;
    3894:	8d 81       	ldd	r24, Y+5	; 0x05
    3896:	9e 81       	ldd	r25, Y+6	; 0x06
    3898:	2a e0       	ldi	r18, 0x0A	; 10
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	b9 01       	movw	r22, r18
    389e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__udivmodhi4>
    38a2:	cb 01       	movw	r24, r22
    38a4:	9e 83       	std	Y+6, r25	; 0x06
    38a6:	8d 83       	std	Y+5, r24	; 0x05
void LCD_VoidSendNumber(u32 Copy_u32Char)
{
u8 Local_Char_Converted[16];
u32  Local_Temp=Copy_u32Char;
u8 Counter=0;
while(Local_Temp>=1)
    38a8:	8d 81       	ldd	r24, Y+5	; 0x05
    38aa:	9e 81       	ldd	r25, Y+6	; 0x06
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	79 f7       	brne	.-34     	; 0x388e <LCD_VoidSendNumber+0x24>
{
    Counter++;
    Local_Temp/=10;
}
Local_Temp=Copy_u32Char;
    38b0:	8f 89       	ldd	r24, Y+23	; 0x17
    38b2:	98 8d       	ldd	r25, Y+24	; 0x18
    38b4:	9e 83       	std	Y+6, r25	; 0x06
    38b6:	8d 83       	std	Y+5, r24	; 0x05

	for(u8 i=0;i<Counter;i++)
    38b8:	1b 82       	std	Y+3, r1	; 0x03
    38ba:	1e c0       	rjmp	.+60     	; 0x38f8 <LCD_VoidSendNumber+0x8e>
		{

			Local_Char_Converted[i]=Local_Temp%10+'0';
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	e8 2f       	mov	r30, r24
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	9e 81       	ldd	r25, Y+6	; 0x06
    38c6:	2a e0       	ldi	r18, 0x0A	; 10
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	b9 01       	movw	r22, r18
    38cc:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__udivmodhi4>
    38d0:	28 2f       	mov	r18, r24
    38d2:	20 5d       	subi	r18, 0xD0	; 208
    38d4:	ce 01       	movw	r24, r28
    38d6:	07 96       	adiw	r24, 0x07	; 7
    38d8:	e8 0f       	add	r30, r24
    38da:	f9 1f       	adc	r31, r25
    38dc:	20 83       	st	Z, r18

			Local_Temp/=10;
    38de:	8d 81       	ldd	r24, Y+5	; 0x05
    38e0:	9e 81       	ldd	r25, Y+6	; 0x06
    38e2:	2a e0       	ldi	r18, 0x0A	; 10
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	b9 01       	movw	r22, r18
    38e8:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__udivmodhi4>
    38ec:	cb 01       	movw	r24, r22
    38ee:	9e 83       	std	Y+6, r25	; 0x06
    38f0:	8d 83       	std	Y+5, r24	; 0x05
    Counter++;
    Local_Temp/=10;
}
Local_Temp=Copy_u32Char;

	for(u8 i=0;i<Counter;i++)
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	8f 5f       	subi	r24, 0xFF	; 255
    38f6:	8b 83       	std	Y+3, r24	; 0x03
    38f8:	9b 81       	ldd	r25, Y+3	; 0x03
    38fa:	8c 81       	ldd	r24, Y+4	; 0x04
    38fc:	98 17       	cp	r25, r24
    38fe:	f0 f2       	brcs	.-68     	; 0x38bc <LCD_VoidSendNumber+0x52>
			Local_Char_Converted[i]=Local_Temp%10+'0';

			Local_Temp/=10;
		}

	for (int i = Counter-1; i >=0 ; i--)
    3900:	8c 81       	ldd	r24, Y+4	; 0x04
    3902:	88 2f       	mov	r24, r24
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9a 83       	std	Y+2, r25	; 0x02
    390a:	89 83       	std	Y+1, r24	; 0x01
    390c:	0f c0       	rjmp	.+30     	; 0x392c <LCD_VoidSendNumber+0xc2>
		{
			LCD_VoidSendData(Local_Char_Converted[i]);
    390e:	29 81       	ldd	r18, Y+1	; 0x01
    3910:	3a 81       	ldd	r19, Y+2	; 0x02
    3912:	ce 01       	movw	r24, r28
    3914:	07 96       	adiw	r24, 0x07	; 7
    3916:	fc 01       	movw	r30, r24
    3918:	e2 0f       	add	r30, r18
    391a:	f3 1f       	adc	r31, r19
    391c:	80 81       	ld	r24, Z
    391e:	0e 94 88 19 	call	0x3310	; 0x3310 <LCD_VoidSendData>
			Local_Char_Converted[i]=Local_Temp%10+'0';

			Local_Temp/=10;
		}

	for (int i = Counter-1; i >=0 ; i--)
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	9a 81       	ldd	r25, Y+2	; 0x02
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	9a 81       	ldd	r25, Y+2	; 0x02
    3930:	99 23       	and	r25, r25
    3932:	6c f7       	brge	.-38     	; 0x390e <LCD_VoidSendNumber+0xa4>
		{
			LCD_VoidSendData(Local_Char_Converted[i]);
		}


}
    3934:	68 96       	adiw	r28, 0x18	; 24
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <LCD_VoidSendString>:


void LCD_VoidSendString( const u8* Copy_PtString)
{u8 Local_Counter=0;
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	00 d0       	rcall	.+0      	; 0x394c <LCD_VoidSendString+0x6>
    394c:	0f 92       	push	r0
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	9b 83       	std	Y+3, r25	; 0x03
    3954:	8a 83       	std	Y+2, r24	; 0x02
    3956:	19 82       	std	Y+1, r1	; 0x01
    3958:	0e c0       	rjmp	.+28     	; 0x3976 <LCD_VoidSendString+0x30>

    while(Copy_PtString[Local_Counter]!='\0')
    {

    	LCD_VoidSendData(Copy_PtString[Local_Counter]);
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	28 2f       	mov	r18, r24
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	8a 81       	ldd	r24, Y+2	; 0x02
    3962:	9b 81       	ldd	r25, Y+3	; 0x03
    3964:	fc 01       	movw	r30, r24
    3966:	e2 0f       	add	r30, r18
    3968:	f3 1f       	adc	r31, r19
    396a:	80 81       	ld	r24, Z
    396c:	0e 94 88 19 	call	0x3310	; 0x3310 <LCD_VoidSendData>
    	Local_Counter++;
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	8f 5f       	subi	r24, 0xFF	; 255
    3974:	89 83       	std	Y+1, r24	; 0x01


void LCD_VoidSendString( const u8* Copy_PtString)
{u8 Local_Counter=0;

    while(Copy_PtString[Local_Counter]!='\0')
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	28 2f       	mov	r18, r24
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	8a 81       	ldd	r24, Y+2	; 0x02
    397e:	9b 81       	ldd	r25, Y+3	; 0x03
    3980:	fc 01       	movw	r30, r24
    3982:	e2 0f       	add	r30, r18
    3984:	f3 1f       	adc	r31, r19
    3986:	80 81       	ld	r24, Z
    3988:	88 23       	and	r24, r24
    398a:	39 f7       	brne	.-50     	; 0x395a <LCD_VoidSendString+0x14>

    	LCD_VoidSendData(Copy_PtString[Local_Counter]);
    	Local_Counter++;
    }

}
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <LCD_VoidCreateSpecialChar>:


void LCD_VoidCreateSpecialChar(const u8 *Copy_PcDataPattern,u8 Copy_u8BlockNo,u8 Copy_u8XPos,u8 Copy_u8YPos)

{
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	27 97       	sbiw	r28, 0x07	; 7
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	9c 83       	std	Y+4, r25	; 0x04
    39ae:	8b 83       	std	Y+3, r24	; 0x03
    39b0:	6d 83       	std	Y+5, r22	; 0x05
    39b2:	4e 83       	std	Y+6, r20	; 0x06
    39b4:	2f 83       	std	Y+7, r18	; 0x07
	/*calculating the address of CGRAM which is 64 byte for 8 locations */
u8 Local_u8CGRAMAddress=8*Copy_u8BlockNo;
    39b6:	8d 81       	ldd	r24, Y+5	; 0x05
    39b8:	88 2f       	mov	r24, r24
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	88 0f       	add	r24, r24
    39c2:	99 1f       	adc	r25, r25
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	8a 83       	std	Y+2, r24	; 0x02

/*for counting in for loop*/
u8 Local_u8Iterator=0;
    39ca:	19 82       	std	Y+1, r1	; 0x01

/*Send CGRAM Address as command to LCD ,Setting bit 6,clearing bit 7 */
LCD_VoidSendCommand(1<<6 |Local_u8CGRAMAddress);
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	80 64       	ori	r24, 0x40	; 64
    39d0:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <LCD_VoidSendCommand>

/*Send Data(our pattern) in CGRAM in the address chosen above*/
 for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    39d4:	19 82       	std	Y+1, r1	; 0x01
    39d6:	0e c0       	rjmp	.+28     	; 0x39f4 <LCD_VoidCreateSpecialChar+0x5c>
	{
	 LCD_VoidSendData(Copy_PcDataPattern[Local_u8Iterator]);
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	28 2f       	mov	r18, r24
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	8b 81       	ldd	r24, Y+3	; 0x03
    39e0:	9c 81       	ldd	r25, Y+4	; 0x04
    39e2:	fc 01       	movw	r30, r24
    39e4:	e2 0f       	add	r30, r18
    39e6:	f3 1f       	adc	r31, r19
    39e8:	80 81       	ld	r24, Z
    39ea:	0e 94 88 19 	call	0x3310	; 0x3310 <LCD_VoidSendData>

/*Send CGRAM Address as command to LCD ,Setting bit 6,clearing bit 7 */
LCD_VoidSendCommand(1<<6 |Local_u8CGRAMAddress);

/*Send Data(our pattern) in CGRAM in the address chosen above*/
 for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	8f 5f       	subi	r24, 0xFF	; 255
    39f2:	89 83       	std	Y+1, r24	; 0x01
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	88 30       	cpi	r24, 0x08	; 8
    39f8:	78 f3       	brcs	.-34     	; 0x39d8 <LCD_VoidCreateSpecialChar+0x40>
	{
	 LCD_VoidSendData(Copy_PcDataPattern[Local_u8Iterator]);
	}
 /*choose the position in LCD display*/
 LCD_VoidGoToPos(Copy_u8XPos, Copy_u8YPos);
    39fa:	8e 81       	ldd	r24, Y+6	; 0x06
    39fc:	6f 81       	ldd	r22, Y+7	; 0x07
    39fe:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_VoidGoToPos>

 /*Sending data to display LCD which were written in GCRAM ,it take the location of address and take the whole block from Copy_u8BlockNo*8 to Copy_u8BlockNo*8+8*/
 LCD_VoidSendData(Copy_u8BlockNo);
    3a02:	8d 81       	ldd	r24, Y+5	; 0x05
    3a04:	0e 94 88 19 	call	0x3310	; 0x3310 <LCD_VoidSendData>
}
    3a08:	27 96       	adiw	r28, 0x07	; 7
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	cf 91       	pop	r28
    3a16:	df 91       	pop	r29
    3a18:	08 95       	ret

00003a1a <Keypad_u8GetPressedKey>:
#include "../Keypad_Module/Keypad_REG.h"



u8 Keypad_u8GetPressedKey()
{
    3a1a:	df 93       	push	r29
    3a1c:	cf 93       	push	r28
    3a1e:	00 d0       	rcall	.+0      	; 0x3a20 <Keypad_u8GetPressedKey+0x6>
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <Keypad_u8GetPressedKey+0x8>
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
	/*if not pressed return value indicate that not pressed*/
u8 Local_u8KeypadPressedStatus;
u8 Local_u8KeypadValue=TR_NOT_PRESSED;
    3a26:	8f ef       	ldi	r24, 0xFF	; 255
    3a28:	8b 83       	std	Y+3, r24	; 0x03
u8 Local_u8KeypadCoulumnIterator=0;
    3a2a:	1a 82       	std	Y+2, r1	; 0x02
u8 Local_u8KeypadRowIterator=0;
    3a2c:	19 82       	std	Y+1, r1	; 0x01
/*value showed when pressing*/
static u8 Local__u8KeypadValues[ROW_NUM][COULUMN_NUM]=ARRAY_VALUE;
static u8 Local_u8KeypadCoulums[COULUMN_NUM]={KEYPAD_COULUMN0,KEYPAD_COULUMN1,KEYPAD_COULUMN2,KEYPAD_COULUMN3};
static u8 Local_u8KeypadRows[ROW_NUM]={KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};

for(Local_u8KeypadCoulumnIterator=0;Local_u8KeypadCoulumnIterator<COULUMN_NUM;Local_u8KeypadCoulumnIterator++)
    3a2e:	1a 82       	std	Y+2, r1	; 0x02
    3a30:	5a c0       	rjmp	.+180    	; 0x3ae6 <Keypad_u8GetPressedKey+0xcc>
{
	/*Activate the coulumn seriesly*/
	DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],LOW);
    3a32:	8a 81       	ldd	r24, Y+2	; 0x02
    3a34:	88 2f       	mov	r24, r24
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	fc 01       	movw	r30, r24
    3a3a:	eb 57       	subi	r30, 0x7B	; 123
    3a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a3e:	90 81       	ld	r25, Z
    3a40:	83 e0       	ldi	r24, 0x03	; 3
    3a42:	69 2f       	mov	r22, r25
    3a44:	40 e0       	ldi	r20, 0x00	; 0
    3a46:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>

	for(Local_u8KeypadRowIterator=0;  Local_u8KeypadRowIterator<ROW_NUM ;Local_u8KeypadRowIterator++)
    3a4a:	19 82       	std	Y+1, r1	; 0x01
    3a4c:	3a c0       	rjmp	.+116    	; 0x3ac2 <Keypad_u8GetPressedKey+0xa8>
	{

     DIO_U8GetPinVal(KEYPAD_PORT,Local_u8KeypadRows[Local_u8KeypadRowIterator],&Local_u8KeypadPressedStatus);
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	88 2f       	mov	r24, r24
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	fc 01       	movw	r30, r24
    3a56:	ef 57       	subi	r30, 0x7F	; 127
    3a58:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5a:	90 81       	ld	r25, Z
    3a5c:	9e 01       	movw	r18, r28
    3a5e:	2c 5f       	subi	r18, 0xFC	; 252
    3a60:	3f 4f       	sbci	r19, 0xFF	; 255
    3a62:	83 e0       	ldi	r24, 0x03	; 3
    3a64:	69 2f       	mov	r22, r25
    3a66:	a9 01       	movw	r20, r18
    3a68:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <DIO_U8GetPinVal>
     /*if we pressed on button the coulomn selected in for loop 1 which indicate the button pushed here */
       if(Local_u8KeypadPressedStatus==LOW)
    3a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6e:	88 23       	and	r24, r24
    3a70:	11 f5       	brne	.+68     	; 0x3ab6 <Keypad_u8GetPressedKey+0x9c>
       {
    	   /*put the value of pressed key*/
    	   Local_u8KeypadValue=Local__u8KeypadValues[Local_u8KeypadRowIterator][Local_u8KeypadCoulumnIterator];
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	48 2f       	mov	r20, r24
    3a76:	50 e0       	ldi	r21, 0x00	; 0
    3a78:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7a:	28 2f       	mov	r18, r24
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	ca 01       	movw	r24, r20
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	82 0f       	add	r24, r18
    3a8a:	93 1f       	adc	r25, r19
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	e7 57       	subi	r30, 0x77	; 119
    3a90:	fe 4f       	sbci	r31, 0xFE	; 254
    3a92:	80 81       	ld	r24, Z
    3a94:	8b 83       	std	Y+3, r24	; 0x03
    3a96:	0f c0       	rjmp	.+30     	; 0x3ab6 <Keypad_u8GetPressedKey+0x9c>
       }
       /*polling to indicate that user pull your hand up the button or not */
       while(Local_u8KeypadPressedStatus==LOW)
       {
    	   /*check again the user pulled up his hand or not*/
    	   DIO_U8GetPinVal(KEYPAD_PORT,Local_u8KeypadRows[Local_u8KeypadRowIterator],&Local_u8KeypadPressedStatus);
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	88 2f       	mov	r24, r24
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	ef 57       	subi	r30, 0x7F	; 127
    3aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa4:	90 81       	ld	r25, Z
    3aa6:	9e 01       	movw	r18, r28
    3aa8:	2c 5f       	subi	r18, 0xFC	; 252
    3aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3aac:	83 e0       	ldi	r24, 0x03	; 3
    3aae:	69 2f       	mov	r22, r25
    3ab0:	a9 01       	movw	r20, r18
    3ab2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <DIO_U8GetPinVal>
    	   /*put the value of pressed key*/
    	   Local_u8KeypadValue=Local__u8KeypadValues[Local_u8KeypadRowIterator][Local_u8KeypadCoulumnIterator];

       }
       /*polling to indicate that user pull your hand up the button or not */
       while(Local_u8KeypadPressedStatus==LOW)
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	88 23       	and	r24, r24
    3aba:	71 f3       	breq	.-36     	; 0x3a98 <Keypad_u8GetPressedKey+0x7e>
for(Local_u8KeypadCoulumnIterator=0;Local_u8KeypadCoulumnIterator<COULUMN_NUM;Local_u8KeypadCoulumnIterator++)
{
	/*Activate the coulumn seriesly*/
	DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],LOW);

	for(Local_u8KeypadRowIterator=0;  Local_u8KeypadRowIterator<ROW_NUM ;Local_u8KeypadRowIterator++)
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	8f 5f       	subi	r24, 0xFF	; 255
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	84 30       	cpi	r24, 0x04	; 4
    3ac6:	18 f2       	brcs	.-122    	; 0x3a4e <Keypad_u8GetPressedKey+0x34>
       }
      // return Local_u8KeypadValue;

	}
	/*Deactivate the coulumn seriesly*/
		DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],HIGH);
    3ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aca:	88 2f       	mov	r24, r24
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	fc 01       	movw	r30, r24
    3ad0:	eb 57       	subi	r30, 0x7B	; 123
    3ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad4:	90 81       	ld	r25, Z
    3ad6:	83 e0       	ldi	r24, 0x03	; 3
    3ad8:	69 2f       	mov	r22, r25
    3ada:	41 e0       	ldi	r20, 0x01	; 1
    3adc:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
/*value showed when pressing*/
static u8 Local__u8KeypadValues[ROW_NUM][COULUMN_NUM]=ARRAY_VALUE;
static u8 Local_u8KeypadCoulums[COULUMN_NUM]={KEYPAD_COULUMN0,KEYPAD_COULUMN1,KEYPAD_COULUMN2,KEYPAD_COULUMN3};
static u8 Local_u8KeypadRows[ROW_NUM]={KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};

for(Local_u8KeypadCoulumnIterator=0;Local_u8KeypadCoulumnIterator<COULUMN_NUM;Local_u8KeypadCoulumnIterator++)
    3ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae2:	8f 5f       	subi	r24, 0xFF	; 255
    3ae4:	8a 83       	std	Y+2, r24	; 0x02
    3ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae8:	84 30       	cpi	r24, 0x04	; 4
    3aea:	08 f4       	brcc	.+2      	; 0x3aee <Keypad_u8GetPressedKey+0xd4>
    3aec:	a2 cf       	rjmp	.-188    	; 0x3a32 <Keypad_u8GetPressedKey+0x18>
	}
	/*Deactivate the coulumn seriesly*/
		DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],HIGH);
}

return Local_u8KeypadValue;
    3aee:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <DC_MOTOR_VidRotateClockWise>:



/*if you want to rotate the motor clockwise*/
void DC_MOTOR_VidRotateClockWise(void)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,UNTI_CLOCKWISE_PIN,LOW);
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	67 e0       	ldi	r22, 0x07	; 7
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,CLOCKWISE_PIN,HIGH);
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	64 e0       	ldi	r22, 0x04	; 4
    3b14:	41 e0       	ldi	r20, 0x01	; 1
    3b16:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>

}
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <DC_MOTOR_VidRotateUntiClockWise>:

/*if you want to rotate the motor unti_clockwise*/
void DC_MOTOR_VidRotateUntiClockWise(void)
{
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,CLOCKWISE_PIN,LOW);
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	64 e0       	ldi	r22, 0x04	; 4
    3b2c:	40 e0       	ldi	r20, 0x00	; 0
    3b2e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,UNTI_CLOCKWISE_PIN,HIGH);
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	67 e0       	ldi	r22, 0x07	; 7
    3b36:	41 e0       	ldi	r20, 0x01	; 1
    3b38:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
}
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <DC_MOTOR_VidStop>:

void DC_MOTOR_VidStop(void)
{
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,CLOCKWISE_PIN,LOW);
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	64 e0       	ldi	r22, 0x04	; 4
    3b4e:	40 e0       	ldi	r20, 0x00	; 0
    3b50:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,UNTI_CLOCKWISE_PIN,LOW);
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	67 e0       	ldi	r22, 0x07	; 7
    3b58:	40 e0       	ldi	r20, 0x00	; 0
    3b5a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <DIO_U8SetPinVal>
}
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <__vector_10>:
#include "../MCAL/Timer_Driver/Timer_Config.h"
//#include "../HAL/ServoMotor_Handler/ServoMotor_Interface.h"

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    3b64:	1f 92       	push	r1
    3b66:	0f 92       	push	r0
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	0f 92       	push	r0
    3b6c:	11 24       	eor	r1, r1
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62

}
    3b76:	cf 91       	pop	r28
    3b78:	df 91       	pop	r29
    3b7a:	0f 90       	pop	r0
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	0f 90       	pop	r0
    3b80:	1f 90       	pop	r1
    3b82:	18 95       	reti

00003b84 <main>:

u16 Period_Time_Ticks=0;
u16 Ton_Time_Ticks=0;

int main(void)
{
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	cd b7       	in	r28, 0x3d	; 61
    3b8a:	de b7       	in	r29, 0x3e	; 62
PORT_VoidInit();
    3b8c:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <PORT_VoidInit>
LCD_VoidInit();
    3b90:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_VoidInit>
//EXTI_voidEnableOrDisableInterruptPin_Prebuild();
//EXTI_VidControlSense_Prebuild();
EXTI_VidEnableOrDisableGIE(ENABLE);
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <EXTI_VidEnableOrDisableGIE>
TMR0_VoidInit_Prebuild();
    3b9a:	0e 94 17 07 	call	0xe2e	; 0xe2e <TMR0_VoidInit_Prebuild>
TMR0_VoidSetCTCValue(64);
    3b9e:	80 e4       	ldi	r24, 0x40	; 64
    3ba0:	0e 94 95 07 	call	0xf2a	; 0xf2a <TMR0_VoidSetCTCValue>
TMR1_VoidInit_Prebuild();
    3ba4:	0e 94 e5 07 	call	0xfca	; 0xfca <TMR1_VoidInit_Prebuild>
//LCD_VoidSendString("Period_Time =");

while (1)
{
	//Waiting Untile The values are Ready
	while((Ton_Time_Ticks==0)&&(Period_Time_Ticks==0));
    3ba8:	80 91 c2 01 	lds	r24, 0x01C2
    3bac:	90 91 c3 01 	lds	r25, 0x01C3
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	31 f4       	brne	.+12     	; 0x3bc0 <main+0x3c>
    3bb4:	80 91 c0 01 	lds	r24, 0x01C0
    3bb8:	90 91 c1 01 	lds	r25, 0x01C1
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	a1 f3       	breq	.-24     	; 0x3ba8 <main+0x24>
	LCD_VoidGoToPos(0,0);
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	60 e0       	ldi	r22, 0x00	; 0
    3bc4:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_VoidGoToPos>
	LCD_VoidSendString("ON_Time =");
    3bc8:	80 e6       	ldi	r24, 0x60	; 96
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 a3 1c 	call	0x3946	; 0x3946 <LCD_VoidSendString>
	LCD_VoidSendNumber(Ton_Time_Ticks);
    3bd0:	80 91 c2 01 	lds	r24, 0x01C2
    3bd4:	90 91 c3 01 	lds	r25, 0x01C3
    3bd8:	0e 94 35 1c 	call	0x386a	; 0x386a <LCD_VoidSendNumber>
	LCD_VoidGoToPos(1,0);
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_VoidGoToPos>
	LCD_VoidSendString("Period_time =");
    3be4:	8a e6       	ldi	r24, 0x6A	; 106
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	0e 94 a3 1c 	call	0x3946	; 0x3946 <LCD_VoidSendString>
	LCD_VoidSendNumber(Period_Time_Ticks);
    3bec:	80 91 c0 01 	lds	r24, 0x01C0
    3bf0:	90 91 c1 01 	lds	r25, 0x01C1
    3bf4:	0e 94 35 1c 	call	0x386a	; 0x386a <LCD_VoidSendNumber>
    3bf8:	d7 cf       	rjmp	.-82     	; 0x3ba8 <main+0x24>

00003bfa <__vector_6>:
}


void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    3bfa:	1f 92       	push	r1
    3bfc:	0f 92       	push	r0
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	0f 92       	push	r0
    3c02:	11 24       	eor	r1, r1
    3c04:	2f 93       	push	r18
    3c06:	3f 93       	push	r19
    3c08:	4f 93       	push	r20
    3c0a:	5f 93       	push	r21
    3c0c:	6f 93       	push	r22
    3c0e:	7f 93       	push	r23
    3c10:	8f 93       	push	r24
    3c12:	9f 93       	push	r25
    3c14:	af 93       	push	r26
    3c16:	bf 93       	push	r27
    3c18:	ef 93       	push	r30
    3c1a:	ff 93       	push	r31
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
static u16 Local_u16Recording1;
static u16 Local_u16Recording2;
static u16 Local_u16Recording3;
static u8 Local_u8FlagState =FIRST_RISING;

   if( Local_u8FlagState ==FIRST_RISING)
    3c24:	80 91 c4 01 	lds	r24, 0x01C4
    3c28:	88 23       	and	r24, r24
    3c2a:	69 f4       	brne	.+26     	; 0x3c46 <__vector_6+0x4c>
{
	Local_u16Recording1=TMR1_VoidReadInputCapture();
    3c2c:	0e 94 ae 08 	call	0x115c	; 0x115c <TMR1_VoidReadInputCapture>
    3c30:	90 93 ca 01 	sts	0x01CA, r25
    3c34:	80 93 c9 01 	sts	0x01C9, r24
	TMR1_VoidSetInputCaptureEdge(CAPTURE_EDGE_DETECTION_FALLING);
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	0e 94 76 08 	call	0x10ec	; 0x10ec <TMR1_VoidSetInputCaptureEdge>
	Local_u8FlagState=FALLING_1;
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	80 93 c4 01 	sts	0x01C4, r24
    3c44:	3d c0       	rjmp	.+122    	; 0x3cc0 <__vector_6+0xc6>
}
else if(Local_u8FlagState==FALLING_1)
    3c46:	80 91 c4 01 	lds	r24, 0x01C4
    3c4a:	81 30       	cpi	r24, 0x01	; 1
    3c4c:	e9 f4       	brne	.+58     	; 0x3c88 <__vector_6+0x8e>
{
	Local_u16Recording2=TMR1_VoidReadInputCapture();
    3c4e:	0e 94 ae 08 	call	0x115c	; 0x115c <TMR1_VoidReadInputCapture>
    3c52:	90 93 c8 01 	sts	0x01C8, r25
    3c56:	80 93 c7 01 	sts	0x01C7, r24
	Ton_Time_Ticks=Local_u16Recording2-Local_u16Recording1;
    3c5a:	20 91 c7 01 	lds	r18, 0x01C7
    3c5e:	30 91 c8 01 	lds	r19, 0x01C8
    3c62:	80 91 c9 01 	lds	r24, 0x01C9
    3c66:	90 91 ca 01 	lds	r25, 0x01CA
    3c6a:	a9 01       	movw	r20, r18
    3c6c:	48 1b       	sub	r20, r24
    3c6e:	59 0b       	sbc	r21, r25
    3c70:	ca 01       	movw	r24, r20
    3c72:	90 93 c3 01 	sts	0x01C3, r25
    3c76:	80 93 c2 01 	sts	0x01C2, r24
	TMR1_VoidSetInputCaptureEdge(CAPTURE_EDGE_DETECTION_RISING);
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	0e 94 76 08 	call	0x10ec	; 0x10ec <TMR1_VoidSetInputCaptureEdge>
	 Local_u8FlagState=RISING_2;
    3c80:	82 e0       	ldi	r24, 0x02	; 2
    3c82:	80 93 c4 01 	sts	0x01C4, r24
    3c86:	1c c0       	rjmp	.+56     	; 0x3cc0 <__vector_6+0xc6>

}
else if(Local_u8FlagState ==RISING_2)
    3c88:	80 91 c4 01 	lds	r24, 0x01C4
    3c8c:	82 30       	cpi	r24, 0x02	; 2
    3c8e:	c1 f4       	brne	.+48     	; 0x3cc0 <__vector_6+0xc6>
{
	Local_u16Recording3=TMR1_VoidReadInputCapture();
    3c90:	0e 94 ae 08 	call	0x115c	; 0x115c <TMR1_VoidReadInputCapture>
    3c94:	90 93 c6 01 	sts	0x01C6, r25
    3c98:	80 93 c5 01 	sts	0x01C5, r24
	Period_Time_Ticks=Local_u16Recording3-Local_u16Recording1;
    3c9c:	20 91 c5 01 	lds	r18, 0x01C5
    3ca0:	30 91 c6 01 	lds	r19, 0x01C6
    3ca4:	80 91 c9 01 	lds	r24, 0x01C9
    3ca8:	90 91 ca 01 	lds	r25, 0x01CA
    3cac:	a9 01       	movw	r20, r18
    3cae:	48 1b       	sub	r20, r24
    3cb0:	59 0b       	sbc	r21, r25
    3cb2:	ca 01       	movw	r24, r20
    3cb4:	90 93 c1 01 	sts	0x01C1, r25
    3cb8:	80 93 c0 01 	sts	0x01C0, r24
	//TMR1_VoidSetInputCaptureEdge(CAPTURE_EDGE_DETECTION_FALLING);
	Local_u8FlagState=FIRST_RISING;
    3cbc:	10 92 c4 01 	sts	0x01C4, r1

}
}
    3cc0:	cf 91       	pop	r28
    3cc2:	df 91       	pop	r29
    3cc4:	ff 91       	pop	r31
    3cc6:	ef 91       	pop	r30
    3cc8:	bf 91       	pop	r27
    3cca:	af 91       	pop	r26
    3ccc:	9f 91       	pop	r25
    3cce:	8f 91       	pop	r24
    3cd0:	7f 91       	pop	r23
    3cd2:	6f 91       	pop	r22
    3cd4:	5f 91       	pop	r21
    3cd6:	4f 91       	pop	r20
    3cd8:	3f 91       	pop	r19
    3cda:	2f 91       	pop	r18
    3cdc:	0f 90       	pop	r0
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	0f 90       	pop	r0
    3ce2:	1f 90       	pop	r1
    3ce4:	18 95       	reti

00003ce6 <__udivmodhi4>:
    3ce6:	aa 1b       	sub	r26, r26
    3ce8:	bb 1b       	sub	r27, r27
    3cea:	51 e1       	ldi	r21, 0x11	; 17
    3cec:	07 c0       	rjmp	.+14     	; 0x3cfc <__udivmodhi4_ep>

00003cee <__udivmodhi4_loop>:
    3cee:	aa 1f       	adc	r26, r26
    3cf0:	bb 1f       	adc	r27, r27
    3cf2:	a6 17       	cp	r26, r22
    3cf4:	b7 07       	cpc	r27, r23
    3cf6:	10 f0       	brcs	.+4      	; 0x3cfc <__udivmodhi4_ep>
    3cf8:	a6 1b       	sub	r26, r22
    3cfa:	b7 0b       	sbc	r27, r23

00003cfc <__udivmodhi4_ep>:
    3cfc:	88 1f       	adc	r24, r24
    3cfe:	99 1f       	adc	r25, r25
    3d00:	5a 95       	dec	r21
    3d02:	a9 f7       	brne	.-22     	; 0x3cee <__udivmodhi4_loop>
    3d04:	80 95       	com	r24
    3d06:	90 95       	com	r25
    3d08:	bc 01       	movw	r22, r24
    3d0a:	cd 01       	movw	r24, r26
    3d0c:	08 95       	ret

00003d0e <__divmodhi4>:
    3d0e:	97 fb       	bst	r25, 7
    3d10:	09 2e       	mov	r0, r25
    3d12:	07 26       	eor	r0, r23
    3d14:	0a d0       	rcall	.+20     	; 0x3d2a <__divmodhi4_neg1>
    3d16:	77 fd       	sbrc	r23, 7
    3d18:	04 d0       	rcall	.+8      	; 0x3d22 <__divmodhi4_neg2>
    3d1a:	e5 df       	rcall	.-54     	; 0x3ce6 <__udivmodhi4>
    3d1c:	06 d0       	rcall	.+12     	; 0x3d2a <__divmodhi4_neg1>
    3d1e:	00 20       	and	r0, r0
    3d20:	1a f4       	brpl	.+6      	; 0x3d28 <__divmodhi4_exit>

00003d22 <__divmodhi4_neg2>:
    3d22:	70 95       	com	r23
    3d24:	61 95       	neg	r22
    3d26:	7f 4f       	sbci	r23, 0xFF	; 255

00003d28 <__divmodhi4_exit>:
    3d28:	08 95       	ret

00003d2a <__divmodhi4_neg1>:
    3d2a:	f6 f7       	brtc	.-4      	; 0x3d28 <__divmodhi4_exit>
    3d2c:	90 95       	com	r25
    3d2e:	81 95       	neg	r24
    3d30:	9f 4f       	sbci	r25, 0xFF	; 255
    3d32:	08 95       	ret

00003d34 <__prologue_saves__>:
    3d34:	2f 92       	push	r2
    3d36:	3f 92       	push	r3
    3d38:	4f 92       	push	r4
    3d3a:	5f 92       	push	r5
    3d3c:	6f 92       	push	r6
    3d3e:	7f 92       	push	r7
    3d40:	8f 92       	push	r8
    3d42:	9f 92       	push	r9
    3d44:	af 92       	push	r10
    3d46:	bf 92       	push	r11
    3d48:	cf 92       	push	r12
    3d4a:	df 92       	push	r13
    3d4c:	ef 92       	push	r14
    3d4e:	ff 92       	push	r15
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
    3d5c:	ca 1b       	sub	r28, r26
    3d5e:	db 0b       	sbc	r29, r27
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	09 94       	ijmp

00003d6c <__epilogue_restores__>:
    3d6c:	2a 88       	ldd	r2, Y+18	; 0x12
    3d6e:	39 88       	ldd	r3, Y+17	; 0x11
    3d70:	48 88       	ldd	r4, Y+16	; 0x10
    3d72:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d74:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d76:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d78:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d7e:	b9 84       	ldd	r11, Y+9	; 0x09
    3d80:	c8 84       	ldd	r12, Y+8	; 0x08
    3d82:	df 80       	ldd	r13, Y+7	; 0x07
    3d84:	ee 80       	ldd	r14, Y+6	; 0x06
    3d86:	fd 80       	ldd	r15, Y+5	; 0x05
    3d88:	0c 81       	ldd	r16, Y+4	; 0x04
    3d8a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d8c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d8e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d90:	ce 0f       	add	r28, r30
    3d92:	d1 1d       	adc	r29, r1
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	f8 94       	cli
    3d98:	de bf       	out	0x3e, r29	; 62
    3d9a:	0f be       	out	0x3f, r0	; 63
    3d9c:	cd bf       	out	0x3d, r28	; 61
    3d9e:	ed 01       	movw	r28, r26
    3da0:	08 95       	ret

00003da2 <_exit>:
    3da2:	f8 94       	cli

00003da4 <__stop_program>:
    3da4:	ff cf       	rjmp	.-2      	; 0x3da4 <__stop_program>

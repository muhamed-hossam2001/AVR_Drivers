
Interrupt_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000d90  2**0
                  ALLOC
  2 .stab         00001500  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e29  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_1>
   8:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_2>
   c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <main>
  74:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <PORT_VoidInit>:
#include "PORT_Interface.h"
#include "PORT_REG.h"
#include "PORT_private.h"

void PORT_VoidInit()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
DDRA_REG=PORTA_DIR;
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	83 ef       	ldi	r24, 0xF3	; 243
  8a:	80 83       	st	Z, r24
DDRB_REG=PORTB_DIR;
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
DDRC_REG=PORTC_DIR;
  92:	e4 e3       	ldi	r30, 0x34	; 52
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24
DDRD_REG=PORTD_DIR;
  9a:	e1 e3       	ldi	r30, 0x31	; 49
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8b ef       	ldi	r24, 0xFB	; 251
  a0:	80 83       	st	Z, r24

PORTA_REG_INITIAL=PORTA_INITIAL_VALUE;
  a2:	eb e3       	ldi	r30, 0x3B	; 59
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8c ef       	ldi	r24, 0xFC	; 252
  a8:	80 83       	st	Z, r24
PORTB_REG_INITIAL=PORTB_INITIAL_VALUE;
  aa:	e8 e3       	ldi	r30, 0x38	; 56
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
PORTC_REG_INITIAL=PORTC_INITIAL_VALUE;
  b0:	e5 e3       	ldi	r30, 0x35	; 53
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
PORTD_REG_INITIAL=PORTD_INITIAL_VALUE;
  b6:	e2 e3       	ldi	r30, 0x32	; 50
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	80 83       	st	Z, r24

}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <EXTI_VidEnableOrDisableGIE>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Interface.h"
#include "GIE_REG.h"

void EXTI_VidEnableOrDisableGIE(u8 Copy_u8EN_DIS)
{
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	0f 92       	push	r0
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8EN_DIS==ENABLE)
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	41 f4       	brne	.+16     	; 0xe6 <EXTI_VidEnableOrDisableGIE+0x22>
		{
			SET_BIT(SREG_REG,SREG_I_BIT);
  d6:	af e5       	ldi	r26, 0x5F	; 95
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ef e5       	ldi	r30, 0x5F	; 95
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	8c 93       	st	X, r24
  e4:	0a c0       	rjmp	.+20     	; 0xfa <EXTI_VidEnableOrDisableGIE+0x36>

		}
	else if( Copy_u8EN_DIS==DISABLE)
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	39 f4       	brne	.+14     	; 0xfa <EXTI_VidEnableOrDisableGIE+0x36>
		{
		    CLR_BIT(SREG_REG,SREG_I_BIT);
  ec:	af e5       	ldi	r26, 0x5F	; 95
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ef e5       	ldi	r30, 0x5F	; 95
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	8c 93       	st	X, r24
		}
}
  fa:	0f 90       	pop	r0
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <EXTI_u8EnableOrDisableInterruptPin_Postbuild>:
#include "External_Interrupt_Config.h"
#include "../DIO_Driver/DIO_REG.h"
#include "../DIO_Driver/DIO_Interface.h"

u8 EXTI_u8EnableOrDisableInterruptPin_Postbuild(u8 Copy_u8INTNum,u8 Copy_u8EN_DIS)
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	27 97       	sbiw	r28, 0x07	; 7
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	8a 83       	std	Y+2, r24	; 0x02
 118:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Status=RT_OK;
 11a:	19 82       	std	Y+1, r1	; 0x01
if (Copy_u8EN_DIS==ENABLE)
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	a9 f5       	brne	.+106    	; 0x18c <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x8a>
	{
	    /*GIE  Enable*/
		SET_BIT(SREG_REG,SREG_I_BIT);
 122:	af e5       	ldi	r26, 0x5F	; 95
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	ef e5       	ldi	r30, 0x5F	; 95
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8c 93       	st	X, r24
		switch(Copy_u8INTNum)
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	3f 83       	std	Y+7, r19	; 0x07
 138:	2e 83       	std	Y+6, r18	; 0x06
 13a:	8e 81       	ldd	r24, Y+6	; 0x06
 13c:	9f 81       	ldd	r25, Y+7	; 0x07
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 05       	cpc	r25, r1
 142:	89 f0       	breq	.+34     	; 0x166 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x64>
 144:	2e 81       	ldd	r18, Y+6	; 0x06
 146:	3f 81       	ldd	r19, Y+7	; 0x07
 148:	22 30       	cpi	r18, 0x02	; 2
 14a:	31 05       	cpc	r19, r1
 14c:	a1 f0       	breq	.+40     	; 0x176 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x74>
 14e:	8e 81       	ldd	r24, Y+6	; 0x06
 150:	9f 81       	ldd	r25, Y+7	; 0x07
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	c1 f4       	brne	.+48     	; 0x186 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x84>
		{
		case INT0:{SET_BIT(GICR_REG,GICR_INT0); break;}
 156:	ab e5       	ldi	r26, 0x5B	; 91
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	eb e5       	ldi	r30, 0x5B	; 91
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	8c 93       	st	X, r24
 164:	46 c0       	rjmp	.+140    	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT1:{SET_BIT(GICR_REG,GICR_INT1); break;}
 166:	ab e5       	ldi	r26, 0x5B	; 91
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	eb e5       	ldi	r30, 0x5B	; 91
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 68       	ori	r24, 0x80	; 128
 172:	8c 93       	st	X, r24
 174:	3e c0       	rjmp	.+124    	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT2:{SET_BIT(GICR_REG,GICR_INT2); break;}
 176:	ab e5       	ldi	r26, 0x5B	; 91
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	eb e5       	ldi	r30, 0x5B	; 91
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 62       	ori	r24, 0x20	; 32
 182:	8c 93       	st	X, r24
 184:	36 c0       	rjmp	.+108    	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		default:{Local_u8Status=RT_NOK;}
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	33 c0       	rjmp	.+102    	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		}
	}
else if( Copy_u8EN_DIS==DISABLE)
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	88 23       	and	r24, r24
 190:	71 f5       	brne	.+92     	; 0x1ee <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xec>
	{

		switch(Copy_u8INTNum)
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	3d 83       	std	Y+5, r19	; 0x05
 19a:	2c 83       	std	Y+4, r18	; 0x04
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	9d 81       	ldd	r25, Y+5	; 0x05
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	91 05       	cpc	r25, r1
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xc6>
 1a6:	2c 81       	ldd	r18, Y+4	; 0x04
 1a8:	3d 81       	ldd	r19, Y+5	; 0x05
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	31 05       	cpc	r19, r1
 1ae:	a1 f0       	breq	.+40     	; 0x1d8 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xd6>
 1b0:	8c 81       	ldd	r24, Y+4	; 0x04
 1b2:	9d 81       	ldd	r25, Y+5	; 0x05
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	c1 f4       	brne	.+48     	; 0x1e8 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xe6>
		{
		case INT0:{CLR_BIT(GICR_REG,GICR_INT0); break;}
 1b8:	ab e5       	ldi	r26, 0x5B	; 91
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	eb e5       	ldi	r30, 0x5B	; 91
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 7b       	andi	r24, 0xBF	; 191
 1c4:	8c 93       	st	X, r24
 1c6:	15 c0       	rjmp	.+42     	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT1:{CLR_BIT(GICR_REG,GICR_INT1); break;}
 1c8:	ab e5       	ldi	r26, 0x5B	; 91
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	eb e5       	ldi	r30, 0x5B	; 91
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	8f 77       	andi	r24, 0x7F	; 127
 1d4:	8c 93       	st	X, r24
 1d6:	0d c0       	rjmp	.+26     	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT2:{CLR_BIT(GICR_REG,GICR_INT2); break;}
 1d8:	ab e5       	ldi	r26, 0x5B	; 91
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	eb e5       	ldi	r30, 0x5B	; 91
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7d       	andi	r24, 0xDF	; 223
 1e4:	8c 93       	st	X, r24
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		default:{Local_u8Status=RT_NOK;}
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		}
	}
else
	{
	  Local_u8Status=RT_NOK;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_u8Status;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01

}
 1f4:	27 96       	adiw	r28, 0x07	; 7
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

00000206 <EXTI_voidEnableOrDisableInterruptPin_Prebuild>:

void EXTI_voidEnableOrDisableInterruptPin_Prebuild()
{
 206:	df 93       	push	r29
 208:	cf 93       	push	r28
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
/*Configuration for INT0*/
#if INT0_INITAIL_STATE==ENABLE
	{
		SET_BIT(SREG_REG,SREG_I_BIT);
 20e:	af e5       	ldi	r26, 0x5F	; 95
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	ef e5       	ldi	r30, 0x5F	; 95
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,GICR_INT0);
 21c:	ab e5       	ldi	r26, 0x5B	; 91
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	eb e5       	ldi	r30, 0x5B	; 91
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 64       	ori	r24, 0x40	; 64
 228:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,GICR_INT1);

	}
#elif( INT1_INITAIL_STATE==DISABLE)
	{
		CLR_BIT(GICR_REG,GICR_INT1);
 22a:	ab e5       	ldi	r26, 0x5B	; 91
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	eb e5       	ldi	r30, 0x5B	; 91
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8f 77       	andi	r24, 0x7F	; 127
 236:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,GICR_INT2);

	}
#elif( INT2_INITAIL_STATE==DISABLE)
	{
		CLR_BIT(GICR_REG,GICR_INT2);
 238:	ab e5       	ldi	r26, 0x5B	; 91
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	eb e5       	ldi	r30, 0x5B	; 91
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8f 7d       	andi	r24, 0xDF	; 223
 244:	8c 93       	st	X, r24
	}
#endif


}
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

0000024c <EXTI_u8ControlSense_Postbuild>:

u8 EXTI_u8ControlSense_Postbuild(u8 Copy_u8INTNum,u8 Copy_u8Sense)
{
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	2e 97       	sbiw	r28, 0x0e	; 14
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	8b 83       	std	Y+3, r24	; 0x03
 262:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Status=RT_OK;
 264:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TempReg = MCUCR_REG;
 266:	e5 e5       	ldi	r30, 0x55	; 85
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Sense)
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	3e 87       	std	Y+14, r19	; 0x0e
 276:	2d 87       	std	Y+13, r18	; 0x0d
 278:	8d 85       	ldd	r24, Y+13	; 0x0d
 27a:	9e 85       	ldd	r25, Y+14	; 0x0e
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	91 05       	cpc	r25, r1
 280:	c9 f1       	breq	.+114    	; 0x2f4 <EXTI_u8ControlSense_Postbuild+0xa8>
 282:	2d 85       	ldd	r18, Y+13	; 0x0d
 284:	3e 85       	ldd	r19, Y+14	; 0x0e
 286:	22 30       	cpi	r18, 0x02	; 2
 288:	31 05       	cpc	r19, r1
 28a:	2c f4       	brge	.+10     	; 0x296 <EXTI_u8ControlSense_Postbuild+0x4a>
 28c:	8d 85       	ldd	r24, Y+13	; 0x0d
 28e:	9e 85       	ldd	r25, Y+14	; 0x0e
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	71 f0       	breq	.+28     	; 0x2b0 <EXTI_u8ControlSense_Postbuild+0x64>
 294:	bf c0       	rjmp	.+382    	; 0x414 <EXTI_u8ControlSense_Postbuild+0x1c8>
 296:	2d 85       	ldd	r18, Y+13	; 0x0d
 298:	3e 85       	ldd	r19, Y+14	; 0x0e
 29a:	22 30       	cpi	r18, 0x02	; 2
 29c:	31 05       	cpc	r19, r1
 29e:	09 f4       	brne	.+2      	; 0x2a2 <EXTI_u8ControlSense_Postbuild+0x56>
 2a0:	51 c0       	rjmp	.+162    	; 0x344 <EXTI_u8ControlSense_Postbuild+0xf8>
 2a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	91 05       	cpc	r25, r1
 2aa:	09 f4       	brne	.+2      	; 0x2ae <EXTI_u8ControlSense_Postbuild+0x62>
 2ac:	7f c0       	rjmp	.+254    	; 0x3ac <EXTI_u8ControlSense_Postbuild+0x160>
 2ae:	b2 c0       	rjmp	.+356    	; 0x414 <EXTI_u8ControlSense_Postbuild+0x1c8>
	{
		case LOW_LEVEL:
		{
			switch(Copy_u8INTNum)
 2b0:	8b 81       	ldd	r24, Y+3	; 0x03
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	3c 87       	std	Y+12, r19	; 0x0c
 2b8:	2b 87       	std	Y+11, r18	; 0x0b
 2ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 2bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	31 f0       	breq	.+12     	; 0x2ce <EXTI_u8ControlSense_Postbuild+0x82>
 2c2:	2b 85       	ldd	r18, Y+11	; 0x0b
 2c4:	3c 85       	ldd	r19, Y+12	; 0x0c
 2c6:	21 30       	cpi	r18, 0x01	; 1
 2c8:	31 05       	cpc	r19, r1
 2ca:	49 f0       	breq	.+18     	; 0x2de <EXTI_u8ControlSense_Postbuild+0x92>
 2cc:	10 c0       	rjmp	.+32     	; 0x2ee <EXTI_u8ControlSense_Postbuild+0xa2>
				{
				case INT0:{	Local_u8TempReg&=INT0_SENSE_MASK;
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	8c 7f       	andi	r24, 0xFC	; 252
 2d2:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOW_LEVEL_INT01<<MCUCR_ISC01_ISC00_SELECT);
							MCUCR_REG=Local_u8TempReg;
 2d4:	e5 e5       	ldi	r30, 0x55	; 85
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	80 83       	st	Z, r24
 2dc:	9d c0       	rjmp	.+314    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>

							break;
						   }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	83 7f       	andi	r24, 0xF3	; 243
 2e2:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOW_LEVEL_INT01<<MCUCR_ISC11_ISC10_SELECT);
							MCUCR_REG=Local_u8TempReg;
 2e4:	e5 e5       	ldi	r30, 0x55	; 85
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	80 83       	st	Z, r24
 2ec:	95 c0       	rjmp	.+298    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>

							break;
						  }
				default:{Local_u8Status=RT_NOK;}
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8a 83       	std	Y+2, r24	; 0x02
 2f2:	92 c0       	rjmp	.+292    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
		break;
		}
		case LOGICAL_CHANGE:
		{
			switch(Copy_u8INTNum)
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	3a 87       	std	Y+10, r19	; 0x0a
 2fc:	29 87       	std	Y+9, r18	; 0x09
 2fe:	89 85       	ldd	r24, Y+9	; 0x09
 300:	9a 85       	ldd	r25, Y+10	; 0x0a
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	31 f0       	breq	.+12     	; 0x312 <EXTI_u8ControlSense_Postbuild+0xc6>
 306:	29 85       	ldd	r18, Y+9	; 0x09
 308:	3a 85       	ldd	r19, Y+10	; 0x0a
 30a:	21 30       	cpi	r18, 0x01	; 1
 30c:	31 05       	cpc	r19, r1
 30e:	61 f0       	breq	.+24     	; 0x328 <EXTI_u8ControlSense_Postbuild+0xdc>
 310:	16 c0       	rjmp	.+44     	; 0x33e <EXTI_u8ControlSense_Postbuild+0xf2>
				{
				case INT0:{
							Local_u8TempReg&=INT0_SENSE_MASK;
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	8c 7f       	andi	r24, 0xFC	; 252
 316:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOGICAL_CHANGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
 31e:	e5 e5       	ldi	r30, 0x55	; 85
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	80 83       	st	Z, r24
 326:	78 c0       	rjmp	.+240    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	83 7f       	andi	r24, 0xF3	; 243
 32c:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(LOGICAL_CHANGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	84 60       	ori	r24, 0x04	; 4
 332:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
 334:	e5 e5       	ldi	r30, 0x55	; 85
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	80 83       	st	Z, r24
 33c:	6d c0       	rjmp	.+218    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				default:{Local_u8Status=RT_NOK;}
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	8a 83       	std	Y+2, r24	; 0x02
 342:	6a c0       	rjmp	.+212    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
			break;
		}
		case FALLING_EDGE:
		{
			switch(Copy_u8INTNum)
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	38 87       	std	Y+8, r19	; 0x08
 34c:	2f 83       	std	Y+7, r18	; 0x07
 34e:	8f 81       	ldd	r24, Y+7	; 0x07
 350:	98 85       	ldd	r25, Y+8	; 0x08
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	91 05       	cpc	r25, r1
 356:	a1 f0       	breq	.+40     	; 0x380 <EXTI_u8ControlSense_Postbuild+0x134>
 358:	2f 81       	ldd	r18, Y+7	; 0x07
 35a:	38 85       	ldd	r19, Y+8	; 0x08
 35c:	22 30       	cpi	r18, 0x02	; 2
 35e:	31 05       	cpc	r19, r1
 360:	d1 f0       	breq	.+52     	; 0x396 <EXTI_u8ControlSense_Postbuild+0x14a>
 362:	8f 81       	ldd	r24, Y+7	; 0x07
 364:	98 85       	ldd	r25, Y+8	; 0x08
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	f1 f4       	brne	.+60     	; 0x3a6 <EXTI_u8ControlSense_Postbuild+0x15a>
				{
				case INT0:{
							Local_u8TempReg&=INT0_SENSE_MASK;
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	8c 7f       	andi	r24, 0xFC	; 252
 36e:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(FALLING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	82 60       	ori	r24, 0x02	; 2
 374:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
 376:	e5 e5       	ldi	r30, 0x55	; 85
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	80 83       	st	Z, r24
 37e:	4c c0       	rjmp	.+152    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	83 7f       	andi	r24, 0xF3	; 243
 384:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(FALLING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
 38c:	e5 e5       	ldi	r30, 0x55	; 85
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	80 83       	st	Z, r24
 394:	41 c0       	rjmp	.+130    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT2:{CLR_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT); break;}
 396:	a4 e5       	ldi	r26, 0x54	; 84
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e4 e5       	ldi	r30, 0x54	; 84
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	8f 7b       	andi	r24, 0xBF	; 191
 3a2:	8c 93       	st	X, r24
 3a4:	39 c0       	rjmp	.+114    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
				default:{Local_u8Status=RT_NOK;}
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	8a 83       	std	Y+2, r24	; 0x02
 3aa:	36 c0       	rjmp	.+108    	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
			break;
		}
		case RISING_EDGE:
		{
			switch(Copy_u8INTNum)
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	28 2f       	mov	r18, r24
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	3e 83       	std	Y+6, r19	; 0x06
 3b4:	2d 83       	std	Y+5, r18	; 0x05
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	91 05       	cpc	r25, r1
 3be:	a1 f0       	breq	.+40     	; 0x3e8 <EXTI_u8ControlSense_Postbuild+0x19c>
 3c0:	2d 81       	ldd	r18, Y+5	; 0x05
 3c2:	3e 81       	ldd	r19, Y+6	; 0x06
 3c4:	22 30       	cpi	r18, 0x02	; 2
 3c6:	31 05       	cpc	r19, r1
 3c8:	d1 f0       	breq	.+52     	; 0x3fe <EXTI_u8ControlSense_Postbuild+0x1b2>
 3ca:	8d 81       	ldd	r24, Y+5	; 0x05
 3cc:	9e 81       	ldd	r25, Y+6	; 0x06
 3ce:	00 97       	sbiw	r24, 0x00	; 0
 3d0:	f1 f4       	brne	.+60     	; 0x40e <EXTI_u8ControlSense_Postbuild+0x1c2>
				{
				case INT0:{

							Local_u8TempReg&=INT0_SENSE_MASK;
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	8c 7f       	andi	r24, 0xFC	; 252
 3d6:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(RISING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	83 60       	ori	r24, 0x03	; 3
 3dc:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
 3de:	e5 e5       	ldi	r30, 0x55	; 85
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	80 83       	st	Z, r24
 3e6:	18 c0       	rjmp	.+48     	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT1:{
							Local_u8TempReg&=INT1_SENSE_MASK;
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	83 7f       	andi	r24, 0xF3	; 243
 3ec:	89 83       	std	Y+1, r24	; 0x01
							Local_u8TempReg|=(RISING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	8c 60       	ori	r24, 0x0C	; 12
 3f2:	89 83       	std	Y+1, r24	; 0x01
							MCUCR_REG=Local_u8TempReg;
 3f4:	e5 e5       	ldi	r30, 0x55	; 85
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	80 83       	st	Z, r24
 3fc:	0d c0       	rjmp	.+26     	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
							break;
						  }
				case INT2:{SET_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT); break;}
 3fe:	a4 e5       	ldi	r26, 0x54	; 84
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e4 e5       	ldi	r30, 0x54	; 84
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	8c 93       	st	X, r24
 40c:	05 c0       	rjmp	.+10     	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
				default:{Local_u8Status=RT_NOK;}
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	8a 83       	std	Y+2, r24	; 0x02
 412:	02 c0       	rjmp	.+4      	; 0x418 <EXTI_u8ControlSense_Postbuild+0x1cc>
				}
			break;
		}
		default:{Local_u8Status=RT_NOK;}
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	8a 83       	std	Y+2, r24	; 0x02

	}
	return Local_u8Status;
 418:	8a 81       	ldd	r24, Y+2	; 0x02

}
 41a:	2e 96       	adiw	r28, 0x0e	; 14
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	cf 91       	pop	r28
 428:	df 91       	pop	r29
 42a:	08 95       	ret

0000042c <EXTI_VidControlSense_Prebuild>:


void EXTI_VidControlSense_Prebuild(void)
{
 42c:	df 93       	push	r29
 42e:	cf 93       	push	r28
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
	/*select Sense for INT0*/
#if (INT0_SENSE==FALLING_EDGE_INT01)
	{
		MCUCR_REG&=INT0_SENSE_MASK;
 434:	a5 e5       	ldi	r26, 0x55	; 85
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	e5 e5       	ldi	r30, 0x55	; 85
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	8c 7f       	andi	r24, 0xFC	; 252
 440:	8c 93       	st	X, r24
		MCUCR_REG|=(FALLING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
 442:	a5 e5       	ldi	r26, 0x55	; 85
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e5 e5       	ldi	r30, 0x55	; 85
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	8c 93       	st	X, r24
		MCUCR_REG|=(FALLING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);

	}
#elif (INT1_SENSE==RISING_EDGE_INT01)
	{
		MCUCR_REG&=INT1_SENSE_MASK;
 450:	a5 e5       	ldi	r26, 0x55	; 85
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	e5 e5       	ldi	r30, 0x55	; 85
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	83 7f       	andi	r24, 0xF3	; 243
 45c:	8c 93       	st	X, r24
		MCUCR_REG|=(RISING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
 45e:	a5 e5       	ldi	r26, 0x55	; 85
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e5       	ldi	r30, 0x55	; 85
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	8c 60       	ori	r24, 0x0C	; 12
 46a:	8c 93       	st	X, r24


	/*select Sense for INT2*/
#if INT2_SENSE==FALLING_EDGE_INT2
	{
		CLR_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
 46c:	a4 e5       	ldi	r26, 0x54	; 84
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	e4 e5       	ldi	r30, 0x54	; 84
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	8f 7b       	andi	r24, 0xBF	; 191
 478:	8c 93       	st	X, r24
	{
		SET_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
	}
#endif

}
 47a:	cf 91       	pop	r28
 47c:	df 91       	pop	r29
 47e:	08 95       	ret

00000480 <SendAddress_Callback>:

static void (*EXTI_VidCallBack_ISR_Funtion[3])(void)={NULL};


u8 SendAddress_Callback(void (*ISR_INT0)(void),u8 Copy_u8Id)
{
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	00 d0       	rcall	.+0      	; 0x486 <SendAddress_Callback+0x6>
 486:	00 d0       	rcall	.+0      	; 0x488 <SendAddress_Callback+0x8>
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	9b 83       	std	Y+3, r25	; 0x03
 48e:	8a 83       	std	Y+2, r24	; 0x02
 490:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=RT_OK;
 492:	19 82       	std	Y+1, r1	; 0x01



	if(ISR_INT0!=NULL)
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	9b 81       	ldd	r25, Y+3	; 0x03
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	69 f0       	breq	.+26     	; 0x4b6 <SendAddress_Callback+0x36>
	{
		//SET_BIT(PORTA_REG,PIN1);
		EXTI_VidCallBack_ISR_Funtion[Copy_u8Id]=ISR_INT0;
 49c:	8c 81       	ldd	r24, Y+4	; 0x04
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	fc 01       	movw	r30, r24
 4a8:	e0 5a       	subi	r30, 0xA0	; 160
 4aa:	ff 4f       	sbci	r31, 0xFF	; 255
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	9b 81       	ldd	r25, Y+3	; 0x03
 4b0:	91 83       	std	Z+1, r25	; 0x01
 4b2:	80 83       	st	Z, r24
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <SendAddress_Callback+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 4ba:	89 81       	ldd	r24, Y+1	; 0x01

}
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	cf 91       	pop	r28
 4c6:	df 91       	pop	r29
 4c8:	08 95       	ret

000004ca <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	3f 93       	push	r19
 4d8:	4f 93       	push	r20
 4da:	5f 93       	push	r21
 4dc:	6f 93       	push	r22
 4de:	7f 93       	push	r23
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	af 93       	push	r26
 4e6:	bf 93       	push	r27
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
 4ec:	df 93       	push	r29
 4ee:	cf 93       	push	r28
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62

	EXTI_VidCallBack_ISR_Funtion[0]();
 4f4:	e0 91 60 00 	lds	r30, 0x0060
 4f8:	f0 91 61 00 	lds	r31, 0x0061
 4fc:	09 95       	icall
}
 4fe:	cf 91       	pop	r28
 500:	df 91       	pop	r29
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	2f 93       	push	r18
 530:	3f 93       	push	r19
 532:	4f 93       	push	r20
 534:	5f 93       	push	r21
 536:	6f 93       	push	r22
 538:	7f 93       	push	r23
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	af 93       	push	r26
 540:	bf 93       	push	r27
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
 546:	df 93       	push	r29
 548:	cf 93       	push	r28
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62

	EXTI_VidCallBack_ISR_Funtion[1]();
 54e:	e0 91 62 00 	lds	r30, 0x0062
 552:	f0 91 63 00 	lds	r31, 0x0063
 556:	09 95       	icall
}
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	2f 93       	push	r18
 58a:	3f 93       	push	r19
 58c:	4f 93       	push	r20
 58e:	5f 93       	push	r21
 590:	6f 93       	push	r22
 592:	7f 93       	push	r23
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62

	EXTI_VidCallBack_ISR_Funtion[2]();
 5a8:	e0 91 64 00 	lds	r30, 0x0064
 5ac:	f0 91 65 00 	lds	r31, 0x0065
 5b0:	09 95       	icall
}
 5b2:	cf 91       	pop	r28
 5b4:	df 91       	pop	r29
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <DIO_U8SetPortDir>:
#include "DIO_REG.h"
#include "DIO_Interface.h"


u8 DIO_U8SetPortDir(enum PORTS Copy_u8PortNo,u8  Copy_u8dDir)
{
 5d8:	df 93       	push	r29
 5da:	cf 93       	push	r28
 5dc:	00 d0       	rcall	.+0      	; 0x5de <DIO_U8SetPortDir+0x6>
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <DIO_U8SetPortDir+0x8>
 5e0:	0f 92       	push	r0
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	8a 83       	std	Y+2, r24	; 0x02
 5e8:	6b 83       	std	Y+3, r22	; 0x03

	 u8 Local_Status=RT_OK;
 5ea:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo<0||Copy_u8PortNo>3)
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	84 30       	cpi	r24, 0x04	; 4
 5f0:	18 f0       	brcs	.+6      	; 0x5f8 <DIO_U8SetPortDir+0x20>
{
	Local_Status=RT_NOK;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	89 83       	std	Y+1, r24	; 0x01
 5f6:	32 c0       	rjmp	.+100    	; 0x65c <DIO_U8SetPortDir+0x84>

}
else
{
	switch(Copy_u8PortNo)
 5f8:	8a 81       	ldd	r24, Y+2	; 0x02
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	3d 83       	std	Y+5, r19	; 0x05
 600:	2c 83       	std	Y+4, r18	; 0x04
 602:	8c 81       	ldd	r24, Y+4	; 0x04
 604:	9d 81       	ldd	r25, Y+5	; 0x05
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	91 05       	cpc	r25, r1
 60a:	d1 f0       	breq	.+52     	; 0x640 <DIO_U8SetPortDir+0x68>
 60c:	2c 81       	ldd	r18, Y+4	; 0x04
 60e:	3d 81       	ldd	r19, Y+5	; 0x05
 610:	22 30       	cpi	r18, 0x02	; 2
 612:	31 05       	cpc	r19, r1
 614:	2c f4       	brge	.+10     	; 0x620 <DIO_U8SetPortDir+0x48>
 616:	8c 81       	ldd	r24, Y+4	; 0x04
 618:	9d 81       	ldd	r25, Y+5	; 0x05
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	61 f0       	breq	.+24     	; 0x636 <DIO_U8SetPortDir+0x5e>
 61e:	1e c0       	rjmp	.+60     	; 0x65c <DIO_U8SetPortDir+0x84>
 620:	2c 81       	ldd	r18, Y+4	; 0x04
 622:	3d 81       	ldd	r19, Y+5	; 0x05
 624:	22 30       	cpi	r18, 0x02	; 2
 626:	31 05       	cpc	r19, r1
 628:	81 f0       	breq	.+32     	; 0x64a <DIO_U8SetPortDir+0x72>
 62a:	8c 81       	ldd	r24, Y+4	; 0x04
 62c:	9d 81       	ldd	r25, Y+5	; 0x05
 62e:	83 30       	cpi	r24, 0x03	; 3
 630:	91 05       	cpc	r25, r1
 632:	81 f0       	breq	.+32     	; 0x654 <DIO_U8SetPortDir+0x7c>
 634:	13 c0       	rjmp	.+38     	; 0x65c <DIO_U8SetPortDir+0x84>
	{
	case 0:{DDRA_REG=Copy_u8dDir; break;}
 636:	ea e3       	ldi	r30, 0x3A	; 58
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	80 83       	st	Z, r24
 63e:	0e c0       	rjmp	.+28     	; 0x65c <DIO_U8SetPortDir+0x84>
	case 1:{DDRB_REG=Copy_u8dDir; break;}
 640:	e7 e3       	ldi	r30, 0x37	; 55
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	80 83       	st	Z, r24
 648:	09 c0       	rjmp	.+18     	; 0x65c <DIO_U8SetPortDir+0x84>
	case 2:{DDRC_REG=Copy_u8dDir; break;}
 64a:	e4 e3       	ldi	r30, 0x34	; 52
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	8b 81       	ldd	r24, Y+3	; 0x03
 650:	80 83       	st	Z, r24
 652:	04 c0       	rjmp	.+8      	; 0x65c <DIO_U8SetPortDir+0x84>
	case 3:{DDRD_REG=Copy_u8dDir; break;}
 654:	e1 e3       	ldi	r30, 0x31	; 49
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	80 83       	st	Z, r24
	}
}
return Local_Status;
 65c:	89 81       	ldd	r24, Y+1	; 0x01
}
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	08 95       	ret

0000066e <DIO_U8SetPortVal>:

u8 DIO_U8SetPortVal(enum PORTS Copy_u8PortNo , u8 Copy_Val)
{
 66e:	df 93       	push	r29
 670:	cf 93       	push	r28
 672:	00 d0       	rcall	.+0      	; 0x674 <DIO_U8SetPortVal+0x6>
 674:	00 d0       	rcall	.+0      	; 0x676 <DIO_U8SetPortVal+0x8>
 676:	0f 92       	push	r0
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	8a 83       	std	Y+2, r24	; 0x02
 67e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Status=RT_OK;
 680:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <0||Copy_u8PortNo>3)
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	84 30       	cpi	r24, 0x04	; 4
 686:	18 f0       	brcs	.+6      	; 0x68e <DIO_U8SetPortVal+0x20>
	{
		 Local_Status=RT_NOK;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	32 c0       	rjmp	.+100    	; 0x6f2 <DIO_U8SetPortVal+0x84>

	}
	else
	{
		switch(Copy_u8PortNo)
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	28 2f       	mov	r18, r24
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	3d 83       	std	Y+5, r19	; 0x05
 696:	2c 83       	std	Y+4, r18	; 0x04
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	9d 81       	ldd	r25, Y+5	; 0x05
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	91 05       	cpc	r25, r1
 6a0:	d1 f0       	breq	.+52     	; 0x6d6 <DIO_U8SetPortVal+0x68>
 6a2:	2c 81       	ldd	r18, Y+4	; 0x04
 6a4:	3d 81       	ldd	r19, Y+5	; 0x05
 6a6:	22 30       	cpi	r18, 0x02	; 2
 6a8:	31 05       	cpc	r19, r1
 6aa:	2c f4       	brge	.+10     	; 0x6b6 <DIO_U8SetPortVal+0x48>
 6ac:	8c 81       	ldd	r24, Y+4	; 0x04
 6ae:	9d 81       	ldd	r25, Y+5	; 0x05
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	61 f0       	breq	.+24     	; 0x6cc <DIO_U8SetPortVal+0x5e>
 6b4:	1e c0       	rjmp	.+60     	; 0x6f2 <DIO_U8SetPortVal+0x84>
 6b6:	2c 81       	ldd	r18, Y+4	; 0x04
 6b8:	3d 81       	ldd	r19, Y+5	; 0x05
 6ba:	22 30       	cpi	r18, 0x02	; 2
 6bc:	31 05       	cpc	r19, r1
 6be:	81 f0       	breq	.+32     	; 0x6e0 <DIO_U8SetPortVal+0x72>
 6c0:	8c 81       	ldd	r24, Y+4	; 0x04
 6c2:	9d 81       	ldd	r25, Y+5	; 0x05
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	91 05       	cpc	r25, r1
 6c8:	81 f0       	breq	.+32     	; 0x6ea <DIO_U8SetPortVal+0x7c>
 6ca:	13 c0       	rjmp	.+38     	; 0x6f2 <DIO_U8SetPortVal+0x84>
		{
		case 0:{PORTA_REG=Copy_Val; break;}
 6cc:	eb e3       	ldi	r30, 0x3B	; 59
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	80 83       	st	Z, r24
 6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <DIO_U8SetPortVal+0x84>
		case 1:{PORTB_REG=Copy_Val; break;}
 6d6:	e8 e3       	ldi	r30, 0x38	; 56
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	80 83       	st	Z, r24
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <DIO_U8SetPortVal+0x84>
		case 2:{PORTC_REG=Copy_Val; break;}
 6e0:	e5 e3       	ldi	r30, 0x35	; 53
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	80 83       	st	Z, r24
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <DIO_U8SetPortVal+0x84>
		case 3:{PORTD_REG=Copy_Val; break;}
 6ea:	e2 e3       	ldi	r30, 0x32	; 50
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
 6f2:	89 81       	ldd	r24, Y+1	; 0x01

}
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	cf 91       	pop	r28
 700:	df 91       	pop	r29
 702:	08 95       	ret

00000704 <DIO_U8GetPortVal>:

u8 DIO_U8GetPortVal(enum PORTS Copy_u8PortNo, u8* u8_Val)
{
 704:	df 93       	push	r29
 706:	cf 93       	push	r28
 708:	00 d0       	rcall	.+0      	; 0x70a <DIO_U8GetPortVal+0x6>
 70a:	00 d0       	rcall	.+0      	; 0x70c <DIO_U8GetPortVal+0x8>
 70c:	00 d0       	rcall	.+0      	; 0x70e <DIO_U8GetPortVal+0xa>
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	8a 83       	std	Y+2, r24	; 0x02
 714:	7c 83       	std	Y+4, r23	; 0x04
 716:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_Status=RT_OK;
 718:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo<0|| Copy_u8PortNo>3)
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	84 30       	cpi	r24, 0x04	; 4
 71e:	18 f0       	brcs	.+6      	; 0x726 <DIO_U8GetPortVal+0x22>
	{
		Local_Status=RT_NOK;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	3a c0       	rjmp	.+116    	; 0x79a <DIO_U8GetPortVal+0x96>

	}
	else
	{
		switch(Copy_u8PortNo)
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	28 2f       	mov	r18, r24
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	3e 83       	std	Y+6, r19	; 0x06
 72e:	2d 83       	std	Y+5, r18	; 0x05
 730:	8d 81       	ldd	r24, Y+5	; 0x05
 732:	9e 81       	ldd	r25, Y+6	; 0x06
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	91 05       	cpc	r25, r1
 738:	e1 f0       	breq	.+56     	; 0x772 <DIO_U8GetPortVal+0x6e>
 73a:	2d 81       	ldd	r18, Y+5	; 0x05
 73c:	3e 81       	ldd	r19, Y+6	; 0x06
 73e:	22 30       	cpi	r18, 0x02	; 2
 740:	31 05       	cpc	r19, r1
 742:	2c f4       	brge	.+10     	; 0x74e <DIO_U8GetPortVal+0x4a>
 744:	8d 81       	ldd	r24, Y+5	; 0x05
 746:	9e 81       	ldd	r25, Y+6	; 0x06
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	61 f0       	breq	.+24     	; 0x764 <DIO_U8GetPortVal+0x60>
 74c:	26 c0       	rjmp	.+76     	; 0x79a <DIO_U8GetPortVal+0x96>
 74e:	2d 81       	ldd	r18, Y+5	; 0x05
 750:	3e 81       	ldd	r19, Y+6	; 0x06
 752:	22 30       	cpi	r18, 0x02	; 2
 754:	31 05       	cpc	r19, r1
 756:	a1 f0       	breq	.+40     	; 0x780 <DIO_U8GetPortVal+0x7c>
 758:	8d 81       	ldd	r24, Y+5	; 0x05
 75a:	9e 81       	ldd	r25, Y+6	; 0x06
 75c:	83 30       	cpi	r24, 0x03	; 3
 75e:	91 05       	cpc	r25, r1
 760:	b1 f0       	breq	.+44     	; 0x78e <DIO_U8GetPortVal+0x8a>
 762:	1b c0       	rjmp	.+54     	; 0x79a <DIO_U8GetPortVal+0x96>
		{
		case 0:{*u8_Val=PINA_REG; break;}
 764:	e9 e3       	ldi	r30, 0x39	; 57
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	eb 81       	ldd	r30, Y+3	; 0x03
 76c:	fc 81       	ldd	r31, Y+4	; 0x04
 76e:	80 83       	st	Z, r24
 770:	14 c0       	rjmp	.+40     	; 0x79a <DIO_U8GetPortVal+0x96>
		case 1:{*u8_Val=PINB_REG; break;}
 772:	e6 e3       	ldi	r30, 0x36	; 54
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	eb 81       	ldd	r30, Y+3	; 0x03
 77a:	fc 81       	ldd	r31, Y+4	; 0x04
 77c:	80 83       	st	Z, r24
 77e:	0d c0       	rjmp	.+26     	; 0x79a <DIO_U8GetPortVal+0x96>
		case 2:{*u8_Val=PINC_REG; break;}
 780:	e3 e3       	ldi	r30, 0x33	; 51
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	eb 81       	ldd	r30, Y+3	; 0x03
 788:	fc 81       	ldd	r31, Y+4	; 0x04
 78a:	80 83       	st	Z, r24
 78c:	06 c0       	rjmp	.+12     	; 0x79a <DIO_U8GetPortVal+0x96>
		case 3:{*u8_Val=PIND_REG; break;}
 78e:	e0 e3       	ldi	r30, 0x30	; 48
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	80 81       	ld	r24, Z
 794:	eb 81       	ldd	r30, Y+3	; 0x03
 796:	fc 81       	ldd	r31, Y+4	; 0x04
 798:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
 79a:	89 81       	ldd	r24, Y+1	; 0x01

}
 79c:	26 96       	adiw	r28, 0x06	; 6
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	f8 94       	cli
 7a2:	de bf       	out	0x3e, r29	; 62
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	cd bf       	out	0x3d, r28	; 61
 7a8:	cf 91       	pop	r28
 7aa:	df 91       	pop	r29
 7ac:	08 95       	ret

000007ae <DIO_U8SetPinDir>:

u8 DIO_U8SetPinDir(enum PORTS Copy_u8PortNo , enum PINS Copy_u8PinNo,u8 Copy_u8Dir)
{	u8 Local_Status=RT_OK;
 7ae:	df 93       	push	r29
 7b0:	cf 93       	push	r28
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
 7b6:	28 97       	sbiw	r28, 0x08	; 8
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	f8 94       	cli
 7bc:	de bf       	out	0x3e, r29	; 62
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	cd bf       	out	0x3d, r28	; 61
 7c2:	8a 83       	std	Y+2, r24	; 0x02
 7c4:	6b 83       	std	Y+3, r22	; 0x03
 7c6:	4c 83       	std	Y+4, r20	; 0x04
 7c8:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_u8Dir == HIGH)
 7ca:	8c 81       	ldd	r24, Y+4	; 0x04
 7cc:	81 30       	cpi	r24, 0x01	; 1
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <DIO_U8SetPinDir+0x24>
 7d0:	6f c0       	rjmp	.+222    	; 0x8b0 <__stack+0x51>
		{
			switch(Copy_u8PortNo)
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	28 2f       	mov	r18, r24
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	38 87       	std	Y+8, r19	; 0x08
 7da:	2f 83       	std	Y+7, r18	; 0x07
 7dc:	8f 81       	ldd	r24, Y+7	; 0x07
 7de:	98 85       	ldd	r25, Y+8	; 0x08
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	91 05       	cpc	r25, r1
 7e4:	49 f1       	breq	.+82     	; 0x838 <DIO_U8SetPinDir+0x8a>
 7e6:	2f 81       	ldd	r18, Y+7	; 0x07
 7e8:	38 85       	ldd	r19, Y+8	; 0x08
 7ea:	22 30       	cpi	r18, 0x02	; 2
 7ec:	31 05       	cpc	r19, r1
 7ee:	2c f4       	brge	.+10     	; 0x7fa <DIO_U8SetPinDir+0x4c>
 7f0:	8f 81       	ldd	r24, Y+7	; 0x07
 7f2:	98 85       	ldd	r25, Y+8	; 0x08
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	61 f0       	breq	.+24     	; 0x810 <DIO_U8SetPinDir+0x62>
 7f8:	d5 c0       	rjmp	.+426    	; 0x9a4 <__stack+0x145>
 7fa:	2f 81       	ldd	r18, Y+7	; 0x07
 7fc:	38 85       	ldd	r19, Y+8	; 0x08
 7fe:	22 30       	cpi	r18, 0x02	; 2
 800:	31 05       	cpc	r19, r1
 802:	71 f1       	breq	.+92     	; 0x860 <__stack+0x1>
 804:	8f 81       	ldd	r24, Y+7	; 0x07
 806:	98 85       	ldd	r25, Y+8	; 0x08
 808:	83 30       	cpi	r24, 0x03	; 3
 80a:	91 05       	cpc	r25, r1
 80c:	e9 f1       	breq	.+122    	; 0x888 <__stack+0x29>
 80e:	ca c0       	rjmp	.+404    	; 0x9a4 <__stack+0x145>
			{
			case 0:
			{
				SET_BIT(DDRA_REG,Copy_u8PinNo);
 810:	aa e3       	ldi	r26, 0x3A	; 58
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	ea e3       	ldi	r30, 0x3A	; 58
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	48 2f       	mov	r20, r24
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	28 2f       	mov	r18, r24
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	02 2e       	mov	r0, r18
 828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_U8SetPinDir+0x80>
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	0a 94       	dec	r0
 830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_U8SetPinDir+0x7c>
 832:	84 2b       	or	r24, r20
 834:	8c 93       	st	X, r24
 836:	b6 c0       	rjmp	.+364    	; 0x9a4 <__stack+0x145>
				break;
			}
			case 1:
			{
				SET_BIT(DDRB_REG,Copy_u8PinNo);
 838:	a7 e3       	ldi	r26, 0x37	; 55
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e7 e3       	ldi	r30, 0x37	; 55
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	48 2f       	mov	r20, r24
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 2e       	mov	r0, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_U8SetPinDir+0xa8>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	0a 94       	dec	r0
 858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_U8SetPinDir+0xa4>
 85a:	84 2b       	or	r24, r20
 85c:	8c 93       	st	X, r24
 85e:	a2 c0       	rjmp	.+324    	; 0x9a4 <__stack+0x145>
				break;
			}
			case 2:
			{
				SET_BIT(DDRC_REG,Copy_u8PinNo);
 860:	a4 e3       	ldi	r26, 0x34	; 52
 862:	b0 e0       	ldi	r27, 0x00	; 0
 864:	e4 e3       	ldi	r30, 0x34	; 52
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	48 2f       	mov	r20, r24
 86c:	8b 81       	ldd	r24, Y+3	; 0x03
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 2e       	mov	r0, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	84 2b       	or	r24, r20
 884:	8c 93       	st	X, r24
 886:	8e c0       	rjmp	.+284    	; 0x9a4 <__stack+0x145>
				break;
			}
			case 3:
			{
				SET_BIT(DDRD_REG,Copy_u8PinNo);
 888:	a1 e3       	ldi	r26, 0x31	; 49
 88a:	b0 e0       	ldi	r27, 0x00	; 0
 88c:	e1 e3       	ldi	r30, 0x31	; 49
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	48 2f       	mov	r20, r24
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	28 2f       	mov	r18, r24
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	02 2e       	mov	r0, r18
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	88 0f       	add	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	0a 94       	dec	r0
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	84 2b       	or	r24, r20
 8ac:	8c 93       	st	X, r24
 8ae:	7a c0       	rjmp	.+244    	; 0x9a4 <__stack+0x145>
				break;
			}

			}
		}
		else if(Copy_u8Dir==LOW)
 8b0:	8c 81       	ldd	r24, Y+4	; 0x04
 8b2:	88 23       	and	r24, r24
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <__stack+0x59>
 8b6:	74 c0       	rjmp	.+232    	; 0x9a0 <__stack+0x141>
		{
			switch(Copy_u8PortNo)
 8b8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ba:	28 2f       	mov	r18, r24
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	3e 83       	std	Y+6, r19	; 0x06
 8c0:	2d 83       	std	Y+5, r18	; 0x05
 8c2:	8d 81       	ldd	r24, Y+5	; 0x05
 8c4:	9e 81       	ldd	r25, Y+6	; 0x06
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	91 05       	cpc	r25, r1
 8ca:	59 f1       	breq	.+86     	; 0x922 <__stack+0xc3>
 8cc:	2d 81       	ldd	r18, Y+5	; 0x05
 8ce:	3e 81       	ldd	r19, Y+6	; 0x06
 8d0:	22 30       	cpi	r18, 0x02	; 2
 8d2:	31 05       	cpc	r19, r1
 8d4:	2c f4       	brge	.+10     	; 0x8e0 <__stack+0x81>
 8d6:	8d 81       	ldd	r24, Y+5	; 0x05
 8d8:	9e 81       	ldd	r25, Y+6	; 0x06
 8da:	00 97       	sbiw	r24, 0x00	; 0
 8dc:	69 f0       	breq	.+26     	; 0x8f8 <__stack+0x99>
 8de:	62 c0       	rjmp	.+196    	; 0x9a4 <__stack+0x145>
 8e0:	2d 81       	ldd	r18, Y+5	; 0x05
 8e2:	3e 81       	ldd	r19, Y+6	; 0x06
 8e4:	22 30       	cpi	r18, 0x02	; 2
 8e6:	31 05       	cpc	r19, r1
 8e8:	89 f1       	breq	.+98     	; 0x94c <__stack+0xed>
 8ea:	8d 81       	ldd	r24, Y+5	; 0x05
 8ec:	9e 81       	ldd	r25, Y+6	; 0x06
 8ee:	83 30       	cpi	r24, 0x03	; 3
 8f0:	91 05       	cpc	r25, r1
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <__stack+0x97>
 8f4:	40 c0       	rjmp	.+128    	; 0x976 <__stack+0x117>
 8f6:	56 c0       	rjmp	.+172    	; 0x9a4 <__stack+0x145>
			{
				case 0:
				{
					CLR_BIT(DDRA_REG,Copy_u8PinNo);
 8f8:	aa e3       	ldi	r26, 0x3A	; 58
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	ea e3       	ldi	r30, 0x3A	; 58
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	48 2f       	mov	r20, r24
 904:	8b 81       	ldd	r24, Y+3	; 0x03
 906:	28 2f       	mov	r18, r24
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	02 2e       	mov	r0, r18
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	0a 94       	dec	r0
 918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0xb3>
 91a:	80 95       	com	r24
 91c:	84 23       	and	r24, r20
 91e:	8c 93       	st	X, r24
 920:	41 c0       	rjmp	.+130    	; 0x9a4 <__stack+0x145>
					break;
				}
				case 1:
				{
					CLR_BIT(DDRB_REG,Copy_u8PinNo);
 922:	a7 e3       	ldi	r26, 0x37	; 55
 924:	b0 e0       	ldi	r27, 0x00	; 0
 926:	e7 e3       	ldi	r30, 0x37	; 55
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	48 2f       	mov	r20, r24
 92e:	8b 81       	ldd	r24, Y+3	; 0x03
 930:	28 2f       	mov	r18, r24
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	02 2e       	mov	r0, r18
 93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0xe1>
 93c:	88 0f       	add	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	0a 94       	dec	r0
 942:	e2 f7       	brpl	.-8      	; 0x93c <__stack+0xdd>
 944:	80 95       	com	r24
 946:	84 23       	and	r24, r20
 948:	8c 93       	st	X, r24
 94a:	2c c0       	rjmp	.+88     	; 0x9a4 <__stack+0x145>
					break;
				}
				case 2:
				{
					CLR_BIT(DDRC_REG,Copy_u8PinNo);
 94c:	a4 e3       	ldi	r26, 0x34	; 52
 94e:	b0 e0       	ldi	r27, 0x00	; 0
 950:	e4 e3       	ldi	r30, 0x34	; 52
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	48 2f       	mov	r20, r24
 958:	8b 81       	ldd	r24, Y+3	; 0x03
 95a:	28 2f       	mov	r18, r24
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	02 2e       	mov	r0, r18
 964:	02 c0       	rjmp	.+4      	; 0x96a <__stack+0x10b>
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	0a 94       	dec	r0
 96c:	e2 f7       	brpl	.-8      	; 0x966 <__stack+0x107>
 96e:	80 95       	com	r24
 970:	84 23       	and	r24, r20
 972:	8c 93       	st	X, r24
 974:	17 c0       	rjmp	.+46     	; 0x9a4 <__stack+0x145>
					break;
				}
				case 3:
				{
					CLR_BIT(DDRD_REG,Copy_u8PinNo);
 976:	a1 e3       	ldi	r26, 0x31	; 49
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	e1 e3       	ldi	r30, 0x31	; 49
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	48 2f       	mov	r20, r24
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	28 2f       	mov	r18, r24
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	02 2e       	mov	r0, r18
 98e:	02 c0       	rjmp	.+4      	; 0x994 <__stack+0x135>
 990:	88 0f       	add	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	0a 94       	dec	r0
 996:	e2 f7       	brpl	.-8      	; 0x990 <__stack+0x131>
 998:	80 95       	com	r24
 99a:	84 23       	and	r24, r20
 99c:	8c 93       	st	X, r24
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0x145>

			}
		}
		else
		{
			Local_Status=RT_NOK;
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
 9a4:	89 81       	ldd	r24, Y+1	; 0x01

}
 9a6:	28 96       	adiw	r28, 0x08	; 8
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	f8 94       	cli
 9ac:	de bf       	out	0x3e, r29	; 62
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	cd bf       	out	0x3d, r28	; 61
 9b2:	cf 91       	pop	r28
 9b4:	df 91       	pop	r29
 9b6:	08 95       	ret

000009b8 <DIO_U8SetPinVal>:

u8 DIO_U8SetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo,u8 Copy_Val)

{
 9b8:	df 93       	push	r29
 9ba:	cf 93       	push	r28
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	28 97       	sbiw	r28, 0x08	; 8
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	de bf       	out	0x3e, r29	; 62
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	cd bf       	out	0x3d, r28	; 61
 9cc:	8a 83       	std	Y+2, r24	; 0x02
 9ce:	6b 83       	std	Y+3, r22	; 0x03
 9d0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
 9d2:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_Val == HIGH)
 9d4:	8c 81       	ldd	r24, Y+4	; 0x04
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	09 f0       	breq	.+2      	; 0x9dc <DIO_U8SetPinVal+0x24>
 9da:	6f c0       	rjmp	.+222    	; 0xaba <DIO_U8SetPinVal+0x102>
		{
			switch(Copy_u8PortNo)
 9dc:	8a 81       	ldd	r24, Y+2	; 0x02
 9de:	28 2f       	mov	r18, r24
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	38 87       	std	Y+8, r19	; 0x08
 9e4:	2f 83       	std	Y+7, r18	; 0x07
 9e6:	8f 81       	ldd	r24, Y+7	; 0x07
 9e8:	98 85       	ldd	r25, Y+8	; 0x08
 9ea:	81 30       	cpi	r24, 0x01	; 1
 9ec:	91 05       	cpc	r25, r1
 9ee:	49 f1       	breq	.+82     	; 0xa42 <DIO_U8SetPinVal+0x8a>
 9f0:	2f 81       	ldd	r18, Y+7	; 0x07
 9f2:	38 85       	ldd	r19, Y+8	; 0x08
 9f4:	22 30       	cpi	r18, 0x02	; 2
 9f6:	31 05       	cpc	r19, r1
 9f8:	2c f4       	brge	.+10     	; 0xa04 <DIO_U8SetPinVal+0x4c>
 9fa:	8f 81       	ldd	r24, Y+7	; 0x07
 9fc:	98 85       	ldd	r25, Y+8	; 0x08
 9fe:	00 97       	sbiw	r24, 0x00	; 0
 a00:	61 f0       	breq	.+24     	; 0xa1a <DIO_U8SetPinVal+0x62>
 a02:	d5 c0       	rjmp	.+426    	; 0xbae <DIO_U8SetPinVal+0x1f6>
 a04:	2f 81       	ldd	r18, Y+7	; 0x07
 a06:	38 85       	ldd	r19, Y+8	; 0x08
 a08:	22 30       	cpi	r18, 0x02	; 2
 a0a:	31 05       	cpc	r19, r1
 a0c:	71 f1       	breq	.+92     	; 0xa6a <DIO_U8SetPinVal+0xb2>
 a0e:	8f 81       	ldd	r24, Y+7	; 0x07
 a10:	98 85       	ldd	r25, Y+8	; 0x08
 a12:	83 30       	cpi	r24, 0x03	; 3
 a14:	91 05       	cpc	r25, r1
 a16:	e9 f1       	breq	.+122    	; 0xa92 <DIO_U8SetPinVal+0xda>
 a18:	ca c0       	rjmp	.+404    	; 0xbae <DIO_U8SetPinVal+0x1f6>
			{
			case 0:
			{
				SET_BIT(PORTA_REG,Copy_u8PinNo);
 a1a:	ab e3       	ldi	r26, 0x3B	; 59
 a1c:	b0 e0       	ldi	r27, 0x00	; 0
 a1e:	eb e3       	ldi	r30, 0x3B	; 59
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	48 2f       	mov	r20, r24
 a26:	8b 81       	ldd	r24, Y+3	; 0x03
 a28:	28 2f       	mov	r18, r24
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	02 2e       	mov	r0, r18
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_U8SetPinVal+0x80>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	0a 94       	dec	r0
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_U8SetPinVal+0x7c>
 a3c:	84 2b       	or	r24, r20
 a3e:	8c 93       	st	X, r24
 a40:	b6 c0       	rjmp	.+364    	; 0xbae <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 1:
			{
				SET_BIT(PORTB_REG,Copy_u8PinNo);
 a42:	a8 e3       	ldi	r26, 0x38	; 56
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	e8 e3       	ldi	r30, 0x38	; 56
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	80 81       	ld	r24, Z
 a4c:	48 2f       	mov	r20, r24
 a4e:	8b 81       	ldd	r24, Y+3	; 0x03
 a50:	28 2f       	mov	r18, r24
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	81 e0       	ldi	r24, 0x01	; 1
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	02 2e       	mov	r0, r18
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_U8SetPinVal+0xa8>
 a5c:	88 0f       	add	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	0a 94       	dec	r0
 a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_U8SetPinVal+0xa4>
 a64:	84 2b       	or	r24, r20
 a66:	8c 93       	st	X, r24
 a68:	a2 c0       	rjmp	.+324    	; 0xbae <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 2:
			{
				SET_BIT(PORTC_REG,Copy_u8PinNo);
 a6a:	a5 e3       	ldi	r26, 0x35	; 53
 a6c:	b0 e0       	ldi	r27, 0x00	; 0
 a6e:	e5 e3       	ldi	r30, 0x35	; 53
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	80 81       	ld	r24, Z
 a74:	48 2f       	mov	r20, r24
 a76:	8b 81       	ldd	r24, Y+3	; 0x03
 a78:	28 2f       	mov	r18, r24
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	02 2e       	mov	r0, r18
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_U8SetPinVal+0xd0>
 a84:	88 0f       	add	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	0a 94       	dec	r0
 a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_U8SetPinVal+0xcc>
 a8c:	84 2b       	or	r24, r20
 a8e:	8c 93       	st	X, r24
 a90:	8e c0       	rjmp	.+284    	; 0xbae <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 3:
			{
				SET_BIT(PORTD_REG,Copy_u8PinNo);
 a92:	a2 e3       	ldi	r26, 0x32	; 50
 a94:	b0 e0       	ldi	r27, 0x00	; 0
 a96:	e2 e3       	ldi	r30, 0x32	; 50
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	80 81       	ld	r24, Z
 a9c:	48 2f       	mov	r20, r24
 a9e:	8b 81       	ldd	r24, Y+3	; 0x03
 aa0:	28 2f       	mov	r18, r24
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	02 2e       	mov	r0, r18
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_U8SetPinVal+0xf8>
 aac:	88 0f       	add	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	0a 94       	dec	r0
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_U8SetPinVal+0xf4>
 ab4:	84 2b       	or	r24, r20
 ab6:	8c 93       	st	X, r24
 ab8:	7a c0       	rjmp	.+244    	; 0xbae <DIO_U8SetPinVal+0x1f6>
				break;
			}

			}
		}
		else if(Copy_Val==LOW)
 aba:	8c 81       	ldd	r24, Y+4	; 0x04
 abc:	88 23       	and	r24, r24
 abe:	09 f0       	breq	.+2      	; 0xac2 <DIO_U8SetPinVal+0x10a>
 ac0:	74 c0       	rjmp	.+232    	; 0xbaa <DIO_U8SetPinVal+0x1f2>
		{
			switch(Copy_u8PortNo)
 ac2:	8a 81       	ldd	r24, Y+2	; 0x02
 ac4:	28 2f       	mov	r18, r24
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	3e 83       	std	Y+6, r19	; 0x06
 aca:	2d 83       	std	Y+5, r18	; 0x05
 acc:	8d 81       	ldd	r24, Y+5	; 0x05
 ace:	9e 81       	ldd	r25, Y+6	; 0x06
 ad0:	81 30       	cpi	r24, 0x01	; 1
 ad2:	91 05       	cpc	r25, r1
 ad4:	59 f1       	breq	.+86     	; 0xb2c <DIO_U8SetPinVal+0x174>
 ad6:	2d 81       	ldd	r18, Y+5	; 0x05
 ad8:	3e 81       	ldd	r19, Y+6	; 0x06
 ada:	22 30       	cpi	r18, 0x02	; 2
 adc:	31 05       	cpc	r19, r1
 ade:	2c f4       	brge	.+10     	; 0xaea <DIO_U8SetPinVal+0x132>
 ae0:	8d 81       	ldd	r24, Y+5	; 0x05
 ae2:	9e 81       	ldd	r25, Y+6	; 0x06
 ae4:	00 97       	sbiw	r24, 0x00	; 0
 ae6:	69 f0       	breq	.+26     	; 0xb02 <DIO_U8SetPinVal+0x14a>
 ae8:	62 c0       	rjmp	.+196    	; 0xbae <DIO_U8SetPinVal+0x1f6>
 aea:	2d 81       	ldd	r18, Y+5	; 0x05
 aec:	3e 81       	ldd	r19, Y+6	; 0x06
 aee:	22 30       	cpi	r18, 0x02	; 2
 af0:	31 05       	cpc	r19, r1
 af2:	89 f1       	breq	.+98     	; 0xb56 <DIO_U8SetPinVal+0x19e>
 af4:	8d 81       	ldd	r24, Y+5	; 0x05
 af6:	9e 81       	ldd	r25, Y+6	; 0x06
 af8:	83 30       	cpi	r24, 0x03	; 3
 afa:	91 05       	cpc	r25, r1
 afc:	09 f4       	brne	.+2      	; 0xb00 <DIO_U8SetPinVal+0x148>
 afe:	40 c0       	rjmp	.+128    	; 0xb80 <DIO_U8SetPinVal+0x1c8>
 b00:	56 c0       	rjmp	.+172    	; 0xbae <DIO_U8SetPinVal+0x1f6>
			{
				case 0:
				{
					CLR_BIT(PORTA_REG,Copy_u8PinNo);
 b02:	ab e3       	ldi	r26, 0x3B	; 59
 b04:	b0 e0       	ldi	r27, 0x00	; 0
 b06:	eb e3       	ldi	r30, 0x3B	; 59
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	80 81       	ld	r24, Z
 b0c:	48 2f       	mov	r20, r24
 b0e:	8b 81       	ldd	r24, Y+3	; 0x03
 b10:	28 2f       	mov	r18, r24
 b12:	30 e0       	ldi	r19, 0x00	; 0
 b14:	81 e0       	ldi	r24, 0x01	; 1
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	02 2e       	mov	r0, r18
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <DIO_U8SetPinVal+0x168>
 b1c:	88 0f       	add	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	0a 94       	dec	r0
 b22:	e2 f7       	brpl	.-8      	; 0xb1c <DIO_U8SetPinVal+0x164>
 b24:	80 95       	com	r24
 b26:	84 23       	and	r24, r20
 b28:	8c 93       	st	X, r24
 b2a:	41 c0       	rjmp	.+130    	; 0xbae <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 1:
				{
					CLR_BIT(PORTB_REG,Copy_u8PinNo);
 b2c:	a8 e3       	ldi	r26, 0x38	; 56
 b2e:	b0 e0       	ldi	r27, 0x00	; 0
 b30:	e8 e3       	ldi	r30, 0x38	; 56
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	80 81       	ld	r24, Z
 b36:	48 2f       	mov	r20, r24
 b38:	8b 81       	ldd	r24, Y+3	; 0x03
 b3a:	28 2f       	mov	r18, r24
 b3c:	30 e0       	ldi	r19, 0x00	; 0
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	02 2e       	mov	r0, r18
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_U8SetPinVal+0x192>
 b46:	88 0f       	add	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	0a 94       	dec	r0
 b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_U8SetPinVal+0x18e>
 b4e:	80 95       	com	r24
 b50:	84 23       	and	r24, r20
 b52:	8c 93       	st	X, r24
 b54:	2c c0       	rjmp	.+88     	; 0xbae <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 2:
				{
					CLR_BIT(PORTC_REG,Copy_u8PinNo);
 b56:	a5 e3       	ldi	r26, 0x35	; 53
 b58:	b0 e0       	ldi	r27, 0x00	; 0
 b5a:	e5 e3       	ldi	r30, 0x35	; 53
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	80 81       	ld	r24, Z
 b60:	48 2f       	mov	r20, r24
 b62:	8b 81       	ldd	r24, Y+3	; 0x03
 b64:	28 2f       	mov	r18, r24
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	02 2e       	mov	r0, r18
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <DIO_U8SetPinVal+0x1bc>
 b70:	88 0f       	add	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	0a 94       	dec	r0
 b76:	e2 f7       	brpl	.-8      	; 0xb70 <DIO_U8SetPinVal+0x1b8>
 b78:	80 95       	com	r24
 b7a:	84 23       	and	r24, r20
 b7c:	8c 93       	st	X, r24
 b7e:	17 c0       	rjmp	.+46     	; 0xbae <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 3:
				{
					CLR_BIT(PORTD_REG,Copy_u8PinNo);
 b80:	a2 e3       	ldi	r26, 0x32	; 50
 b82:	b0 e0       	ldi	r27, 0x00	; 0
 b84:	e2 e3       	ldi	r30, 0x32	; 50
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	80 81       	ld	r24, Z
 b8a:	48 2f       	mov	r20, r24
 b8c:	8b 81       	ldd	r24, Y+3	; 0x03
 b8e:	28 2f       	mov	r18, r24
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	81 e0       	ldi	r24, 0x01	; 1
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	02 2e       	mov	r0, r18
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <DIO_U8SetPinVal+0x1e6>
 b9a:	88 0f       	add	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	0a 94       	dec	r0
 ba0:	e2 f7       	brpl	.-8      	; 0xb9a <DIO_U8SetPinVal+0x1e2>
 ba2:	80 95       	com	r24
 ba4:	84 23       	and	r24, r20
 ba6:	8c 93       	st	X, r24
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_U8SetPinVal+0x1f6>

			}
		}
		else
		{
			Local_Status=RT_NOK;
 baa:	81 e0       	ldi	r24, 0x01	; 1
 bac:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
 bae:	89 81       	ldd	r24, Y+1	; 0x01
}
 bb0:	28 96       	adiw	r28, 0x08	; 8
 bb2:	0f b6       	in	r0, 0x3f	; 63
 bb4:	f8 94       	cli
 bb6:	de bf       	out	0x3e, r29	; 62
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	cd bf       	out	0x3d, r28	; 61
 bbc:	cf 91       	pop	r28
 bbe:	df 91       	pop	r29
 bc0:	08 95       	ret

00000bc2 <DIO_U8GetPinVal>:

u8 DIO_U8GetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo, u8* u8_Val)
{
 bc2:	df 93       	push	r29
 bc4:	cf 93       	push	r28
 bc6:	cd b7       	in	r28, 0x3d	; 61
 bc8:	de b7       	in	r29, 0x3e	; 62
 bca:	27 97       	sbiw	r28, 0x07	; 7
 bcc:	0f b6       	in	r0, 0x3f	; 63
 bce:	f8 94       	cli
 bd0:	de bf       	out	0x3e, r29	; 62
 bd2:	0f be       	out	0x3f, r0	; 63
 bd4:	cd bf       	out	0x3d, r28	; 61
 bd6:	8a 83       	std	Y+2, r24	; 0x02
 bd8:	6b 83       	std	Y+3, r22	; 0x03
 bda:	5d 83       	std	Y+5, r21	; 0x05
 bdc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
 bde:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
	{
		if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
		{

				switch(Copy_u8PortNo)
 be0:	8a 81       	ldd	r24, Y+2	; 0x02
 be2:	28 2f       	mov	r18, r24
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	3f 83       	std	Y+7, r19	; 0x07
 be8:	2e 83       	std	Y+6, r18	; 0x06
 bea:	4e 81       	ldd	r20, Y+6	; 0x06
 bec:	5f 81       	ldd	r21, Y+7	; 0x07
 bee:	41 30       	cpi	r20, 0x01	; 1
 bf0:	51 05       	cpc	r21, r1
 bf2:	59 f1       	breq	.+86     	; 0xc4a <DIO_U8GetPinVal+0x88>
 bf4:	8e 81       	ldd	r24, Y+6	; 0x06
 bf6:	9f 81       	ldd	r25, Y+7	; 0x07
 bf8:	82 30       	cpi	r24, 0x02	; 2
 bfa:	91 05       	cpc	r25, r1
 bfc:	34 f4       	brge	.+12     	; 0xc0a <DIO_U8GetPinVal+0x48>
 bfe:	2e 81       	ldd	r18, Y+6	; 0x06
 c00:	3f 81       	ldd	r19, Y+7	; 0x07
 c02:	21 15       	cp	r18, r1
 c04:	31 05       	cpc	r19, r1
 c06:	69 f0       	breq	.+26     	; 0xc22 <DIO_U8GetPinVal+0x60>
 c08:	5b c0       	rjmp	.+182    	; 0xcc0 <DIO_U8GetPinVal+0xfe>
 c0a:	4e 81       	ldd	r20, Y+6	; 0x06
 c0c:	5f 81       	ldd	r21, Y+7	; 0x07
 c0e:	42 30       	cpi	r20, 0x02	; 2
 c10:	51 05       	cpc	r21, r1
 c12:	79 f1       	breq	.+94     	; 0xc72 <DIO_U8GetPinVal+0xb0>
 c14:	8e 81       	ldd	r24, Y+6	; 0x06
 c16:	9f 81       	ldd	r25, Y+7	; 0x07
 c18:	83 30       	cpi	r24, 0x03	; 3
 c1a:	91 05       	cpc	r25, r1
 c1c:	09 f4       	brne	.+2      	; 0xc20 <DIO_U8GetPinVal+0x5e>
 c1e:	3d c0       	rjmp	.+122    	; 0xc9a <DIO_U8GetPinVal+0xd8>
 c20:	4f c0       	rjmp	.+158    	; 0xcc0 <DIO_U8GetPinVal+0xfe>
				{
				case 0:
				{
					*u8_Val =GET_BIT(PINA_REG,Copy_u8PinNo);
 c22:	e9 e3       	ldi	r30, 0x39	; 57
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	80 81       	ld	r24, Z
 c28:	28 2f       	mov	r18, r24
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	8b 81       	ldd	r24, Y+3	; 0x03
 c2e:	88 2f       	mov	r24, r24
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	a9 01       	movw	r20, r18
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_U8GetPinVal+0x78>
 c36:	55 95       	asr	r21
 c38:	47 95       	ror	r20
 c3a:	8a 95       	dec	r24
 c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_U8GetPinVal+0x74>
 c3e:	ca 01       	movw	r24, r20
 c40:	81 70       	andi	r24, 0x01	; 1
 c42:	ec 81       	ldd	r30, Y+4	; 0x04
 c44:	fd 81       	ldd	r31, Y+5	; 0x05
 c46:	80 83       	st	Z, r24
 c48:	3b c0       	rjmp	.+118    	; 0xcc0 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 1:
				{
					*u8_Val=GET_BIT(PINB_REG,Copy_u8PinNo);
 c4a:	e6 e3       	ldi	r30, 0x36	; 54
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	80 81       	ld	r24, Z
 c50:	28 2f       	mov	r18, r24
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	8b 81       	ldd	r24, Y+3	; 0x03
 c56:	88 2f       	mov	r24, r24
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	a9 01       	movw	r20, r18
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_U8GetPinVal+0xa0>
 c5e:	55 95       	asr	r21
 c60:	47 95       	ror	r20
 c62:	8a 95       	dec	r24
 c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_U8GetPinVal+0x9c>
 c66:	ca 01       	movw	r24, r20
 c68:	81 70       	andi	r24, 0x01	; 1
 c6a:	ec 81       	ldd	r30, Y+4	; 0x04
 c6c:	fd 81       	ldd	r31, Y+5	; 0x05
 c6e:	80 83       	st	Z, r24
 c70:	27 c0       	rjmp	.+78     	; 0xcc0 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 2:
				{
					*u8_Val=GET_BIT(PINC_REG,Copy_u8PinNo);
 c72:	e3 e3       	ldi	r30, 0x33	; 51
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	80 81       	ld	r24, Z
 c78:	28 2f       	mov	r18, r24
 c7a:	30 e0       	ldi	r19, 0x00	; 0
 c7c:	8b 81       	ldd	r24, Y+3	; 0x03
 c7e:	88 2f       	mov	r24, r24
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	a9 01       	movw	r20, r18
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_U8GetPinVal+0xc8>
 c86:	55 95       	asr	r21
 c88:	47 95       	ror	r20
 c8a:	8a 95       	dec	r24
 c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_U8GetPinVal+0xc4>
 c8e:	ca 01       	movw	r24, r20
 c90:	81 70       	andi	r24, 0x01	; 1
 c92:	ec 81       	ldd	r30, Y+4	; 0x04
 c94:	fd 81       	ldd	r31, Y+5	; 0x05
 c96:	80 83       	st	Z, r24
 c98:	13 c0       	rjmp	.+38     	; 0xcc0 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 3:
				{
					*u8_Val=GET_BIT(PIND_REG,Copy_u8PinNo);
 c9a:	e0 e3       	ldi	r30, 0x30	; 48
 c9c:	f0 e0       	ldi	r31, 0x00	; 0
 c9e:	80 81       	ld	r24, Z
 ca0:	28 2f       	mov	r18, r24
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	8b 81       	ldd	r24, Y+3	; 0x03
 ca6:	88 2f       	mov	r24, r24
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	a9 01       	movw	r20, r18
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <DIO_U8GetPinVal+0xf0>
 cae:	55 95       	asr	r21
 cb0:	47 95       	ror	r20
 cb2:	8a 95       	dec	r24
 cb4:	e2 f7       	brpl	.-8      	; 0xcae <DIO_U8GetPinVal+0xec>
 cb6:	ca 01       	movw	r24, r20
 cb8:	81 70       	andi	r24, 0x01	; 1
 cba:	ec 81       	ldd	r30, Y+4	; 0x04
 cbc:	fd 81       	ldd	r31, Y+5	; 0x05
 cbe:	80 83       	st	Z, r24
	{
		Local_Status=RT_NOK;
	}


		return Local_Status;
 cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
 cc2:	27 96       	adiw	r28, 0x07	; 7
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	f8 94       	cli
 cc8:	de bf       	out	0x3e, r29	; 62
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	cd bf       	out	0x3d, r28	; 61
 cce:	cf 91       	pop	r28
 cd0:	df 91       	pop	r29
 cd2:	08 95       	ret

00000cd4 <main>:


void INT0_INTERRUPT(void);

int main(void)
{
 cd4:	df 93       	push	r29
 cd6:	cf 93       	push	r28
 cd8:	cd b7       	in	r28, 0x3d	; 61
 cda:	de b7       	in	r29, 0x3e	; 62

	PORT_VoidInit();
 cdc:	0e 94 3e 00 	call	0x7c	; 0x7c <PORT_VoidInit>
	SendAddress_Callback(INT0_INTERRUPT,0);
 ce0:	8d e7       	ldi	r24, 0x7D	; 125
 ce2:	96 e0       	ldi	r25, 0x06	; 6
 ce4:	60 e0       	ldi	r22, 0x00	; 0
 ce6:	0e 94 40 02 	call	0x480	; 0x480 <SendAddress_Callback>
    EXTI_VidEnableOrDisableGIE(ENABLE);
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	0e 94 62 00 	call	0xc4	; 0xc4 <EXTI_VidEnableOrDisableGIE>
    EXTI_voidEnableOrDisableInterruptPin_Prebuild();
 cf0:	0e 94 03 01 	call	0x206	; 0x206 <EXTI_voidEnableOrDisableInterruptPin_Prebuild>
    EXTI_VidControlSense_Prebuild();
 cf4:	0e 94 16 02 	call	0x42c	; 0x42c <EXTI_VidControlSense_Prebuild>
 cf8:	ff cf       	rjmp	.-2      	; 0xcf8 <main+0x24>

00000cfa <INT0_INTERRUPT>:
	return 0;

}

void INT0_INTERRUPT()
{
 cfa:	df 93       	push	r29
 cfc:	cf 93       	push	r28
 cfe:	cd b7       	in	r28, 0x3d	; 61
 d00:	de b7       	in	r29, 0x3e	; 62
	PORTA_REG^= (1 << 0);
 d02:	ab e3       	ldi	r26, 0x3B	; 59
 d04:	b0 e0       	ldi	r27, 0x00	; 0
 d06:	eb e3       	ldi	r30, 0x3B	; 59
 d08:	f0 e0       	ldi	r31, 0x00	; 0
 d0a:	90 81       	ld	r25, Z
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	89 27       	eor	r24, r25
 d10:	8c 93       	st	X, r24
}
 d12:	cf 91       	pop	r28
 d14:	df 91       	pop	r29
 d16:	08 95       	ret

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>

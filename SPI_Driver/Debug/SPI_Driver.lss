
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002c82  00002d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00002d1e  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001336  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006672  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000067d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000089a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000aa2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000abac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e8       	ldi	r30, 0x82	; 130
      78:	fc e2       	ldi	r31, 0x2C	; 44
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <main>
      8a:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SPI_VoidSlaveInit>:
#include "SPI_private.h"
#include "SPI_REG.h"


 void SPI_VoidSlaveInit()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	 /*Enable Master Mode*/
	 CLR_BIT(SPCR_REG,SPCR_REG_MSTR_PIN);
     ca8:	ad e2       	ldi	r26, 0x2D	; 45
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ed e2       	ldi	r30, 0x2D	; 45
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 7e       	andi	r24, 0xEF	; 239
     cb4:	8c 93       	st	X, r24
	  *  	 SET_BIT(SPI_PORT,MISO_PIN);
	  *  	 CLR_BIT(SPI_PORT,SS_PIN );
	  *  	 CLR_BIT(SPI_PORT,SCK_PIN);
	  *
	  */
	 u8 Temp = SPI_PORT;
     cb6:	e7 e3       	ldi	r30, 0x37	; 55
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	89 83       	std	Y+1, r24	; 0x01
	 Temp&=SLAVE_MODE_CONFIGURATIONS_PORTSPI_MASK;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	89 83       	std	Y+1, r24	; 0x01
	 Temp|=SLAVE_MODE_CONFIGURATIONS_PORTSPI;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	80 64       	ori	r24, 0x40	; 64
     cc8:	89 83       	std	Y+1, r24	; 0x01
	 SPI_PORT = Temp;
     cca:	e7 e3       	ldi	r30, 0x37	; 55
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	80 83       	st	Z, r24

	 /*Enable SPI*/
	 SET_BIT(SPCR_REG,SPCR_REG_SPE_PIN);
     cd2:	ad e2       	ldi	r26, 0x2D	; 45
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ed e2       	ldi	r30, 0x2D	; 45
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	8c 93       	st	X, r24

}
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <SPI_VoidMasterInit>:
 void SPI_VoidMasterInit()
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	0f 92       	push	r0
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62


	 /*Enable Master Mode*/
	 SET_BIT(SPCR_REG,SPCR_REG_MSTR_PIN);
     cf2:	ad e2       	ldi	r26, 0x2D	; 45
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ed e2       	ldi	r30, 0x2D	; 45
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	8c 93       	st	X, r24
	 * CLR_BIT(SPI_PORT,MISO_PIN);
	 * //we make it Input ,as if we need it to make Master as a slave   ,We must make it Pulled up
	 * CLR_BIT(SPI_PORT,SS_PIN);
	 * SET_BIT(SPI_PORT,SCK_PIN);
	 */
	 u8 Temp = SPI_PORT;
     d00:	e7 e3       	ldi	r30, 0x37	; 55
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	89 83       	std	Y+1, r24	; 0x01
	 Temp&=MASTER_MODE_CONFIGURATIONS_PORTSPI_MASK;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	89 83       	std	Y+1, r24	; 0x01
	 Temp|=MASTER_MODE_CONFIGURATIONS_PORTSPI;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	80 6a       	ori	r24, 0xA0	; 160
     d12:	89 83       	std	Y+1, r24	; 0x01
	 SPI_PORT=Temp;
     d14:	e7 e3       	ldi	r30, 0x37	; 55
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	80 83       	st	Z, r24

	 /*Setting Clock Prescaler*/
	 SPCR_REG&=PRESCALLER_MASK;
     d1c:	ad e2       	ldi	r26, 0x2D	; 45
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ed e2       	ldi	r30, 0x2D	; 45
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8c 7f       	andi	r24, 0xFC	; 252
     d28:	8c 93       	st	X, r24
	 SPCR_REG|=CLOCK_PRESCALLER;
     d2a:	ad e2       	ldi	r26, 0x2D	; 45
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ed e2       	ldi	r30, 0x2D	; 45
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	83 60       	ori	r24, 0x03	; 3
     d36:	8c 93       	st	X, r24

            if((CLOCK_PRESCALLER==PRESCALLER_DIV_4 )||(CLOCK_PRESCALLER==PRESCALLER_DIV_16)||(CLOCK_PRESCALLER==PRESCALLER_DIV_64 )||(CLOCK_PRESCALLER==PRESCALLER_DIV_128 ))
				{

					 CLR_BIT(SPSR_REG,SPSR_REG_SPI2X_PIN);
     d38:	ae e2       	ldi	r26, 0x2E	; 46
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ee e2       	ldi	r30, 0x2E	; 46
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8e 7f       	andi	r24, 0xFE	; 254
     d44:	8c 93       	st	X, r24

					 CLR_BIT(SPSR_REG,SPSR_REG_SPI2X_PIN);
				}

	  /*Enable SPI*/
		 SET_BIT(SPCR_REG,SPCR_REG_SPE_PIN);
     d46:	ad e2       	ldi	r26, 0x2D	; 45
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ed e2       	ldi	r30, 0x2D	; 45
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	8c 93       	st	X, r24
}
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <SPI_VidInit>:

void SPI_VidInit(void)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
			/*
			 * to Select the Data order LSB First or MSB First
			 */
		#if(DATA_ORDER==DATA_ORDER_LSB_FIRST)
			{
				SET_BIT(SPCR_REG,SPCR_REG_DORD_PIN);
     d64:	ad e2       	ldi	r26, 0x2D	; 45
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ed e2       	ldi	r30, 0x2D	; 45
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	8c 93       	st	X, r24
			/*
			 * To Enable or Disable the SPI Interrupt
			 */
		#if(SPI_INT==ENABLE)
			{
				SET_BIT(SPCR_REG,SPCR_REG_SPIE_PIN);
     d72:	ad e2       	ldi	r26, 0x2D	; 45
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ed e2       	ldi	r30, 0x2D	; 45
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 68       	ori	r24, 0x80	; 128
     d7e:	8c 93       	st	X, r24
				SET_BIT(SPCR_REG,SPCR_REG_CPOL_PIN);

			}
		#else
			{
				CLR_BIT(SPCR_REG,SPCR_REG_CPOL_PIN);
     d80:	ad e2       	ldi	r26, 0x2D	; 45
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ed e2       	ldi	r30, 0x2D	; 45
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	87 7f       	andi	r24, 0xF7	; 247
     d8c:	8c 93       	st	X, r24
			/*
			 * to Select the Clock Phase (Sample -Setup or Setup -Sample )
			 */
		#if( CLOCK_PHASE== LEADING_SETUP_TRAILING_SAMPLE)
			{
				SET_BIT(SPCR_REG,SPCR_REG_CPHA_PIN);
     d8e:	ad e2       	ldi	r26, 0x2D	; 45
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ed e2       	ldi	r30, 0x2D	; 45
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	84 60       	ori	r24, 0x04	; 4
     d9a:	8c 93       	st	X, r24

				}
			#else
				{

					SPI_VoidSlaveInit();
     d9c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SPI_VoidSlaveInit>

				}
			#endif


}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <SPI_u8Transciever>:



u8 SPI_u8Transciever(u8 Copy_u8Data)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	89 83       	std	Y+1, r24	; 0x01
	/*Setting the Data  Then starting transfer*/
	SPDR_REG=Copy_u8Data;
     db2:	ef e2       	ldi	r30, 0x2F	; 47
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	80 83       	st	Z, r24

	/*waiting until all Data Shifted (transfer)*/
	while(GET_BIT(SPSR_REG,SPSR_REG_SPIF_PIN)==0);
     dba:	ee e2       	ldi	r30, 0x2E	; 46
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	88 23       	and	r24, r24
     dc2:	dc f7       	brge	.-10     	; 0xdba <SPI_u8Transciever+0x14>


	/*to down the SPI flag Reading flag which is finished in previous Step + Reading SPDR  */

	return SPDR_REG;
     dc4:	ef e2       	ldi	r30, 0x2F	; 47
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
}
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <SPI_VidInterruptEnable>:
void SPI_VidInterruptEnable(u8 Copy_u8En_Dis)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8En_Dis==ENABLE)
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	41 f4       	brne	.+16     	; 0xdf4 <SPI_VidInterruptEnable+0x22>
	{
		SET_BIT(SPCR_REG,SPCR_REG_SPIE_PIN);
     de4:	ad e2       	ldi	r26, 0x2D	; 45
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	ed e2       	ldi	r30, 0x2D	; 45
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 68       	ori	r24, 0x80	; 128
     df0:	8c 93       	st	X, r24
     df2:	0a c0       	rjmp	.+20     	; 0xe08 <SPI_VidInterruptEnable+0x36>
	}
	else if(Copy_u8En_Dis==DISABLE)
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 23       	and	r24, r24
     df8:	39 f4       	brne	.+14     	; 0xe08 <SPI_VidInterruptEnable+0x36>
	{
		CLR_BIT(SPCR_REG,SPCR_REG_SPIE_PIN);
     dfa:	ad e2       	ldi	r26, 0x2D	; 45
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ed e2       	ldi	r30, 0x2D	; 45
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 77       	andi	r24, 0x7F	; 127
     e06:	8c 93       	st	X, r24
	}

}
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <SPI_VoidPrescalerSelect>:

 void SPI_VoidPrescalerSelect(u8 Copy_u8PreScaller)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <SPI_VoidPrescalerSelect+0x6>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8Temp=SPCR_REG;
     e1c:	ed e2       	ldi	r30, 0x2D	; 45
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	89 83       	std	Y+1, r24	; 0x01


	if((Copy_u8PreScaller==PRESCALLER_DIV_4 )||(Copy_u8PreScaller==PRESCALLER_DIV_16)||(Copy_u8PreScaller==PRESCALLER_DIV_64 )||(Copy_u8PreScaller==PRESCALLER_DIV_128 ))
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 23       	and	r24, r24
     e28:	49 f0       	breq	.+18     	; 0xe3c <SPI_VoidPrescalerSelect+0x2c>
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	31 f0       	breq	.+12     	; 0xe3c <SPI_VoidPrescalerSelect+0x2c>
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	19 f0       	breq	.+6      	; 0xe3c <SPI_VoidPrescalerSelect+0x2c>
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	99 f4       	brne	.+38     	; 0xe62 <SPI_VoidPrescalerSelect+0x52>
	{
		Local_u8Temp&=PRESCALLER_MASK;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	8c 7f       	andi	r24, 0xFC	; 252
     e40:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Temp|=Copy_u8PreScaller;
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	89 2b       	or	r24, r25
     e48:	89 83       	std	Y+1, r24	; 0x01
		SPCR_REG=Local_u8Temp;
     e4a:	ed e2       	ldi	r30, 0x2D	; 45
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	80 83       	st	Z, r24
		CLR_BIT(SPSR_REG,SPSR_REG_SPI2X_PIN);
     e52:	ae e2       	ldi	r26, 0x2E	; 46
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ee e2       	ldi	r30, 0x2E	; 46
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	8c 93       	st	X, r24
     e60:	12 c0       	rjmp	.+36     	; 0xe86 <SPI_VoidPrescalerSelect+0x76>

	}
	 else
	{
		 Local_u8Temp&=PRESCALLER_MASK;
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	8c 7f       	andi	r24, 0xFC	; 252
     e66:	89 83       	std	Y+1, r24	; 0x01
		 Local_u8Temp|=Copy_u8PreScaller;
     e68:	99 81       	ldd	r25, Y+1	; 0x01
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	89 2b       	or	r24, r25
     e6e:	89 83       	std	Y+1, r24	; 0x01
		 SPCR_REG=Local_u8Temp;
     e70:	ed e2       	ldi	r30, 0x2D	; 45
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	80 83       	st	Z, r24
		 SET_BIT(SPSR_REG,SPSR_REG_SPI2X_PIN);
     e78:	ae e2       	ldi	r26, 0x2E	; 46
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ee e2       	ldi	r30, 0x2E	; 46
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	8c 93       	st	X, r24
	}
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <PORT_VoidInit>:
#include "PORT_Interface.h"
#include "PORT_REG.h"
#include "PORT_private.h"

void PORT_VoidInit()
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
DDRA_REG=PORTA_DIR;
     e98:	ea e3       	ldi	r30, 0x3A	; 58
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 ef       	ldi	r24, 0xF0	; 240
     e9e:	80 83       	st	Z, r24
DDRB_REG=PORTB_DIR;
     ea0:	e7 e3       	ldi	r30, 0x37	; 55
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 e4       	ldi	r24, 0x40	; 64
     ea6:	80 83       	st	Z, r24
DDRC_REG=PORTC_DIR;
     ea8:	e4 e3       	ldi	r30, 0x34	; 52
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	80 83       	st	Z, r24
DDRD_REG=PORTD_DIR;
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	80 83       	st	Z, r24

PORTA_REG_INITIAL=PORTA_INITIAL_VALUE;
     eb8:	eb e3       	ldi	r30, 0x3B	; 59
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	80 83       	st	Z, r24
PORTB_REG_INITIAL=PORTB_INITIAL_VALUE;
     ec0:	e8 e3       	ldi	r30, 0x38	; 56
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	10 82       	st	Z, r1
PORTC_REG_INITIAL=PORTC_INITIAL_VALUE;
     ec6:	e5 e3       	ldi	r30, 0x35	; 53
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	10 82       	st	Z, r1
PORTD_REG_INITIAL=PORTD_INITIAL_VALUE;
     ecc:	e2 e3       	ldi	r30, 0x32	; 50
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	10 82       	st	Z, r1

}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <DIO_U8SetPortDir>:
#include "DIO_REG.h"
#include "DIO_Interface.h"


u8 DIO_U8SetPortDir(enum PORTS Copy_u8PortNo,u8  Copy_u8dDir)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_U8SetPortDir+0x6>
     ede:	00 d0       	rcall	.+0      	; 0xee0 <DIO_U8SetPortDir+0x8>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	8a 83       	std	Y+2, r24	; 0x02
     ee8:	6b 83       	std	Y+3, r22	; 0x03

	 u8 Local_Status=RT_OK;
     eea:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo<0||Copy_u8PortNo>3)
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <DIO_U8SetPortDir+0x20>
{
	Local_Status=RT_NOK;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	32 c0       	rjmp	.+100    	; 0xf5c <DIO_U8SetPortDir+0x84>

}
else
{
	switch(Copy_u8PortNo)
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3d 83       	std	Y+5, r19	; 0x05
     f00:	2c 83       	std	Y+4, r18	; 0x04
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	d1 f0       	breq	.+52     	; 0xf40 <DIO_U8SetPortDir+0x68>
     f0c:	2c 81       	ldd	r18, Y+4	; 0x04
     f0e:	3d 81       	ldd	r19, Y+5	; 0x05
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <DIO_U8SetPortDir+0x48>
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	9d 81       	ldd	r25, Y+5	; 0x05
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	61 f0       	breq	.+24     	; 0xf36 <DIO_U8SetPortDir+0x5e>
     f1e:	1e c0       	rjmp	.+60     	; 0xf5c <DIO_U8SetPortDir+0x84>
     f20:	2c 81       	ldd	r18, Y+4	; 0x04
     f22:	3d 81       	ldd	r19, Y+5	; 0x05
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	81 f0       	breq	.+32     	; 0xf4a <DIO_U8SetPortDir+0x72>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	81 f0       	breq	.+32     	; 0xf54 <DIO_U8SetPortDir+0x7c>
     f34:	13 c0       	rjmp	.+38     	; 0xf5c <DIO_U8SetPortDir+0x84>
	{
	case 0:{DDRA_REG=Copy_u8dDir; break;}
     f36:	ea e3       	ldi	r30, 0x3A	; 58
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	80 83       	st	Z, r24
     f3e:	0e c0       	rjmp	.+28     	; 0xf5c <DIO_U8SetPortDir+0x84>
	case 1:{DDRB_REG=Copy_u8dDir; break;}
     f40:	e7 e3       	ldi	r30, 0x37	; 55
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	80 83       	st	Z, r24
     f48:	09 c0       	rjmp	.+18     	; 0xf5c <DIO_U8SetPortDir+0x84>
	case 2:{DDRC_REG=Copy_u8dDir; break;}
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 83       	st	Z, r24
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <DIO_U8SetPortDir+0x84>
	case 3:{DDRD_REG=Copy_u8dDir; break;}
     f54:	e1 e3       	ldi	r30, 0x31	; 49
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	80 83       	st	Z, r24
	}
}
return Local_Status;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <DIO_U8SetPortVal>:

u8 DIO_U8SetPortVal(enum PORTS Copy_u8PortNo , u8 Copy_Val)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <DIO_U8SetPortVal+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_U8SetPortVal+0x8>
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Status=RT_OK;
     f80:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <0||Copy_u8PortNo>3)
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	18 f0       	brcs	.+6      	; 0xf8e <DIO_U8SetPortVal+0x20>
	{
		 Local_Status=RT_NOK;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	32 c0       	rjmp	.+100    	; 0xff2 <DIO_U8SetPortVal+0x84>

	}
	else
	{
		switch(Copy_u8PortNo)
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3d 83       	std	Y+5, r19	; 0x05
     f96:	2c 83       	std	Y+4, r18	; 0x04
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	d1 f0       	breq	.+52     	; 0xfd6 <DIO_U8SetPortVal+0x68>
     fa2:	2c 81       	ldd	r18, Y+4	; 0x04
     fa4:	3d 81       	ldd	r19, Y+5	; 0x05
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	2c f4       	brge	.+10     	; 0xfb6 <DIO_U8SetPortVal+0x48>
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	61 f0       	breq	.+24     	; 0xfcc <DIO_U8SetPortVal+0x5e>
     fb4:	1e c0       	rjmp	.+60     	; 0xff2 <DIO_U8SetPortVal+0x84>
     fb6:	2c 81       	ldd	r18, Y+4	; 0x04
     fb8:	3d 81       	ldd	r19, Y+5	; 0x05
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	81 f0       	breq	.+32     	; 0xfe0 <DIO_U8SetPortVal+0x72>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	91 05       	cpc	r25, r1
     fc8:	81 f0       	breq	.+32     	; 0xfea <DIO_U8SetPortVal+0x7c>
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <DIO_U8SetPortVal+0x84>
		{
		case 0:{PORTA_REG=Copy_Val; break;}
     fcc:	eb e3       	ldi	r30, 0x3B	; 59
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	80 83       	st	Z, r24
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <DIO_U8SetPortVal+0x84>
		case 1:{PORTB_REG=Copy_Val; break;}
     fd6:	e8 e3       	ldi	r30, 0x38	; 56
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	80 83       	st	Z, r24
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <DIO_U8SetPortVal+0x84>
		case 2:{PORTC_REG=Copy_Val; break;}
     fe0:	e5 e3       	ldi	r30, 0x35	; 53
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	80 83       	st	Z, r24
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <DIO_U8SetPortVal+0x84>
		case 3:{PORTD_REG=Copy_Val; break;}
     fea:	e2 e3       	ldi	r30, 0x32	; 50
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01

}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <DIO_U8GetPortVal>:

u8 DIO_U8GetPortVal(enum PORTS Copy_u8PortNo, u8* u8_Val)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <DIO_U8GetPortVal+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_U8GetPortVal+0x8>
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_U8GetPortVal+0xa>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	7c 83       	std	Y+4, r23	; 0x04
    1016:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_Status=RT_OK;
    1018:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo<0|| Copy_u8PortNo>3)
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	18 f0       	brcs	.+6      	; 0x1026 <DIO_U8GetPortVal+0x22>
	{
		Local_Status=RT_NOK;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	3a c0       	rjmp	.+116    	; 0x109a <DIO_U8GetPortVal+0x96>

	}
	else
	{
		switch(Copy_u8PortNo)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3e 83       	std	Y+6, r19	; 0x06
    102e:	2d 83       	std	Y+5, r18	; 0x05
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	e1 f0       	breq	.+56     	; 0x1072 <DIO_U8GetPortVal+0x6e>
    103a:	2d 81       	ldd	r18, Y+5	; 0x05
    103c:	3e 81       	ldd	r19, Y+6	; 0x06
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <DIO_U8GetPortVal+0x4a>
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	61 f0       	breq	.+24     	; 0x1064 <DIO_U8GetPortVal+0x60>
    104c:	26 c0       	rjmp	.+76     	; 0x109a <DIO_U8GetPortVal+0x96>
    104e:	2d 81       	ldd	r18, Y+5	; 0x05
    1050:	3e 81       	ldd	r19, Y+6	; 0x06
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	a1 f0       	breq	.+40     	; 0x1080 <DIO_U8GetPortVal+0x7c>
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	b1 f0       	breq	.+44     	; 0x108e <DIO_U8GetPortVal+0x8a>
    1062:	1b c0       	rjmp	.+54     	; 0x109a <DIO_U8GetPortVal+0x96>
		{
		case 0:{*u8_Val=PINA_REG; break;}
    1064:	e9 e3       	ldi	r30, 0x39	; 57
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	eb 81       	ldd	r30, Y+3	; 0x03
    106c:	fc 81       	ldd	r31, Y+4	; 0x04
    106e:	80 83       	st	Z, r24
    1070:	14 c0       	rjmp	.+40     	; 0x109a <DIO_U8GetPortVal+0x96>
		case 1:{*u8_Val=PINB_REG; break;}
    1072:	e6 e3       	ldi	r30, 0x36	; 54
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	eb 81       	ldd	r30, Y+3	; 0x03
    107a:	fc 81       	ldd	r31, Y+4	; 0x04
    107c:	80 83       	st	Z, r24
    107e:	0d c0       	rjmp	.+26     	; 0x109a <DIO_U8GetPortVal+0x96>
		case 2:{*u8_Val=PINC_REG; break;}
    1080:	e3 e3       	ldi	r30, 0x33	; 51
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	eb 81       	ldd	r30, Y+3	; 0x03
    1088:	fc 81       	ldd	r31, Y+4	; 0x04
    108a:	80 83       	st	Z, r24
    108c:	06 c0       	rjmp	.+12     	; 0x109a <DIO_U8GetPortVal+0x96>
		case 3:{*u8_Val=PIND_REG; break;}
    108e:	e0 e3       	ldi	r30, 0x30	; 48
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	eb 81       	ldd	r30, Y+3	; 0x03
    1096:	fc 81       	ldd	r31, Y+4	; 0x04
    1098:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
    109a:	89 81       	ldd	r24, Y+1	; 0x01

}
    109c:	26 96       	adiw	r28, 0x06	; 6
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_U8SetPinDir>:

u8 DIO_U8SetPinDir(enum PORTS Copy_u8PortNo , enum PINS Copy_u8PinNo,u8 Copy_u8Dir)
{	u8 Local_Status=RT_OK;
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	28 97       	sbiw	r28, 0x08	; 8
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	6b 83       	std	Y+3, r22	; 0x03
    10c6:	4c 83       	std	Y+4, r20	; 0x04
    10c8:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_u8Dir == HIGH)
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <DIO_U8SetPinDir+0x24>
    10d0:	6f c0       	rjmp	.+222    	; 0x11b0 <DIO_U8SetPinDir+0x102>
		{
			switch(Copy_u8PortNo)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	38 87       	std	Y+8, r19	; 0x08
    10da:	2f 83       	std	Y+7, r18	; 0x07
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	98 85       	ldd	r25, Y+8	; 0x08
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	49 f1       	breq	.+82     	; 0x1138 <DIO_U8SetPinDir+0x8a>
    10e6:	2f 81       	ldd	r18, Y+7	; 0x07
    10e8:	38 85       	ldd	r19, Y+8	; 0x08
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	2c f4       	brge	.+10     	; 0x10fa <DIO_U8SetPinDir+0x4c>
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	98 85       	ldd	r25, Y+8	; 0x08
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	61 f0       	breq	.+24     	; 0x1110 <DIO_U8SetPinDir+0x62>
    10f8:	d5 c0       	rjmp	.+426    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
    10fa:	2f 81       	ldd	r18, Y+7	; 0x07
    10fc:	38 85       	ldd	r19, Y+8	; 0x08
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	71 f1       	breq	.+92     	; 0x1160 <DIO_U8SetPinDir+0xb2>
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	98 85       	ldd	r25, Y+8	; 0x08
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	e9 f1       	breq	.+122    	; 0x1188 <DIO_U8SetPinDir+0xda>
    110e:	ca c0       	rjmp	.+404    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
			{
			case 0:
			{
				SET_BIT(DDRA_REG,Copy_u8PinNo);
    1110:	aa e3       	ldi	r26, 0x3A	; 58
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ea e3       	ldi	r30, 0x3A	; 58
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_U8SetPinDir+0x80>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_U8SetPinDir+0x7c>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	b6 c0       	rjmp	.+364    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 1:
			{
				SET_BIT(DDRB_REG,Copy_u8PinNo);
    1138:	a7 e3       	ldi	r26, 0x37	; 55
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_U8SetPinDir+0xa8>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_U8SetPinDir+0xa4>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	a2 c0       	rjmp	.+324    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 2:
			{
				SET_BIT(DDRC_REG,Copy_u8PinNo);
    1160:	a4 e3       	ldi	r26, 0x34	; 52
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_U8SetPinDir+0xd0>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_U8SetPinDir+0xcc>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	8e c0       	rjmp	.+284    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 3:
			{
				SET_BIT(DDRD_REG,Copy_u8PinNo);
    1188:	a1 e3       	ldi	r26, 0x31	; 49
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e1 e3       	ldi	r30, 0x31	; 49
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_U8SetPinDir+0xf8>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_U8SetPinDir+0xf4>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	7a c0       	rjmp	.+244    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
				break;
			}

			}
		}
		else if(Copy_u8Dir==LOW)
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	88 23       	and	r24, r24
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <DIO_U8SetPinDir+0x10a>
    11b6:	74 c0       	rjmp	.+232    	; 0x12a0 <DIO_U8SetPinDir+0x1f2>
		{
			switch(Copy_u8PortNo)
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3e 83       	std	Y+6, r19	; 0x06
    11c0:	2d 83       	std	Y+5, r18	; 0x05
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	59 f1       	breq	.+86     	; 0x1222 <DIO_U8SetPinDir+0x174>
    11cc:	2d 81       	ldd	r18, Y+5	; 0x05
    11ce:	3e 81       	ldd	r19, Y+6	; 0x06
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <DIO_U8SetPinDir+0x132>
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	69 f0       	breq	.+26     	; 0x11f8 <DIO_U8SetPinDir+0x14a>
    11de:	62 c0       	rjmp	.+196    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
    11e0:	2d 81       	ldd	r18, Y+5	; 0x05
    11e2:	3e 81       	ldd	r19, Y+6	; 0x06
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	89 f1       	breq	.+98     	; 0x124c <DIO_U8SetPinDir+0x19e>
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <DIO_U8SetPinDir+0x148>
    11f4:	40 c0       	rjmp	.+128    	; 0x1276 <DIO_U8SetPinDir+0x1c8>
    11f6:	56 c0       	rjmp	.+172    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
			{
				case 0:
				{
					CLR_BIT(DDRA_REG,Copy_u8PinNo);
    11f8:	aa e3       	ldi	r26, 0x3A	; 58
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ea e3       	ldi	r30, 0x3A	; 58
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_U8SetPinDir+0x168>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_U8SetPinDir+0x164>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	41 c0       	rjmp	.+130    	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 1:
				{
					CLR_BIT(DDRB_REG,Copy_u8PinNo);
    1222:	a7 e3       	ldi	r26, 0x37	; 55
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_U8SetPinDir+0x192>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_U8SetPinDir+0x18e>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	2c c0       	rjmp	.+88     	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 2:
				{
					CLR_BIT(DDRC_REG,Copy_u8PinNo);
    124c:	a4 e3       	ldi	r26, 0x34	; 52
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e4 e3       	ldi	r30, 0x34	; 52
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_U8SetPinDir+0x1bc>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_U8SetPinDir+0x1b8>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	17 c0       	rjmp	.+46     	; 0x12a4 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 3:
				{
					CLR_BIT(DDRD_REG,Copy_u8PinNo);
    1276:	a1 e3       	ldi	r26, 0x31	; 49
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e1 e3       	ldi	r30, 0x31	; 49
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_U8SetPinDir+0x1e6>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_U8SetPinDir+0x1e2>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_U8SetPinDir+0x1f6>

			}
		}
		else
		{
			Local_Status=RT_NOK;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01

}
    12a6:	28 96       	adiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <DIO_U8SetPinVal>:

u8 DIO_U8SetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo,u8 Copy_Val)

{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	28 97       	sbiw	r28, 0x08	; 8
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	8a 83       	std	Y+2, r24	; 0x02
    12ce:	6b 83       	std	Y+3, r22	; 0x03
    12d0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    12d2:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_Val == HIGH)
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <DIO_U8SetPinVal+0x24>
    12da:	6f c0       	rjmp	.+222    	; 0x13ba <DIO_U8SetPinVal+0x102>
		{
			switch(Copy_u8PortNo)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	38 87       	std	Y+8, r19	; 0x08
    12e4:	2f 83       	std	Y+7, r18	; 0x07
    12e6:	8f 81       	ldd	r24, Y+7	; 0x07
    12e8:	98 85       	ldd	r25, Y+8	; 0x08
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	49 f1       	breq	.+82     	; 0x1342 <DIO_U8SetPinVal+0x8a>
    12f0:	2f 81       	ldd	r18, Y+7	; 0x07
    12f2:	38 85       	ldd	r19, Y+8	; 0x08
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <DIO_U8SetPinVal+0x4c>
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	98 85       	ldd	r25, Y+8	; 0x08
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <DIO_U8SetPinVal+0x62>
    1302:	d5 c0       	rjmp	.+426    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
    1304:	2f 81       	ldd	r18, Y+7	; 0x07
    1306:	38 85       	ldd	r19, Y+8	; 0x08
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	71 f1       	breq	.+92     	; 0x136a <DIO_U8SetPinVal+0xb2>
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	98 85       	ldd	r25, Y+8	; 0x08
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	e9 f1       	breq	.+122    	; 0x1392 <DIO_U8SetPinVal+0xda>
    1318:	ca c0       	rjmp	.+404    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
			{
			case 0:
			{
				SET_BIT(PORTA_REG,Copy_u8PinNo);
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_U8SetPinVal+0x80>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_U8SetPinVal+0x7c>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	b6 c0       	rjmp	.+364    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 1:
			{
				SET_BIT(PORTB_REG,Copy_u8PinNo);
    1342:	a8 e3       	ldi	r26, 0x38	; 56
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_U8SetPinVal+0xa8>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_U8SetPinVal+0xa4>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	a2 c0       	rjmp	.+324    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 2:
			{
				SET_BIT(PORTC_REG,Copy_u8PinNo);
    136a:	a5 e3       	ldi	r26, 0x35	; 53
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e3       	ldi	r30, 0x35	; 53
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_U8SetPinVal+0xd0>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_U8SetPinVal+0xcc>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	8e c0       	rjmp	.+284    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 3:
			{
				SET_BIT(PORTD_REG,Copy_u8PinNo);
    1392:	a2 e3       	ldi	r26, 0x32	; 50
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_U8SetPinVal+0xf8>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_U8SetPinVal+0xf4>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	7a c0       	rjmp	.+244    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
				break;
			}

			}
		}
		else if(Copy_Val==LOW)
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	88 23       	and	r24, r24
    13be:	09 f0       	breq	.+2      	; 0x13c2 <DIO_U8SetPinVal+0x10a>
    13c0:	74 c0       	rjmp	.+232    	; 0x14aa <DIO_U8SetPinVal+0x1f2>
		{
			switch(Copy_u8PortNo)
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3e 83       	std	Y+6, r19	; 0x06
    13ca:	2d 83       	std	Y+5, r18	; 0x05
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	59 f1       	breq	.+86     	; 0x142c <DIO_U8SetPinVal+0x174>
    13d6:	2d 81       	ldd	r18, Y+5	; 0x05
    13d8:	3e 81       	ldd	r19, Y+6	; 0x06
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	2c f4       	brge	.+10     	; 0x13ea <DIO_U8SetPinVal+0x132>
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f0       	breq	.+26     	; 0x1402 <DIO_U8SetPinVal+0x14a>
    13e8:	62 c0       	rjmp	.+196    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	3e 81       	ldd	r19, Y+6	; 0x06
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	89 f1       	breq	.+98     	; 0x1456 <DIO_U8SetPinVal+0x19e>
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <DIO_U8SetPinVal+0x148>
    13fe:	40 c0       	rjmp	.+128    	; 0x1480 <DIO_U8SetPinVal+0x1c8>
    1400:	56 c0       	rjmp	.+172    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
			{
				case 0:
				{
					CLR_BIT(PORTA_REG,Copy_u8PinNo);
    1402:	ab e3       	ldi	r26, 0x3B	; 59
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_U8SetPinVal+0x168>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_U8SetPinVal+0x164>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	41 c0       	rjmp	.+130    	; 0x14ae <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 1:
				{
					CLR_BIT(PORTB_REG,Copy_u8PinNo);
    142c:	a8 e3       	ldi	r26, 0x38	; 56
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e8 e3       	ldi	r30, 0x38	; 56
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_U8SetPinVal+0x192>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_U8SetPinVal+0x18e>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	2c c0       	rjmp	.+88     	; 0x14ae <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 2:
				{
					CLR_BIT(PORTC_REG,Copy_u8PinNo);
    1456:	a5 e3       	ldi	r26, 0x35	; 53
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e3       	ldi	r30, 0x35	; 53
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_U8SetPinVal+0x1bc>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_U8SetPinVal+0x1b8>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	17 c0       	rjmp	.+46     	; 0x14ae <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 3:
				{
					CLR_BIT(PORTD_REG,Copy_u8PinNo);
    1480:	a2 e3       	ldi	r26, 0x32	; 50
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_U8SetPinVal+0x1e6>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_U8SetPinVal+0x1e2>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_U8SetPinVal+0x1f6>

			}
		}
		else
		{
			Local_Status=RT_NOK;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	28 96       	adiw	r28, 0x08	; 8
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <DIO_U8GetPinVal>:

u8 DIO_U8GetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo, u8* u8_Val)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	27 97       	sbiw	r28, 0x07	; 7
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	8a 83       	std	Y+2, r24	; 0x02
    14d8:	6b 83       	std	Y+3, r22	; 0x03
    14da:	5d 83       	std	Y+5, r21	; 0x05
    14dc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    14de:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
	{
		if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
		{

				switch(Copy_u8PortNo)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3f 83       	std	Y+7, r19	; 0x07
    14e8:	2e 83       	std	Y+6, r18	; 0x06
    14ea:	4e 81       	ldd	r20, Y+6	; 0x06
    14ec:	5f 81       	ldd	r21, Y+7	; 0x07
    14ee:	41 30       	cpi	r20, 0x01	; 1
    14f0:	51 05       	cpc	r21, r1
    14f2:	59 f1       	breq	.+86     	; 0x154a <DIO_U8GetPinVal+0x88>
    14f4:	8e 81       	ldd	r24, Y+6	; 0x06
    14f6:	9f 81       	ldd	r25, Y+7	; 0x07
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	91 05       	cpc	r25, r1
    14fc:	34 f4       	brge	.+12     	; 0x150a <DIO_U8GetPinVal+0x48>
    14fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1500:	3f 81       	ldd	r19, Y+7	; 0x07
    1502:	21 15       	cp	r18, r1
    1504:	31 05       	cpc	r19, r1
    1506:	69 f0       	breq	.+26     	; 0x1522 <DIO_U8GetPinVal+0x60>
    1508:	5b c0       	rjmp	.+182    	; 0x15c0 <DIO_U8GetPinVal+0xfe>
    150a:	4e 81       	ldd	r20, Y+6	; 0x06
    150c:	5f 81       	ldd	r21, Y+7	; 0x07
    150e:	42 30       	cpi	r20, 0x02	; 2
    1510:	51 05       	cpc	r21, r1
    1512:	79 f1       	breq	.+94     	; 0x1572 <DIO_U8GetPinVal+0xb0>
    1514:	8e 81       	ldd	r24, Y+6	; 0x06
    1516:	9f 81       	ldd	r25, Y+7	; 0x07
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <DIO_U8GetPinVal+0x5e>
    151e:	3d c0       	rjmp	.+122    	; 0x159a <DIO_U8GetPinVal+0xd8>
    1520:	4f c0       	rjmp	.+158    	; 0x15c0 <DIO_U8GetPinVal+0xfe>
				{
				case 0:
				{
					*u8_Val=GET_BIT(PINA_REG,Copy_u8PinNo);
    1522:	e9 e3       	ldi	r30, 0x39	; 57
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a9 01       	movw	r20, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_U8GetPinVal+0x78>
    1536:	55 95       	asr	r21
    1538:	47 95       	ror	r20
    153a:	8a 95       	dec	r24
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_U8GetPinVal+0x74>
    153e:	ca 01       	movw	r24, r20
    1540:	81 70       	andi	r24, 0x01	; 1
    1542:	ec 81       	ldd	r30, Y+4	; 0x04
    1544:	fd 81       	ldd	r31, Y+5	; 0x05
    1546:	80 83       	st	Z, r24
    1548:	3b c0       	rjmp	.+118    	; 0x15c0 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 1:
				{
					*u8_Val=GET_BIT(PINB_REG,Copy_u8PinNo);
    154a:	e6 e3       	ldi	r30, 0x36	; 54
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a9 01       	movw	r20, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_U8GetPinVal+0xa0>
    155e:	55 95       	asr	r21
    1560:	47 95       	ror	r20
    1562:	8a 95       	dec	r24
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_U8GetPinVal+0x9c>
    1566:	ca 01       	movw	r24, r20
    1568:	81 70       	andi	r24, 0x01	; 1
    156a:	ec 81       	ldd	r30, Y+4	; 0x04
    156c:	fd 81       	ldd	r31, Y+5	; 0x05
    156e:	80 83       	st	Z, r24
    1570:	27 c0       	rjmp	.+78     	; 0x15c0 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 2:
				{
					*u8_Val=GET_BIT(PINC_REG,Copy_u8PinNo);
    1572:	e3 e3       	ldi	r30, 0x33	; 51
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_U8GetPinVal+0xc8>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_U8GetPinVal+0xc4>
    158e:	ca 01       	movw	r24, r20
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	ec 81       	ldd	r30, Y+4	; 0x04
    1594:	fd 81       	ldd	r31, Y+5	; 0x05
    1596:	80 83       	st	Z, r24
    1598:	13 c0       	rjmp	.+38     	; 0x15c0 <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 3:
				{
					*u8_Val=GET_BIT(PIND_REG,Copy_u8PinNo);
    159a:	e0 e3       	ldi	r30, 0x30	; 48
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a9 01       	movw	r20, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_U8GetPinVal+0xf0>
    15ae:	55 95       	asr	r21
    15b0:	47 95       	ror	r20
    15b2:	8a 95       	dec	r24
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_U8GetPinVal+0xec>
    15b6:	ca 01       	movw	r24, r20
    15b8:	81 70       	andi	r24, 0x01	; 1
    15ba:	ec 81       	ldd	r30, Y+4	; 0x04
    15bc:	fd 81       	ldd	r31, Y+5	; 0x05
    15be:	80 83       	st	Z, r24
	{
		Local_Status=RT_NOK;
	}


		return Local_Status;
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c2:	27 96       	adiw	r28, 0x07	; 7
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <STEPPER_MOTOR_VidRotateClockWiseFullStep>:



/*if you want to rotate the motor clockwise*/
void STEPPER_MOTOR_VidRotateClockWiseFullStep(void)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	60 97       	sbiw	r28, 0x10	; 16
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_CoilIterator1;
	u8 Local_CoilIterator2;
  for(Local_CoilIterator1=BlueCoil; Local_CoilIterator1<=OrangeCoil ;Local_CoilIterator1++)
    15e8:	18 8a       	std	Y+16, r1	; 0x10
    15ea:	8e c0       	rjmp	.+284    	; 0x1708 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x134>
	{
	  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,HIGH);
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	68 89       	ldd	r22, Y+16	; 0x10
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	  for(Local_CoilIterator2=Local_CoilIterator1+1; Local_CoilIterator2<=OrangeCoil ;Local_CoilIterator2++)
    15f6:	88 89       	ldd	r24, Y+16	; 0x10
    15f8:	8f 5f       	subi	r24, 0xFF	; 255
    15fa:	8f 87       	std	Y+15, r24	; 0x0f
    15fc:	08 c0       	rjmp	.+16     	; 0x160e <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x3a>
	  {
		  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator2,LOW);
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	6f 85       	ldd	r22, Y+15	; 0x0f
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	u8 Local_CoilIterator1;
	u8 Local_CoilIterator2;
  for(Local_CoilIterator1=BlueCoil; Local_CoilIterator1<=OrangeCoil ;Local_CoilIterator1++)
	{
	  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,HIGH);
	  for(Local_CoilIterator2=Local_CoilIterator1+1; Local_CoilIterator2<=OrangeCoil ;Local_CoilIterator2++)
    1608:	8f 85       	ldd	r24, Y+15	; 0x0f
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	8f 87       	std	Y+15, r24	; 0x0f
    160e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	a8 f3       	brcs	.-22     	; 0x15fe <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x2a>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a0 e0       	ldi	r26, 0x00	; 0
    161a:	b0 e4       	ldi	r27, 0x40	; 64
    161c:	8b 87       	std	Y+11, r24	; 0x0b
    161e:	9c 87       	std	Y+12, r25	; 0x0c
    1620:	ad 87       	std	Y+13, r26	; 0x0d
    1622:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	6b 85       	ldd	r22, Y+11	; 0x0b
    1626:	7c 85       	ldd	r23, Y+12	; 0x0c
    1628:	8d 85       	ldd	r24, Y+13	; 0x0d
    162a:	9e 85       	ldd	r25, Y+14	; 0x0e
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a ef       	ldi	r20, 0xFA	; 250
    1632:	54 e4       	ldi	r21, 0x44	; 68
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	8f 83       	std	Y+7, r24	; 0x07
    163e:	98 87       	std	Y+8, r25	; 0x08
    1640:	a9 87       	std	Y+9, r26	; 0x09
    1642:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x92>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x110>
	else if (__tmp > 65535)
    1666:	6f 81       	ldd	r22, Y+7	; 0x07
    1668:	78 85       	ldd	r23, Y+8	; 0x08
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1680:	7c 85       	ldd	r23, Y+12	; 0x0c
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0xf2>
    16a8:	88 ec       	ldi	r24, 0xC8	; 200
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0xe0>
    16b8:	9c 83       	std	Y+4, r25	; 0x04
    16ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0xd4>
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x11c>
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
	  {
		  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator2,LOW);
	  }
	  _delay_ms(2);
	  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,LOW);
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	68 89       	ldd	r22, Y+16	; 0x10
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
/*if you want to rotate the motor clockwise*/
void STEPPER_MOTOR_VidRotateClockWiseFullStep(void)
{
	u8 Local_CoilIterator1;
	u8 Local_CoilIterator2;
  for(Local_CoilIterator1=BlueCoil; Local_CoilIterator1<=OrangeCoil ;Local_CoilIterator1++)
    1702:	88 89       	ldd	r24, Y+16	; 0x10
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	88 8b       	std	Y+16, r24	; 0x10
    1708:	88 89       	ldd	r24, Y+16	; 0x10
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	08 f4       	brcc	.+2      	; 0x1710 <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x13c>
    170e:	6e cf       	rjmp	.-292    	; 0x15ec <STEPPER_MOTOR_VidRotateClockWiseFullStep+0x18>
	  }
	  _delay_ms(2);
	  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,LOW);

	}
}
    1710:	60 96       	adiw	r28, 0x10	; 16
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep>:

/*if you want to rotate the motor unti_clockwise*/
void STEPPER_MOTOR_VidRotateUntiClockWiseFullStep(void)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	60 97       	sbiw	r28, 0x10	; 16
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
	s8 Local_CoilIterator1;
	s8 Local_CoilIterator2;
	  for(Local_CoilIterator1=OrangeCoil; Local_CoilIterator1>=BlueCoil ;Local_CoilIterator1--)
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	88 8b       	std	Y+16, r24	; 0x10
    173a:	91 c0       	rjmp	.+290    	; 0x185e <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x13c>
		{
		  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,HIGH);
    173c:	98 89       	ldd	r25, Y+16	; 0x10
    173e:	83 e0       	ldi	r24, 0x03	; 3
    1740:	69 2f       	mov	r22, r25
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		  for(Local_CoilIterator2=Local_CoilIterator1-1; Local_CoilIterator2>=BlueCoil ;Local_CoilIterator2--)
    1748:	88 89       	ldd	r24, Y+16	; 0x10
    174a:	81 50       	subi	r24, 0x01	; 1
    174c:	8f 87       	std	Y+15, r24	; 0x0f
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x40>
		  {
			  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator2,LOW);
    1750:	9f 85       	ldd	r25, Y+15	; 0x0f
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	69 2f       	mov	r22, r25
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	s8 Local_CoilIterator1;
	s8 Local_CoilIterator2;
	  for(Local_CoilIterator1=OrangeCoil; Local_CoilIterator1>=BlueCoil ;Local_CoilIterator1--)
		{
		  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,HIGH);
		  for(Local_CoilIterator2=Local_CoilIterator1-1; Local_CoilIterator2>=BlueCoil ;Local_CoilIterator2--)
    175c:	8f 85       	ldd	r24, Y+15	; 0x0f
    175e:	81 50       	subi	r24, 0x01	; 1
    1760:	8f 87       	std	Y+15, r24	; 0x0f
    1762:	8f 85       	ldd	r24, Y+15	; 0x0f
    1764:	88 23       	and	r24, r24
    1766:	a4 f7       	brge	.-24     	; 0x1750 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x2e>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e4       	ldi	r27, 0x40	; 64
    1770:	8b 87       	std	Y+11, r24	; 0x0b
    1772:	9c 87       	std	Y+12, r25	; 0x0c
    1774:	ad 87       	std	Y+13, r26	; 0x0d
    1776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8f 83       	std	Y+7, r24	; 0x07
    1792:	98 87       	std	Y+8, r25	; 0x08
    1794:	a9 87       	std	Y+9, r26	; 0x09
    1796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x98>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x116>
	else if (__tmp > 65535)
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0xf8>
    17fc:	88 ec       	ldi	r24, 0xC8	; 200
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0xe6>
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0xda>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	6f 81       	ldd	r22, Y+7	; 0x07
    1826:	78 85       	ldd	r23, Y+8	; 0x08
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x122>
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
		  {
			  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator2,LOW);
		  }
		  _delay_ms(2);
		  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,LOW);
    184c:	98 89       	ldd	r25, Y+16	; 0x10
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	69 2f       	mov	r22, r25
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
/*if you want to rotate the motor unti_clockwise*/
void STEPPER_MOTOR_VidRotateUntiClockWiseFullStep(void)
{
	s8 Local_CoilIterator1;
	s8 Local_CoilIterator2;
	  for(Local_CoilIterator1=OrangeCoil; Local_CoilIterator1>=BlueCoil ;Local_CoilIterator1--)
    1858:	88 89       	ldd	r24, Y+16	; 0x10
    185a:	81 50       	subi	r24, 0x01	; 1
    185c:	88 8b       	std	Y+16, r24	; 0x10
    185e:	88 89       	ldd	r24, Y+16	; 0x10
    1860:	88 23       	and	r24, r24
    1862:	0c f0       	brlt	.+2      	; 0x1866 <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x144>
    1864:	6b cf       	rjmp	.-298    	; 0x173c <STEPPER_MOTOR_VidRotateUntiClockWiseFullStep+0x1a>
		  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,LOW);

		}


}
    1866:	60 96       	adiw	r28, 0x10	; 16
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <STEPPER_MOTOR_VidRotateClockWiseHalfStep>:

/*if you want to rotate the motor clockwise in half step mode*/
void STEPPER_MOTOR_VidRotateClockWiseHalfStep(void)
{
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	c2 56       	subi	r28, 0x62	; 98
    1886:	d0 40       	sbci	r29, 0x00	; 0
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
	    DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,HIGH);
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	63 e0       	ldi	r22, 0x03	; 3
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    18ba:	fe 01       	movw	r30, r28
    18bc:	e1 5a       	subi	r30, 0xA1	; 161
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e4       	ldi	r27, 0x40	; 64
    18c8:	80 83       	st	Z, r24
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	a2 83       	std	Z+2, r26	; 0x02
    18ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	8e 01       	movw	r16, r28
    18d2:	05 5a       	subi	r16, 0xA5	; 165
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	fe 01       	movw	r30, r28
    18d8:	e1 5a       	subi	r30, 0xA1	; 161
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	f8 01       	movw	r30, r16
    18f6:	80 83       	st	Z, r24
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	a2 83       	std	Z+2, r26	; 0x02
    18fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fe:	fe 01       	movw	r30, r28
    1900:	e5 5a       	subi	r30, 0xA5	; 165
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	44 f4       	brge	.+16     	; 0x192c <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0xb4>
		__ticks = 1;
    191c:	fe 01       	movw	r30, r28
    191e:	e7 5a       	subi	r30, 0xA7	; 167
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	64 c0       	rjmp	.+200    	; 0x19f4 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x17c>
	else if (__tmp > 65535)
    192c:	fe 01       	movw	r30, r28
    192e:	e5 5a       	subi	r30, 0xA5	; 165
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	57 e4       	ldi	r21, 0x47	; 71
    1942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	0c f0       	brlt	.+2      	; 0x194c <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0xd4>
    194a:	43 c0       	rjmp	.+134    	; 0x19d2 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	fe 01       	movw	r30, r28
    194e:	e1 5a       	subi	r30, 0xA1	; 161
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8e 01       	movw	r16, r28
    196c:	07 5a       	subi	r16, 0xA7	; 167
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	f8 01       	movw	r30, r16
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
    1982:	1f c0       	rjmp	.+62     	; 0x19c2 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x14a>
    1984:	fe 01       	movw	r30, r28
    1986:	e9 5a       	subi	r30, 0xA9	; 169
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	fe 01       	movw	r30, r28
    1994:	e9 5a       	subi	r30, 0xA9	; 169
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x124>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e9 5a       	subi	r30, 0xA9	; 169
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19aa:	de 01       	movw	r26, r28
    19ac:	a7 5a       	subi	r26, 0xA7	; 167
    19ae:	bf 4f       	sbci	r27, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	e7 5a       	subi	r30, 0xA7	; 167
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	11 96       	adiw	r26, 0x01	; 1
    19be:	9c 93       	st	X, r25
    19c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	fe 01       	movw	r30, r28
    19c4:	e7 5a       	subi	r30, 0xA7	; 167
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	d1 f6       	brne	.-76     	; 0x1984 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x10c>
    19d0:	27 c0       	rjmp	.+78     	; 0x1a20 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	8e 01       	movw	r16, r28
    19d4:	07 5a       	subi	r16, 0xA7	; 167
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	fe 01       	movw	r30, r28
    19da:	e5 5a       	subi	r30, 0xA5	; 165
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	f8 01       	movw	r30, r16
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
    19f4:	de 01       	movw	r26, r28
    19f6:	ab 5a       	subi	r26, 0xAB	; 171
    19f8:	bf 4f       	sbci	r27, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e7 5a       	subi	r30, 0xA7	; 167
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	8d 93       	st	X+, r24
    1a06:	9c 93       	st	X, r25
    1a08:	fe 01       	movw	r30, r28
    1a0a:	eb 5a       	subi	r30, 0xAB	; 171
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x19a>
    1a16:	fe 01       	movw	r30, r28
    1a18:	eb 5a       	subi	r30, 0xAB	; 171
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24

		_delay_ms(2);

		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,HIGH);
    1a20:	83 e0       	ldi	r24, 0x03	; 3
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,HIGH);
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	62 e0       	ldi	r22, 0x02	; 2
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	63 e0       	ldi	r22, 0x03	; 3
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 5a       	subi	r30, 0xAF	; 175
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e4       	ldi	r27, 0x40	; 64
    1a56:	80 83       	st	Z, r24
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	a2 83       	std	Z+2, r26	; 0x02
    1a5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	8e 01       	movw	r16, r28
    1a60:	03 5b       	subi	r16, 0xB3	; 179
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	ef 5a       	subi	r30, 0xAF	; 175
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a ef       	ldi	r20, 0xFA	; 250
    1a78:	54 e4       	ldi	r21, 0x44	; 68
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e3 5b       	subi	r30, 0xB3	; 179
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	44 f4       	brge	.+16     	; 0x1aba <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x242>
		__ticks = 1;
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e5 5b       	subi	r30, 0xB5	; 181
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	64 c0       	rjmp	.+200    	; 0x1b82 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x30a>
	else if (__tmp > 65535)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e3 5b       	subi	r30, 0xB3	; 179
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	0c f0       	brlt	.+2      	; 0x1ada <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x262>
    1ad8:	43 c0       	rjmp	.+134    	; 0x1b60 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	fe 01       	movw	r30, r28
    1adc:	ef 5a       	subi	r30, 0xAF	; 175
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8e 01       	movw	r16, r28
    1afa:	05 5b       	subi	r16, 0xB5	; 181
    1afc:	1f 4f       	sbci	r17, 0xFF	; 255
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
    1b10:	1f c0       	rjmp	.+62     	; 0x1b50 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x2d8>
    1b12:	fe 01       	movw	r30, r28
    1b14:	e7 5b       	subi	r30, 0xB7	; 183
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	88 ec       	ldi	r24, 0xC8	; 200
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
    1b20:	fe 01       	movw	r30, r28
    1b22:	e7 5b       	subi	r30, 0xB7	; 183
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x2b2>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e7 5b       	subi	r30, 0xB7	; 183
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	de 01       	movw	r26, r28
    1b3a:	a5 5b       	subi	r26, 0xB5	; 181
    1b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e5 5b       	subi	r30, 0xB5	; 181
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	9c 93       	st	X, r25
    1b4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	fe 01       	movw	r30, r28
    1b52:	e5 5b       	subi	r30, 0xB5	; 181
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	d1 f6       	brne	.-76     	; 0x1b12 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x29a>
    1b5e:	27 c0       	rjmp	.+78     	; 0x1bae <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	8e 01       	movw	r16, r28
    1b62:	05 5b       	subi	r16, 0xB5	; 181
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	e3 5b       	subi	r30, 0xB3	; 179
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	de 01       	movw	r26, r28
    1b84:	a9 5b       	subi	r26, 0xB9	; 185
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e5 5b       	subi	r30, 0xB5	; 181
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	8d 93       	st	X+, r24
    1b94:	9c 93       	st	X, r25
    1b96:	fe 01       	movw	r30, r28
    1b98:	e9 5b       	subi	r30, 0xB9	; 185
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x328>
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e9 5b       	subi	r30, 0xB9	; 185
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
		_delay_ms(2);

		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,HIGH);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	61 e0       	ldi	r22, 0x01	; 1
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	62 e0       	ldi	r22, 0x02	; 2
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	63 e0       	ldi	r22, 0x03	; 3
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ed 5b       	subi	r30, 0xBD	; 189
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e4       	ldi	r27, 0x40	; 64
    1be4:	80 83       	st	Z, r24
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	a2 83       	std	Z+2, r26	; 0x02
    1bea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	8e 01       	movw	r16, r28
    1bee:	01 5c       	subi	r16, 0xC1	; 193
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	ed 5b       	subi	r30, 0xBD	; 189
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a ef       	ldi	r20, 0xFA	; 250
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	f8 01       	movw	r30, r16
    1c12:	80 83       	st	Z, r24
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	a2 83       	std	Z+2, r26	; 0x02
    1c18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ff 96       	adiw	r30, 0x3f	; 63
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x3c8>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9e af       	std	Y+62, r25	; 0x3e
    1c3c:	8d af       	std	Y+61, r24	; 0x3d
    1c3e:	46 c0       	rjmp	.+140    	; 0x1ccc <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x454>
	else if (__tmp > 65535)
    1c40:	fe 01       	movw	r30, r28
    1c42:	ff 96       	adiw	r30, 0x3f	; 63
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	64 f5       	brge	.+88     	; 0x1cb4 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	ed 5b       	subi	r30, 0xBD	; 189
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e af       	std	Y+62, r25	; 0x3e
    1c88:	8d af       	std	Y+61, r24	; 0x3d
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x432>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c af       	std	Y+60, r25	; 0x3c
    1c92:	8b af       	std	Y+59, r24	; 0x3b
    1c94:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c96:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x420>
    1c9c:	9c af       	std	Y+60, r25	; 0x3c
    1c9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9e af       	std	Y+62, r25	; 0x3e
    1ca8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x414>
    1cb2:	16 c0       	rjmp	.+44     	; 0x1ce0 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ff 96       	adiw	r30, 0x3f	; 63
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e af       	std	Y+62, r25	; 0x3e
    1cca:	8d af       	std	Y+61, r24	; 0x3d
    1ccc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cce:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd0:	9a af       	std	Y+58, r25	; 0x3a
    1cd2:	89 af       	std	Y+57, r24	; 0x39
    1cd4:	89 ad       	ldd	r24, Y+57	; 0x39
    1cd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x460>
    1cdc:	9a af       	std	Y+58, r25	; 0x3a
    1cde:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2);

	    DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,HIGH);
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	41 e0       	ldi	r20, 0x01	; 1
    1cf0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,HIGH);
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	62 e0       	ldi	r22, 0x02	; 2
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	63 e0       	ldi	r22, 0x03	; 3
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	a0 e0       	ldi	r26, 0x00	; 0
    1d0e:	b0 e4       	ldi	r27, 0x40	; 64
    1d10:	8d ab       	std	Y+53, r24	; 0x35
    1d12:	9e ab       	std	Y+54, r25	; 0x36
    1d14:	af ab       	std	Y+55, r26	; 0x37
    1d16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d18:	6d a9       	ldd	r22, Y+53	; 0x35
    1d1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	4a ef       	ldi	r20, 0xFA	; 250
    1d26:	54 e4       	ldi	r21, 0x44	; 68
    1d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	89 ab       	std	Y+49, r24	; 0x31
    1d32:	9a ab       	std	Y+50, r25	; 0x32
    1d34:	ab ab       	std	Y+51, r26	; 0x33
    1d36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d38:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5f e3       	ldi	r21, 0x3F	; 63
    1d48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d4c:	88 23       	and	r24, r24
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x4e2>
		__ticks = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	98 ab       	std	Y+48, r25	; 0x30
    1d56:	8f a7       	std	Y+47, r24	; 0x2f
    1d58:	3f c0       	rjmp	.+126    	; 0x1dd8 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x560>
	else if (__tmp > 65535)
    1d5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d60:	9c a9       	ldd	r25, Y+52	; 0x34
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	3f ef       	ldi	r19, 0xFF	; 255
    1d66:	4f e7       	ldi	r20, 0x7F	; 127
    1d68:	57 e4       	ldi	r21, 0x47	; 71
    1d6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d6e:	18 16       	cp	r1, r24
    1d70:	4c f5       	brge	.+82     	; 0x1dc4 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d72:	6d a9       	ldd	r22, Y+53	; 0x35
    1d74:	7e a9       	ldd	r23, Y+54	; 0x36
    1d76:	8f a9       	ldd	r24, Y+55	; 0x37
    1d78:	98 ad       	ldd	r25, Y+56	; 0x38
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	51 e4       	ldi	r21, 0x41	; 65
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	cd 01       	movw	r24, r26
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	98 ab       	std	Y+48, r25	; 0x30
    1d98:	8f a7       	std	Y+47, r24	; 0x2f
    1d9a:	0f c0       	rjmp	.+30     	; 0x1dba <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x542>
    1d9c:	88 ec       	ldi	r24, 0xC8	; 200
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9e a7       	std	Y+46, r25	; 0x2e
    1da2:	8d a7       	std	Y+45, r24	; 0x2d
    1da4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1da6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x530>
    1dac:	9e a7       	std	Y+46, r25	; 0x2e
    1dae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db2:	98 a9       	ldd	r25, Y+48	; 0x30
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	98 ab       	std	Y+48, r25	; 0x30
    1db8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	69 f7       	brne	.-38     	; 0x1d9c <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x524>
    1dc2:	14 c0       	rjmp	.+40     	; 0x1dec <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dca:	9c a9       	ldd	r25, Y+52	; 0x34
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	98 ab       	std	Y+48, r25	; 0x30
    1dd6:	8f a7       	std	Y+47, r24	; 0x2f
    1dd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dda:	98 a9       	ldd	r25, Y+48	; 0x30
    1ddc:	9c a7       	std	Y+44, r25	; 0x2c
    1dde:	8b a7       	std	Y+43, r24	; 0x2b
    1de0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x56c>
    1de8:	9c a7       	std	Y+44, r25	; 0x2c
    1dea:	8b a7       	std	Y+43, r24	; 0x2b
	    _delay_ms(2);

         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,HIGH);
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	62 e0       	ldi	r22, 0x02	; 2
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	63 e0       	ldi	r22, 0x03	; 3
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e4       	ldi	r27, 0x40	; 64
    1e1c:	8f a3       	std	Y+39, r24	; 0x27
    1e1e:	98 a7       	std	Y+40, r25	; 0x28
    1e20:	a9 a7       	std	Y+41, r26	; 0x29
    1e22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6f a1       	ldd	r22, Y+39	; 0x27
    1e26:	78 a5       	ldd	r23, Y+40	; 0x28
    1e28:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a ef       	ldi	r20, 0xFA	; 250
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8b a3       	std	Y+35, r24	; 0x23
    1e3e:	9c a3       	std	Y+36, r25	; 0x24
    1e40:	ad a3       	std	Y+37, r26	; 0x25
    1e42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e44:	6b a1       	ldd	r22, Y+35	; 0x23
    1e46:	7c a1       	ldd	r23, Y+36	; 0x24
    1e48:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x5ee>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x66c>
	else if (__tmp > 65535)
    1e66:	6b a1       	ldd	r22, Y+35	; 0x23
    1e68:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e80:	78 a5       	ldd	r23, Y+40	; 0x28
    1e82:	89 a5       	ldd	r24, Y+41	; 0x29
    1e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9a a3       	std	Y+34, r25	; 0x22
    1ea4:	89 a3       	std	Y+33, r24	; 0x21
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x64e>
    1ea8:	88 ec       	ldi	r24, 0xC8	; 200
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	98 a3       	std	Y+32, r25	; 0x20
    1eae:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb2:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x63c>
    1eb8:	98 a3       	std	Y+32, r25	; 0x20
    1eba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
    1ec4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x630>
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9a a3       	std	Y+34, r25	; 0x22
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eea:	8d 8f       	std	Y+29, r24	; 0x1d
    1eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x678>
    1ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef6:	8d 8f       	std	Y+29, r24	; 0x1d

         _delay_ms(2);

         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,HIGH);
    1f0c:	83 e0       	ldi	r24, 0x03	; 3
    1f0e:	62 e0       	ldi	r22, 0x02	; 2
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,HIGH);
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	63 e0       	ldi	r22, 0x03	; 3
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e4       	ldi	r27, 0x40	; 64
    1f28:	89 8f       	std	Y+25, r24	; 0x19
    1f2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	69 8d       	ldd	r22, Y+25	; 0x19
    1f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	4a ef       	ldi	r20, 0xFA	; 250
    1f3e:	54 e4       	ldi	r21, 0x44	; 68
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	8d 8b       	std	Y+21, r24	; 0x15
    1f4a:	9e 8b       	std	Y+22, r25	; 0x16
    1f4c:	af 8b       	std	Y+23, r26	; 0x17
    1f4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f50:	6d 89       	ldd	r22, Y+21	; 0x15
    1f52:	7e 89       	ldd	r23, Y+22	; 0x16
    1f54:	8f 89       	ldd	r24, Y+23	; 0x17
    1f56:	98 8d       	ldd	r25, Y+24	; 0x18
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x6fa>
		__ticks = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
    1f70:	3f c0       	rjmp	.+126    	; 0x1ff0 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x778>
	else if (__tmp > 65535)
    1f72:	6d 89       	ldd	r22, Y+21	; 0x15
    1f74:	7e 89       	ldd	r23, Y+22	; 0x16
    1f76:	8f 89       	ldd	r24, Y+23	; 0x17
    1f78:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	4c f5       	brge	.+82     	; 0x1fdc <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x764>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	51 e4       	ldi	r21, 0x41	; 65
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9c 8b       	std	Y+20, r25	; 0x14
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
    1fb2:	0f c0       	rjmp	.+30     	; 0x1fd2 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x75a>
    1fb4:	88 ec       	ldi	r24, 0xC8	; 200
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9a 8b       	std	Y+18, r25	; 0x12
    1fba:	89 8b       	std	Y+17, r24	; 0x11
    1fbc:	89 89       	ldd	r24, Y+17	; 0x11
    1fbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x748>
    1fc4:	9a 8b       	std	Y+18, r25	; 0x12
    1fc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	69 f7       	brne	.-38     	; 0x1fb4 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x73c>
    1fda:	14 c0       	rjmp	.+40     	; 0x2004 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fde:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9c 8b       	std	Y+20, r25	; 0x14
    1fee:	8b 8b       	std	Y+19, r24	; 0x13
    1ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff4:	98 8b       	std	Y+16, r25	; 0x10
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
    1ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffa:	98 89       	ldd	r25, Y+16	; 0x10
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x784>
    2000:	98 8b       	std	Y+16, r25	; 0x10
    2002:	8f 87       	std	Y+15, r24	; 0x0f
         _delay_ms(2);

         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	62 e0       	ldi	r22, 0x02	; 2
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,HIGH);
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	63 e0       	ldi	r22, 0x03	; 3
    2026:	41 e0       	ldi	r20, 0x01	; 1
    2028:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e4       	ldi	r27, 0x40	; 64
    2034:	8b 87       	std	Y+11, r24	; 0x0b
    2036:	9c 87       	std	Y+12, r25	; 0x0c
    2038:	ad 87       	std	Y+13, r26	; 0x0d
    203a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	6b 85       	ldd	r22, Y+11	; 0x0b
    203e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2040:	8d 85       	ldd	r24, Y+13	; 0x0d
    2042:	9e 85       	ldd	r25, Y+14	; 0x0e
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a ef       	ldi	r20, 0xFA	; 250
    204a:	54 e4       	ldi	r21, 0x44	; 68
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	8f 83       	std	Y+7, r24	; 0x07
    2056:	98 87       	std	Y+8, r25	; 0x08
    2058:	a9 87       	std	Y+9, r26	; 0x09
    205a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	2c f4       	brge	.+10     	; 0x207e <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x806>
		__ticks = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x884>
	else if (__tmp > 65535)
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f5       	brge	.+82     	; 0x20e8 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x870>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2096:	6b 85       	ldd	r22, Y+11	; 0x0b
    2098:	7c 85       	ldd	r23, Y+12	; 0x0c
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	0f c0       	rjmp	.+30     	; 0x20de <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x866>
    20c0:	88 ec       	ldi	r24, 0xC8	; 200
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x854>
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x848>
    20e6:	14 c0       	rjmp	.+40     	; 0x2110 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x898>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <STEPPER_MOTOR_VidRotateClockWiseHalfStep+0x890>
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
         _delay_ms(2);

         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,HIGH);
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	41 e0       	ldi	r20, 0x01	; 1
    2116:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	62 e0       	ldi	r22, 0x02	; 2
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
         DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,HIGH);
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	63 e0       	ldi	r22, 0x03	; 3
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
}
    2138:	ce 59       	subi	r28, 0x9E	; 158
    213a:	df 4f       	sbci	r29, 0xFF	; 255
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	08 95       	ret

00002150 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep>:
/*if you _delay_ms(5);                                               */
void STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep(void)
{
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	c2 56       	subi	r28, 0x62	; 98
    215e:	d0 40       	sbci	r29, 0x00	; 0
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,HIGH);
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	63 e0       	ldi	r22, 0x03	; 3
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    2192:	fe 01       	movw	r30, r28
    2194:	e1 5a       	subi	r30, 0xA1	; 161
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a0 e0       	ldi	r26, 0x00	; 0
    219e:	b0 e4       	ldi	r27, 0x40	; 64
    21a0:	80 83       	st	Z, r24
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	a2 83       	std	Z+2, r26	; 0x02
    21a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	8e 01       	movw	r16, r28
    21aa:	05 5a       	subi	r16, 0xA5	; 165
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	fe 01       	movw	r30, r28
    21b0:	e1 5a       	subi	r30, 0xA1	; 161
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a ef       	ldi	r20, 0xFA	; 250
    21c2:	54 e4       	ldi	r21, 0x44	; 68
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	f8 01       	movw	r30, r16
    21ce:	80 83       	st	Z, r24
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	a2 83       	std	Z+2, r26	; 0x02
    21d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21d6:	fe 01       	movw	r30, r28
    21d8:	e5 5a       	subi	r30, 0xA5	; 165
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	44 f4       	brge	.+16     	; 0x2204 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0xb4>
		__ticks = 1;
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 5a       	subi	r30, 0xA7	; 167
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
    2202:	64 c0       	rjmp	.+200    	; 0x22cc <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x17c>
	else if (__tmp > 65535)
    2204:	fe 01       	movw	r30, r28
    2206:	e5 5a       	subi	r30, 0xA5	; 165
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	0c f0       	brlt	.+2      	; 0x2224 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0xd4>
    2222:	43 c0       	rjmp	.+134    	; 0x22aa <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	fe 01       	movw	r30, r28
    2226:	e1 5a       	subi	r30, 0xA1	; 161
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8e 01       	movw	r16, r28
    2244:	07 5a       	subi	r16, 0xA7	; 167
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	f8 01       	movw	r30, r16
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	1f c0       	rjmp	.+62     	; 0x229a <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x14a>
    225c:	fe 01       	movw	r30, r28
    225e:	e9 5a       	subi	r30, 0xA9	; 169
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	88 ec       	ldi	r24, 0xC8	; 200
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	fe 01       	movw	r30, r28
    226c:	e9 5a       	subi	r30, 0xA9	; 169
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x124>
    2278:	fe 01       	movw	r30, r28
    227a:	e9 5a       	subi	r30, 0xA9	; 169
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	de 01       	movw	r26, r28
    2284:	a7 5a       	subi	r26, 0xA7	; 167
    2286:	bf 4f       	sbci	r27, 0xFF	; 255
    2288:	fe 01       	movw	r30, r28
    228a:	e7 5a       	subi	r30, 0xA7	; 167
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	91 81       	ldd	r25, Z+1	; 0x01
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	11 96       	adiw	r26, 0x01	; 1
    2296:	9c 93       	st	X, r25
    2298:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	fe 01       	movw	r30, r28
    229c:	e7 5a       	subi	r30, 0xA7	; 167
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	d1 f6       	brne	.-76     	; 0x225c <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x10c>
    22a8:	27 c0       	rjmp	.+78     	; 0x22f8 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	8e 01       	movw	r16, r28
    22ac:	07 5a       	subi	r16, 0xA7	; 167
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 5a       	subi	r30, 0xA5	; 165
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	f8 01       	movw	r30, r16
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	80 83       	st	Z, r24
    22cc:	de 01       	movw	r26, r28
    22ce:	ab 5a       	subi	r26, 0xAB	; 171
    22d0:	bf 4f       	sbci	r27, 0xFF	; 255
    22d2:	fe 01       	movw	r30, r28
    22d4:	e7 5a       	subi	r30, 0xA7	; 167
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	8d 93       	st	X+, r24
    22de:	9c 93       	st	X, r25
    22e0:	fe 01       	movw	r30, r28
    22e2:	eb 5a       	subi	r30, 0xAB	; 171
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x19a>
    22ee:	fe 01       	movw	r30, r28
    22f0:	eb 5a       	subi	r30, 0xAB	; 171
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	80 83       	st	Z, r24

	_delay_ms(2);

	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	61 e0       	ldi	r22, 0x01	; 1
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,HIGH);
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	62 e0       	ldi	r22, 0x02	; 2
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,HIGH);
    2316:	83 e0       	ldi	r24, 0x03	; 3
    2318:	63 e0       	ldi	r22, 0x03	; 3
    231a:	41 e0       	ldi	r20, 0x01	; 1
    231c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    2320:	fe 01       	movw	r30, r28
    2322:	ef 5a       	subi	r30, 0xAF	; 175
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	a0 e0       	ldi	r26, 0x00	; 0
    232c:	b0 e4       	ldi	r27, 0x40	; 64
    232e:	80 83       	st	Z, r24
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	a2 83       	std	Z+2, r26	; 0x02
    2334:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2336:	8e 01       	movw	r16, r28
    2338:	03 5b       	subi	r16, 0xB3	; 179
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	fe 01       	movw	r30, r28
    233e:	ef 5a       	subi	r30, 0xAF	; 175
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	4a ef       	ldi	r20, 0xFA	; 250
    2350:	54 e4       	ldi	r21, 0x44	; 68
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	f8 01       	movw	r30, r16
    235c:	80 83       	st	Z, r24
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	a2 83       	std	Z+2, r26	; 0x02
    2362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2364:	fe 01       	movw	r30, r28
    2366:	e3 5b       	subi	r30, 0xB3	; 179
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	44 f4       	brge	.+16     	; 0x2392 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x242>
		__ticks = 1;
    2382:	fe 01       	movw	r30, r28
    2384:	e5 5b       	subi	r30, 0xB5	; 181
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
    2390:	64 c0       	rjmp	.+200    	; 0x245a <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x30a>
	else if (__tmp > 65535)
    2392:	fe 01       	movw	r30, r28
    2394:	e3 5b       	subi	r30, 0xB3	; 179
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	0c f0       	brlt	.+2      	; 0x23b2 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x262>
    23b0:	43 c0       	rjmp	.+134    	; 0x2438 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	fe 01       	movw	r30, r28
    23b4:	ef 5a       	subi	r30, 0xAF	; 175
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	93 81       	ldd	r25, Z+3	; 0x03
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8e 01       	movw	r16, r28
    23d2:	05 5b       	subi	r16, 0xB5	; 181
    23d4:	1f 4f       	sbci	r17, 0xFF	; 255
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	f8 01       	movw	r30, r16
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
    23e8:	1f c0       	rjmp	.+62     	; 0x2428 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x2d8>
    23ea:	fe 01       	movw	r30, r28
    23ec:	e7 5b       	subi	r30, 0xB7	; 183
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	88 ec       	ldi	r24, 0xC8	; 200
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
    23f8:	fe 01       	movw	r30, r28
    23fa:	e7 5b       	subi	r30, 0xB7	; 183
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x2b2>
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5b       	subi	r30, 0xB7	; 183
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	de 01       	movw	r26, r28
    2412:	a5 5b       	subi	r26, 0xB5	; 181
    2414:	bf 4f       	sbci	r27, 0xFF	; 255
    2416:	fe 01       	movw	r30, r28
    2418:	e5 5b       	subi	r30, 0xB5	; 181
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	11 96       	adiw	r26, 0x01	; 1
    2424:	9c 93       	st	X, r25
    2426:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	fe 01       	movw	r30, r28
    242a:	e5 5b       	subi	r30, 0xB5	; 181
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	d1 f6       	brne	.-76     	; 0x23ea <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x29a>
    2436:	27 c0       	rjmp	.+78     	; 0x2486 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2438:	8e 01       	movw	r16, r28
    243a:	05 5b       	subi	r16, 0xB5	; 181
    243c:	1f 4f       	sbci	r17, 0xFF	; 255
    243e:	fe 01       	movw	r30, r28
    2440:	e3 5b       	subi	r30, 0xB3	; 179
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	f8 01       	movw	r30, r16
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	de 01       	movw	r26, r28
    245c:	a9 5b       	subi	r26, 0xB9	; 185
    245e:	bf 4f       	sbci	r27, 0xFF	; 255
    2460:	fe 01       	movw	r30, r28
    2462:	e5 5b       	subi	r30, 0xB5	; 181
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	8d 93       	st	X+, r24
    246c:	9c 93       	st	X, r25
    246e:	fe 01       	movw	r30, r28
    2470:	e9 5b       	subi	r30, 0xB9	; 185
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 81       	ld	r24, Z
    2476:	91 81       	ldd	r25, Z+1	; 0x01
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x328>
    247c:	fe 01       	movw	r30, r28
    247e:	e9 5b       	subi	r30, 0xB9	; 185
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
	_delay_ms(2);

	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	61 e0       	ldi	r22, 0x01	; 1
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,HIGH);
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	62 e0       	ldi	r22, 0x02	; 2
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    24a4:	83 e0       	ldi	r24, 0x03	; 3
    24a6:	63 e0       	ldi	r22, 0x03	; 3
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    24ae:	fe 01       	movw	r30, r28
    24b0:	ed 5b       	subi	r30, 0xBD	; 189
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a0 e0       	ldi	r26, 0x00	; 0
    24ba:	b0 e4       	ldi	r27, 0x40	; 64
    24bc:	80 83       	st	Z, r24
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	a2 83       	std	Z+2, r26	; 0x02
    24c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c4:	8e 01       	movw	r16, r28
    24c6:	01 5c       	subi	r16, 0xC1	; 193
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	fe 01       	movw	r30, r28
    24cc:	ed 5b       	subi	r30, 0xBD	; 189
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a ef       	ldi	r20, 0xFA	; 250
    24de:	54 e4       	ldi	r21, 0x44	; 68
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	f8 01       	movw	r30, r16
    24ea:	80 83       	st	Z, r24
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	a2 83       	std	Z+2, r26	; 0x02
    24f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f2:	fe 01       	movw	r30, r28
    24f4:	ff 96       	adiw	r30, 0x3f	; 63
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x3c8>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9e af       	std	Y+62, r25	; 0x3e
    2514:	8d af       	std	Y+61, r24	; 0x3d
    2516:	46 c0       	rjmp	.+140    	; 0x25a4 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x454>
	else if (__tmp > 65535)
    2518:	fe 01       	movw	r30, r28
    251a:	ff 96       	adiw	r30, 0x3f	; 63
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2530:	18 16       	cp	r1, r24
    2532:	64 f5       	brge	.+88     	; 0x258c <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	fe 01       	movw	r30, r28
    2536:	ed 5b       	subi	r30, 0xBD	; 189
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9e af       	std	Y+62, r25	; 0x3e
    2560:	8d af       	std	Y+61, r24	; 0x3d
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x432>
    2564:	88 ec       	ldi	r24, 0xC8	; 200
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c af       	std	Y+60, r25	; 0x3c
    256a:	8b af       	std	Y+59, r24	; 0x3b
    256c:	8b ad       	ldd	r24, Y+59	; 0x3b
    256e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x420>
    2574:	9c af       	std	Y+60, r25	; 0x3c
    2576:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8d ad       	ldd	r24, Y+61	; 0x3d
    257a:	9e ad       	ldd	r25, Y+62	; 0x3e
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9e af       	std	Y+62, r25	; 0x3e
    2580:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8d ad       	ldd	r24, Y+61	; 0x3d
    2584:	9e ad       	ldd	r25, Y+62	; 0x3e
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x414>
    258a:	16 c0       	rjmp	.+44     	; 0x25b8 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	fe 01       	movw	r30, r28
    258e:	ff 96       	adiw	r30, 0x3f	; 63
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e af       	std	Y+62, r25	; 0x3e
    25a2:	8d af       	std	Y+61, r24	; 0x3d
    25a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a8:	9a af       	std	Y+58, r25	; 0x3a
    25aa:	89 af       	std	Y+57, r24	; 0x39
    25ac:	89 ad       	ldd	r24, Y+57	; 0x39
    25ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x460>
    25b4:	9a af       	std	Y+58, r25	; 0x3a
    25b6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);

	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,HIGH);
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	61 e0       	ldi	r22, 0x01	; 1
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,HIGH);
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	62 e0       	ldi	r22, 0x02	; 2
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	63 e0       	ldi	r22, 0x03	; 3
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	a0 e0       	ldi	r26, 0x00	; 0
    25e6:	b0 e4       	ldi	r27, 0x40	; 64
    25e8:	8d ab       	std	Y+53, r24	; 0x35
    25ea:	9e ab       	std	Y+54, r25	; 0x36
    25ec:	af ab       	std	Y+55, r26	; 0x37
    25ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f0:	6d a9       	ldd	r22, Y+53	; 0x35
    25f2:	7e a9       	ldd	r23, Y+54	; 0x36
    25f4:	8f a9       	ldd	r24, Y+55	; 0x37
    25f6:	98 ad       	ldd	r25, Y+56	; 0x38
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	4a ef       	ldi	r20, 0xFA	; 250
    25fe:	54 e4       	ldi	r21, 0x44	; 68
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	89 ab       	std	Y+49, r24	; 0x31
    260a:	9a ab       	std	Y+50, r25	; 0x32
    260c:	ab ab       	std	Y+51, r26	; 0x33
    260e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2610:	69 a9       	ldd	r22, Y+49	; 0x31
    2612:	7a a9       	ldd	r23, Y+50	; 0x32
    2614:	8b a9       	ldd	r24, Y+51	; 0x33
    2616:	9c a9       	ldd	r25, Y+52	; 0x34
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e8       	ldi	r20, 0x80	; 128
    261e:	5f e3       	ldi	r21, 0x3F	; 63
    2620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2624:	88 23       	and	r24, r24
    2626:	2c f4       	brge	.+10     	; 0x2632 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x4e2>
		__ticks = 1;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	98 ab       	std	Y+48, r25	; 0x30
    262e:	8f a7       	std	Y+47, r24	; 0x2f
    2630:	3f c0       	rjmp	.+126    	; 0x26b0 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x560>
	else if (__tmp > 65535)
    2632:	69 a9       	ldd	r22, Y+49	; 0x31
    2634:	7a a9       	ldd	r23, Y+50	; 0x32
    2636:	8b a9       	ldd	r24, Y+51	; 0x33
    2638:	9c a9       	ldd	r25, Y+52	; 0x34
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	3f ef       	ldi	r19, 0xFF	; 255
    263e:	4f e7       	ldi	r20, 0x7F	; 127
    2640:	57 e4       	ldi	r21, 0x47	; 71
    2642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2646:	18 16       	cp	r1, r24
    2648:	4c f5       	brge	.+82     	; 0x269c <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264a:	6d a9       	ldd	r22, Y+53	; 0x35
    264c:	7e a9       	ldd	r23, Y+54	; 0x36
    264e:	8f a9       	ldd	r24, Y+55	; 0x37
    2650:	98 ad       	ldd	r25, Y+56	; 0x38
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e2       	ldi	r20, 0x20	; 32
    2658:	51 e4       	ldi	r21, 0x41	; 65
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	98 ab       	std	Y+48, r25	; 0x30
    2670:	8f a7       	std	Y+47, r24	; 0x2f
    2672:	0f c0       	rjmp	.+30     	; 0x2692 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x542>
    2674:	88 ec       	ldi	r24, 0xC8	; 200
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9e a7       	std	Y+46, r25	; 0x2e
    267a:	8d a7       	std	Y+45, r24	; 0x2d
    267c:	8d a5       	ldd	r24, Y+45	; 0x2d
    267e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x530>
    2684:	9e a7       	std	Y+46, r25	; 0x2e
    2686:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2688:	8f a5       	ldd	r24, Y+47	; 0x2f
    268a:	98 a9       	ldd	r25, Y+48	; 0x30
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	98 ab       	std	Y+48, r25	; 0x30
    2690:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2692:	8f a5       	ldd	r24, Y+47	; 0x2f
    2694:	98 a9       	ldd	r25, Y+48	; 0x30
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	69 f7       	brne	.-38     	; 0x2674 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x524>
    269a:	14 c0       	rjmp	.+40     	; 0x26c4 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269c:	69 a9       	ldd	r22, Y+49	; 0x31
    269e:	7a a9       	ldd	r23, Y+50	; 0x32
    26a0:	8b a9       	ldd	r24, Y+51	; 0x33
    26a2:	9c a9       	ldd	r25, Y+52	; 0x34
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	98 ab       	std	Y+48, r25	; 0x30
    26ae:	8f a7       	std	Y+47, r24	; 0x2f
    26b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b2:	98 a9       	ldd	r25, Y+48	; 0x30
    26b4:	9c a7       	std	Y+44, r25	; 0x2c
    26b6:	8b a7       	std	Y+43, r24	; 0x2b
    26b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x56c>
    26c0:	9c a7       	std	Y+44, r25	; 0x2c
    26c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,LOW);
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,HIGH);
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	62 e0       	ldi	r22, 0x02	; 2
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	63 e0       	ldi	r22, 0x03	; 3
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a0 e0       	ldi	r26, 0x00	; 0
    26f2:	b0 e4       	ldi	r27, 0x40	; 64
    26f4:	8f a3       	std	Y+39, r24	; 0x27
    26f6:	98 a7       	std	Y+40, r25	; 0x28
    26f8:	a9 a7       	std	Y+41, r26	; 0x29
    26fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	6f a1       	ldd	r22, Y+39	; 0x27
    26fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2700:	89 a5       	ldd	r24, Y+41	; 0x29
    2702:	9a a5       	ldd	r25, Y+42	; 0x2a
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a ef       	ldi	r20, 0xFA	; 250
    270a:	54 e4       	ldi	r21, 0x44	; 68
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8b a3       	std	Y+35, r24	; 0x23
    2716:	9c a3       	std	Y+36, r25	; 0x24
    2718:	ad a3       	std	Y+37, r26	; 0x25
    271a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    271c:	6b a1       	ldd	r22, Y+35	; 0x23
    271e:	7c a1       	ldd	r23, Y+36	; 0x24
    2720:	8d a1       	ldd	r24, Y+37	; 0x25
    2722:	9e a1       	ldd	r25, Y+38	; 0x26
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	2c f4       	brge	.+10     	; 0x273e <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x5ee>
		__ticks = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9a a3       	std	Y+34, r25	; 0x22
    273a:	89 a3       	std	Y+33, r24	; 0x21
    273c:	3f c0       	rjmp	.+126    	; 0x27bc <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x66c>
	else if (__tmp > 65535)
    273e:	6b a1       	ldd	r22, Y+35	; 0x23
    2740:	7c a1       	ldd	r23, Y+36	; 0x24
    2742:	8d a1       	ldd	r24, Y+37	; 0x25
    2744:	9e a1       	ldd	r25, Y+38	; 0x26
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	4c f5       	brge	.+82     	; 0x27a8 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	6f a1       	ldd	r22, Y+39	; 0x27
    2758:	78 a5       	ldd	r23, Y+40	; 0x28
    275a:	89 a5       	ldd	r24, Y+41	; 0x29
    275c:	9a a5       	ldd	r25, Y+42	; 0x2a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9a a3       	std	Y+34, r25	; 0x22
    277c:	89 a3       	std	Y+33, r24	; 0x21
    277e:	0f c0       	rjmp	.+30     	; 0x279e <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x64e>
    2780:	88 ec       	ldi	r24, 0xC8	; 200
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	98 a3       	std	Y+32, r25	; 0x20
    2786:	8f 8f       	std	Y+31, r24	; 0x1f
    2788:	8f 8d       	ldd	r24, Y+31	; 0x1f
    278a:	98 a1       	ldd	r25, Y+32	; 0x20
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x63c>
    2790:	98 a3       	std	Y+32, r25	; 0x20
    2792:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	9a a3       	std	Y+34, r25	; 0x22
    279c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	89 a1       	ldd	r24, Y+33	; 0x21
    27a0:	9a a1       	ldd	r25, Y+34	; 0x22
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	69 f7       	brne	.-38     	; 0x2780 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x630>
    27a6:	14 c0       	rjmp	.+40     	; 0x27d0 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a8:	6b a1       	ldd	r22, Y+35	; 0x23
    27aa:	7c a1       	ldd	r23, Y+36	; 0x24
    27ac:	8d a1       	ldd	r24, Y+37	; 0x25
    27ae:	9e a1       	ldd	r25, Y+38	; 0x26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9a a3       	std	Y+34, r25	; 0x22
    27ba:	89 a3       	std	Y+33, r24	; 0x21
    27bc:	89 a1       	ldd	r24, Y+33	; 0x21
    27be:	9a a1       	ldd	r25, Y+34	; 0x22
    27c0:	9e 8f       	std	Y+30, r25	; 0x1e
    27c2:	8d 8f       	std	Y+29, r24	; 0x1d
    27c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x678>
    27cc:	9e 8f       	std	Y+30, r25	; 0x1e
    27ce:	8d 8f       	std	Y+29, r24	; 0x1d

	 _delay_ms(2);

	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,HIGH);
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,HIGH);
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    27e4:	83 e0       	ldi	r24, 0x03	; 3
    27e6:	62 e0       	ldi	r22, 0x02	; 2
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    27ee:	83 e0       	ldi	r24, 0x03	; 3
    27f0:	63 e0       	ldi	r22, 0x03	; 3
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	b0 e4       	ldi	r27, 0x40	; 64
    2800:	89 8f       	std	Y+25, r24	; 0x19
    2802:	9a 8f       	std	Y+26, r25	; 0x1a
    2804:	ab 8f       	std	Y+27, r26	; 0x1b
    2806:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	69 8d       	ldd	r22, Y+25	; 0x19
    280a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    280c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    280e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a ef       	ldi	r20, 0xFA	; 250
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8d 8b       	std	Y+21, r24	; 0x15
    2822:	9e 8b       	std	Y+22, r25	; 0x16
    2824:	af 8b       	std	Y+23, r26	; 0x17
    2826:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2828:	6d 89       	ldd	r22, Y+21	; 0x15
    282a:	7e 89       	ldd	r23, Y+22	; 0x16
    282c:	8f 89       	ldd	r24, Y+23	; 0x17
    282e:	98 8d       	ldd	r25, Y+24	; 0x18
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x6fa>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9c 8b       	std	Y+20, r25	; 0x14
    2846:	8b 8b       	std	Y+19, r24	; 0x13
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x778>
	else if (__tmp > 65535)
    284a:	6d 89       	ldd	r22, Y+21	; 0x15
    284c:	7e 89       	ldd	r23, Y+22	; 0x16
    284e:	8f 89       	ldd	r24, Y+23	; 0x17
    2850:	98 8d       	ldd	r25, Y+24	; 0x18
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x764>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	69 8d       	ldd	r22, Y+25	; 0x19
    2864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9c 8b       	std	Y+20, r25	; 0x14
    2888:	8b 8b       	std	Y+19, r24	; 0x13
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x75a>
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9a 8b       	std	Y+18, r25	; 0x12
    2892:	89 8b       	std	Y+17, r24	; 0x11
    2894:	89 89       	ldd	r24, Y+17	; 0x11
    2896:	9a 89       	ldd	r25, Y+18	; 0x12
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x748>
    289c:	9a 8b       	std	Y+18, r25	; 0x12
    289e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9c 8b       	std	Y+20, r25	; 0x14
    28a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8b 89       	ldd	r24, Y+19	; 0x13
    28ac:	9c 89       	ldd	r25, Y+20	; 0x14
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x73c>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6d 89       	ldd	r22, Y+21	; 0x15
    28b6:	7e 89       	ldd	r23, Y+22	; 0x16
    28b8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ba:	98 8d       	ldd	r25, Y+24	; 0x18
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
    28c8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ca:	9c 89       	ldd	r25, Y+20	; 0x14
    28cc:	98 8b       	std	Y+16, r25	; 0x10
    28ce:	8f 87       	std	Y+15, r24	; 0x0f
    28d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d2:	98 89       	ldd	r25, Y+16	; 0x10
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x784>
    28d8:	98 8b       	std	Y+16, r25	; 0x10
    28da:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(2);

	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,HIGH);
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    28f0:	83 e0       	ldi	r24, 0x03	; 3
    28f2:	62 e0       	ldi	r22, 0x02	; 2
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,LOW);
    28fa:	83 e0       	ldi	r24, 0x03	; 3
    28fc:	63 e0       	ldi	r22, 0x03	; 3
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e4       	ldi	r27, 0x40	; 64
    290c:	8b 87       	std	Y+11, r24	; 0x0b
    290e:	9c 87       	std	Y+12, r25	; 0x0c
    2910:	ad 87       	std	Y+13, r26	; 0x0d
    2912:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2914:	6b 85       	ldd	r22, Y+11	; 0x0b
    2916:	7c 85       	ldd	r23, Y+12	; 0x0c
    2918:	8d 85       	ldd	r24, Y+13	; 0x0d
    291a:	9e 85       	ldd	r25, Y+14	; 0x0e
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4a ef       	ldi	r20, 0xFA	; 250
    2922:	54 e4       	ldi	r21, 0x44	; 68
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	8f 83       	std	Y+7, r24	; 0x07
    292e:	98 87       	std	Y+8, r25	; 0x08
    2930:	a9 87       	std	Y+9, r26	; 0x09
    2932:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x806>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	3f c0       	rjmp	.+126    	; 0x29d4 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x884>
	else if (__tmp > 65535)
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	4c f5       	brge	.+82     	; 0x29c0 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x870>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2970:	7c 85       	ldd	r23, Y+12	; 0x0c
    2972:	8d 85       	ldd	r24, Y+13	; 0x0d
    2974:	9e 85       	ldd	r25, Y+14	; 0x0e
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x866>
    2998:	88 ec       	ldi	r24, 0xC8	; 200
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9c 83       	std	Y+4, r25	; 0x04
    299e:	8b 83       	std	Y+3, r24	; 0x03
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	9c 81       	ldd	r25, Y+4	; 0x04
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x854>
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	69 f7       	brne	.-38     	; 0x2998 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x848>
    29be:	14 c0       	rjmp	.+40     	; 0x29e8 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x898>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c0:	6f 81       	ldd	r22, Y+7	; 0x07
    29c2:	78 85       	ldd	r23, Y+8	; 0x08
    29c4:	89 85       	ldd	r24, Y+9	; 0x09
    29c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <STEPPER_MOTOR_VidRotateUntiClockWiseHalfStep+0x890>
    29e4:	9a 83       	std	Y+2, r25	; 0x02
    29e6:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);

	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,BlueCoil  ,HIGH);
    29e8:	83 e0       	ldi	r24, 0x03	; 3
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,PinkCoil  ,LOW);
    29f2:	83 e0       	ldi	r24, 0x03	; 3
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,YellowCoil,LOW);
    29fc:	83 e0       	ldi	r24, 0x03	; 3
    29fe:	62 e0       	ldi	r22, 0x02	; 2
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	 DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,OrangeCoil,HIGH);
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	63 e0       	ldi	r22, 0x03	; 3
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
}
    2a10:	ce 59       	subi	r28, 0x9E	; 158
    2a12:	df 4f       	sbci	r29, 0xFF	; 255
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	1f 91       	pop	r17
    2a24:	0f 91       	pop	r16
    2a26:	08 95       	ret

00002a28 <STEPPER_MOTOR_VidStop>:


/*f you want to stop the motor from moving*/
void  STEPPER_MOTOR_VidStop(void)

{    u8 Local_CoilIterator1;
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	0f 92       	push	r0
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	 for(Local_CoilIterator1=BlueCoil; Local_CoilIterator1<=OrangeCoil ;Local_CoilIterator1++)
    2a32:	19 82       	std	Y+1, r1	; 0x01
    2a34:	08 c0       	rjmp	.+16     	; 0x2a46 <STEPPER_MOTOR_VidStop+0x1e>
			  {
				  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,LOW);
    2a36:	83 e0       	ldi	r24, 0x03	; 3
    2a38:	69 81       	ldd	r22, Y+1	; 0x01
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>

/*f you want to stop the motor from moving*/
void  STEPPER_MOTOR_VidStop(void)

{    u8 Local_CoilIterator1;
	 for(Local_CoilIterator1=BlueCoil; Local_CoilIterator1<=OrangeCoil ;Local_CoilIterator1++)
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	84 30       	cpi	r24, 0x04	; 4
    2a4a:	a8 f3       	brcs	.-22     	; 0x2a36 <STEPPER_MOTOR_VidStop+0xe>
			  {
				  DIO_U8SetPinVal(STEPPER_MOTOR_PORT_CONNECT,Local_CoilIterator1,LOW);
			  }
}
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <STEPPER_MOTOR_u8CalcAngle>:

/*to define the Angle of rotation Required*/
u8 STEPPER_MOTOR_u8CalcAngle(f32 Copy_f32StepAngleRequired)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <STEPPER_MOTOR_u8CalcAngle+0x6>
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <STEPPER_MOTOR_u8CalcAngle+0x8>
    2a5c:	0f 92       	push	r0
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	6a 83       	std	Y+2, r22	; 0x02
    2a64:	7b 83       	std	Y+3, r23	; 0x03
    2a66:	8c 83       	std	Y+4, r24	; 0x04
    2a68:	9d 83       	std	Y+5, r25	; 0x05
	u8 Local_NumberOfSteps=Copy_f32StepAngleRequired/STRIDE_ANGLE;
    2a6a:	6a 81       	ldd	r22, Y+2	; 0x02
    2a6c:	7b 81       	ldd	r23, Y+3	; 0x03
    2a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a70:	9d 81       	ldd	r25, Y+5	; 0x05
    2a72:	23 e3       	ldi	r18, 0x33	; 51
    2a74:	33 e3       	ldi	r19, 0x33	; 51
    2a76:	43 e3       	ldi	r20, 0x33	; 51
    2a78:	5e e3       	ldi	r21, 0x3E	; 62
    2a7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	89 83       	std	Y+1, r24	; 0x01
	return Local_NumberOfSteps/4;
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	86 95       	lsr	r24
    2a94:	86 95       	lsr	r24
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <SPI_MAster>:
//#define flag 0x20



void SPI_MAster()
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
  DDRB_REG=0b10110000;
    2aae:	e7 e3       	ldi	r30, 0x37	; 55
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 eb       	ldi	r24, 0xB0	; 176
    2ab4:	80 83       	st	Z, r24
  SPCR_REG|=(1<<SPCR_REG_DORD_PIN)|(1<<SPCR_REG_MSTR_PIN)|(1<<SPCR_REG_CPHA_PIN) |(1<<0)  |(1<<1) |(1<<2);
    2ab6:	ad e2       	ldi	r26, 0x2D	; 45
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	ed e2       	ldi	r30, 0x2D	; 45
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	87 63       	ori	r24, 0x37	; 55
    2ac2:	8c 93       	st	X, r24
  SPCR_REG|=(1<<SPCR_REG_SPE_PIN);
    2ac4:	ad e2       	ldi	r26, 0x2D	; 45
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	ed e2       	ldi	r30, 0x2D	; 45
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	80 64       	ori	r24, 0x40	; 64
    2ad0:	8c 93       	st	X, r24

}
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <SPI_Slave_INIT>:
void SPI_Slave_INIT()
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
  DDRB_REG=0b01000000;
    2ae0:	e7 e3       	ldi	r30, 0x37	; 55
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 e4       	ldi	r24, 0x40	; 64
    2ae6:	80 83       	st	Z, r24
  SPCR_REG|=(1<<SPCR_REG_DORD_PIN)|(1<<SPCR_REG_SPIE_PIN)|(1<<SPCR_REG_CPHA_PIN);
    2ae8:	ad e2       	ldi	r26, 0x2D	; 45
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	ed e2       	ldi	r30, 0x2D	; 45
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	84 6a       	ori	r24, 0xA4	; 164
    2af4:	8c 93       	st	X, r24
  SPCR_REG|=(1<<SPCR_REG_SPE_PIN);
    2af6:	ad e2       	ldi	r26, 0x2D	; 45
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	ed e2       	ldi	r30, 0x2D	; 45
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	80 64       	ori	r24, 0x40	; 64
    2b02:	8c 93       	st	X, r24

}
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <SPI_SendByte>:
void SPI_SendByte(u8 data)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	0f 92       	push	r0
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	89 83       	std	Y+1, r24	; 0x01
  SPDR_REG=data;
    2b16:	ef e2       	ldi	r30, 0x2F	; 47
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	80 83       	st	Z, r24
  while(GET_BIT(SPSR_REG,SPSR_REG_SPIF_PIN)==0);
    2b1e:	ee e2       	ldi	r30, 0x2E	; 46
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	88 23       	and	r24, r24
    2b26:	dc f7       	brge	.-10     	; 0x2b1e <SPI_SendByte+0x14>

}
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <SPI_reciveByte>:
u8 SPI_reciveByte()
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	0f 92       	push	r0
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
  u8 Rdata;
  while(GET_BIT(SPSR_REG,SPSR_REG_SPIF_PIN)==0);
    2b3a:	ee e2       	ldi	r30, 0x2E	; 46
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	88 23       	and	r24, r24
    2b42:	dc f7       	brge	.-10     	; 0x2b3a <SPI_reciveByte+0xa>
  Rdata=SPDR_REG;
    2b44:	ef e2       	ldi	r30, 0x2F	; 47
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	89 83       	std	Y+1, r24	; 0x01
  return Rdata;
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b4e:	0f 90       	pop	r0
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <SPI_TRANS>:

u8 SPI_TRANS(u8 Data)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	0f 92       	push	r0
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	89 83       	std	Y+1, r24	; 0x01
  SPDR_REG=Data;
    2b62:	ef e2       	ldi	r30, 0x2F	; 47
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	80 83       	st	Z, r24
  while(GET_BIT(SPSR_REG,SPSR_REG_SPIF_PIN)==0);
    2b6a:	ee e2       	ldi	r30, 0x2E	; 46
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	88 23       	and	r24, r24
    2b72:	dc f7       	brge	.-10     	; 0x2b6a <SPI_TRANS+0x14>
  return (SPDR_REG);
    2b74:	ef e2       	ldi	r30, 0x2F	; 47
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
}
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <main>:
//
//}
//}

int main(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
PORT_VoidInit();
    2b8a:	0e 94 48 07 	call	0xe90	; 0xe90 <PORT_VoidInit>
  //SPI_Slave_INIT();
	SPI_VidInit();
    2b8e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <SPI_VidInit>
  //DDRC=0xFF;
  //DDRD_REG=0xFF;
  SREG_REG |=(1<<7);
    2b92:	af e5       	ldi	r26, 0x5F	; 95
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ef e5       	ldi	r30, 0x5F	; 95
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	80 68       	ori	r24, 0x80	; 128
    2b9e:	8c 93       	st	X, r24



  while(1)
  {
	  if(flag == 1)
    2ba0:	80 91 69 00 	lds	r24, 0x0069
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	e1 f7       	brne	.-8      	; 0x2ba0 <main+0x1e>
	     {
	       if(m==1)
    2ba8:	80 91 68 00 	lds	r24, 0x0068
    2bac:	81 30       	cpi	r24, 0x01	; 1
    2bae:	31 f4       	brne	.+12     	; 0x2bbc <main+0x3a>
	         DIO_U8SetPinVal(PORT_A,0,HIGH);
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
    2bba:	09 c0       	rjmp	.+18     	; 0x2bce <main+0x4c>
	       else if(m==0)
    2bbc:	80 91 68 00 	lds	r24, 0x0068
    2bc0:	88 23       	and	r24, r24
    2bc2:	29 f4       	brne	.+10     	; 0x2bce <main+0x4c>
	    	   DIO_U8SetPinVal(PORT_A,0,LOW);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_U8SetPinVal>
	       flag = 0;
    2bce:	10 92 69 00 	sts	0x0069, r1
    2bd2:	e6 cf       	rjmp	.-52     	; 0x2ba0 <main+0x1e>

00002bd4 <__vector_12>:
  }


void __vector_12 (void)  __attribute((signal)) ;
void __vector_12 (void )
{
    2bd4:	1f 92       	push	r1
    2bd6:	0f 92       	push	r0
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	0f 92       	push	r0
    2bdc:	11 24       	eor	r1, r1
    2bde:	8f 93       	push	r24
    2be0:	ef 93       	push	r30
    2be2:	ff 93       	push	r31
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
  m=SPDR_REG;
    2bec:	ef e2       	ldi	r30, 0x2F	; 47
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	80 93 68 00 	sts	0x0068, r24
  flag = 1 ;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	80 93 69 00 	sts	0x0069, r24

}
    2bfc:	cf 91       	pop	r28
    2bfe:	df 91       	pop	r29
    2c00:	ff 91       	pop	r31
    2c02:	ef 91       	pop	r30
    2c04:	8f 91       	pop	r24
    2c06:	0f 90       	pop	r0
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	0f 90       	pop	r0
    2c0c:	1f 90       	pop	r1
    2c0e:	18 95       	reti

00002c10 <__prologue_saves__>:
    2c10:	2f 92       	push	r2
    2c12:	3f 92       	push	r3
    2c14:	4f 92       	push	r4
    2c16:	5f 92       	push	r5
    2c18:	6f 92       	push	r6
    2c1a:	7f 92       	push	r7
    2c1c:	8f 92       	push	r8
    2c1e:	9f 92       	push	r9
    2c20:	af 92       	push	r10
    2c22:	bf 92       	push	r11
    2c24:	cf 92       	push	r12
    2c26:	df 92       	push	r13
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	ca 1b       	sub	r28, r26
    2c3a:	db 0b       	sbc	r29, r27
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	09 94       	ijmp

00002c48 <__epilogue_restores__>:
    2c48:	2a 88       	ldd	r2, Y+18	; 0x12
    2c4a:	39 88       	ldd	r3, Y+17	; 0x11
    2c4c:	48 88       	ldd	r4, Y+16	; 0x10
    2c4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c50:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c52:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c54:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c56:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c58:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c5a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c5c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c5e:	df 80       	ldd	r13, Y+7	; 0x07
    2c60:	ee 80       	ldd	r14, Y+6	; 0x06
    2c62:	fd 80       	ldd	r15, Y+5	; 0x05
    2c64:	0c 81       	ldd	r16, Y+4	; 0x04
    2c66:	1b 81       	ldd	r17, Y+3	; 0x03
    2c68:	aa 81       	ldd	r26, Y+2	; 0x02
    2c6a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c6c:	ce 0f       	add	r28, r30
    2c6e:	d1 1d       	adc	r29, r1
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	ed 01       	movw	r28, r26
    2c7c:	08 95       	ret

00002c7e <_exit>:
    2c7e:	f8 94       	cli

00002c80 <__stop_program>:
    2c80:	ff cf       	rjmp	.-2      	; 0x2c80 <__stop_program>

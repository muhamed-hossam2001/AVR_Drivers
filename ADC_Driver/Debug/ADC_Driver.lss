
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000365e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  0000365e  000036f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080023c  0080023c  000038ce  2**0
                  ALLOC
  3 .stab         00003ed0  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021a1  00000000  00000000  000077a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009941  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c0de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000eaf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <main>
      8a:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e1       	ldi	r26, 0x12	; 18
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e1       	ldi	r24, 0x12	; 18
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e1       	ldi	r22, 0x12	; 18
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 5e       	subi	r30, 0xE6	; 230
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PORT_VoidInit>:
#include "PORT_Interface.h"
#include "PORT_REG.h"
#include "PORT_private.h"

void PORT_VoidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
DDRA_REG=PORTA_DIR;
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 ef       	ldi	r24, 0xF0	; 240
     e3c:	80 83       	st	Z, r24
DDRB_REG=PORTB_DIR;
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 83       	st	Z, r24
DDRC_REG=PORTC_DIR;
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	80 83       	st	Z, r24
DDRD_REG=PORTD_DIR;
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8f e0       	ldi	r24, 0x0F	; 15
     e54:	80 83       	st	Z, r24

PORTA_REG_INITIAL=PORTA_INITIAL_VALUE;
     e56:	eb e3       	ldi	r30, 0x3B	; 59
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 83       	st	Z, r24
PORTB_REG_INITIAL=PORTB_INITIAL_VALUE;
     e5e:	e8 e3       	ldi	r30, 0x38	; 56
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	10 82       	st	Z, r1
PORTC_REG_INITIAL=PORTC_INITIAL_VALUE;
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	10 82       	st	Z, r1
PORTD_REG_INITIAL=PORTD_INITIAL_VALUE;
     e6a:	e2 e3       	ldi	r30, 0x32	; 50
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	80 83       	st	Z, r24

}
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <EXTI_VidEnableOrDisableGIE>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Interface.h"
#include "GIE_REG.h"

void EXTI_VidEnableOrDisableGIE(u8 Copy_u8EN_DIS)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8EN_DIS==ENABLE)
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	41 f4       	brne	.+16     	; 0xe9a <EXTI_VidEnableOrDisableGIE+0x22>
		{
			SetBit(SREG_REG,SREG_I_BIT);
     e8a:	af e5       	ldi	r26, 0x5F	; 95
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ef e5       	ldi	r30, 0x5F	; 95
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
     e98:	0a c0       	rjmp	.+20     	; 0xeae <EXTI_VidEnableOrDisableGIE+0x36>

		}
	else if( Copy_u8EN_DIS==DISABLE)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 23       	and	r24, r24
     e9e:	39 f4       	brne	.+14     	; 0xeae <EXTI_VidEnableOrDisableGIE+0x36>
		{
		    ClearBit(SREG_REG,SREG_I_BIT);
     ea0:	af e5       	ldi	r26, 0x5F	; 95
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	ef e5       	ldi	r30, 0x5F	; 95
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 77       	andi	r24, 0x7F	; 127
     eac:	8c 93       	st	X, r24
		}
}
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild>:
//const void *NULL=0;



u8 EXTI_u8EnableOrDisableInterruptPin_Postbuild(u8 Copy_u8INTNum,u8 Copy_u8EN_DIS)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	27 97       	sbiw	r28, 0x07	; 7
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Status=RT_OK;
     ece:	19 82       	std	Y+1, r1	; 0x01
if (Copy_u8EN_DIS==ENABLE)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	a9 f5       	brne	.+106    	; 0xf40 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x8a>
	{
		SetBit(SREG_REG,SREG_I_BIT);
     ed6:	af e5       	ldi	r26, 0x5F	; 95
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ef e5       	ldi	r30, 0x5F	; 95
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	8c 93       	st	X, r24
		switch(Copy_u8INTNum)
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	3f 83       	std	Y+7, r19	; 0x07
     eec:	2e 83       	std	Y+6, r18	; 0x06
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	91 05       	cpc	r25, r1
     ef6:	89 f0       	breq	.+34     	; 0xf1a <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x64>
     ef8:	2e 81       	ldd	r18, Y+6	; 0x06
     efa:	3f 81       	ldd	r19, Y+7	; 0x07
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	a1 f0       	breq	.+40     	; 0xf2a <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x74>
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	c1 f4       	brne	.+48     	; 0xf3a <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0x84>
		{
		case INT0:{SetBit(GICR_REG,GICR_INT0); break;}
     f0a:	ab e5       	ldi	r26, 0x5B	; 91
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e5       	ldi	r30, 0x5B	; 91
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	8c 93       	st	X, r24
     f18:	46 c0       	rjmp	.+140    	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT1:{SetBit(GICR_REG,GICR_INT1); break;}
     f1a:	ab e5       	ldi	r26, 0x5B	; 91
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	eb e5       	ldi	r30, 0x5B	; 91
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 68       	ori	r24, 0x80	; 128
     f26:	8c 93       	st	X, r24
     f28:	3e c0       	rjmp	.+124    	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT2:{SetBit(GICR_REG,GICR_INT2); break;}
     f2a:	ab e5       	ldi	r26, 0x5B	; 91
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e5       	ldi	r30, 0x5B	; 91
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24
     f38:	36 c0       	rjmp	.+108    	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		default:{Local_u8Status=RT_NOK;}
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	33 c0       	rjmp	.+102    	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		}
	}
else if( Copy_u8EN_DIS==DISABLE)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	88 23       	and	r24, r24
     f44:	71 f5       	brne	.+92     	; 0xfa2 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xec>
	{
		switch(Copy_u8INTNum)
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3d 83       	std	Y+5, r19	; 0x05
     f4e:	2c 83       	std	Y+4, r18	; 0x04
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	89 f0       	breq	.+34     	; 0xf7c <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xc6>
     f5a:	2c 81       	ldd	r18, Y+4	; 0x04
     f5c:	3d 81       	ldd	r19, Y+5	; 0x05
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	a1 f0       	breq	.+40     	; 0xf8c <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xd6>
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	c1 f4       	brne	.+48     	; 0xf9c <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xe6>
		{
		case INT0:{ClearBit(GICR_REG,GICR_INT0); break;}
     f6c:	ab e5       	ldi	r26, 0x5B	; 91
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	eb e5       	ldi	r30, 0x5B	; 91
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 7b       	andi	r24, 0xBF	; 191
     f78:	8c 93       	st	X, r24
     f7a:	15 c0       	rjmp	.+42     	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT1:{ClearBit(GICR_REG,GICR_INT1); break;}
     f7c:	ab e5       	ldi	r26, 0x5B	; 91
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	eb e5       	ldi	r30, 0x5B	; 91
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 77       	andi	r24, 0x7F	; 127
     f88:	8c 93       	st	X, r24
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		case INT2:{ClearBit(GICR_REG,GICR_INT2); break;}
     f8c:	ab e5       	ldi	r26, 0x5B	; 91
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	eb e5       	ldi	r30, 0x5B	; 91
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8f 7d       	andi	r24, 0xDF	; 223
     f98:	8c 93       	st	X, r24
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		default:{Local_u8Status=RT_NOK;}
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <EXTI_u8EnableOrDisableInterruptPin_Postbuild+0xf0>
		}
	}
else
	{
	  Local_u8Status=RT_NOK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_u8Status;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01

}
     fa8:	27 96       	adiw	r28, 0x07	; 7
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <EXTI_voidEnableOrDisableInterruptPin_Prebuild>:

void EXTI_voidEnableOrDisableInterruptPin_Prebuild()
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
		SetBit(GICR_REG,GICR_INT0);

	}
#elif( INT0_INITAIL_STATE==DISABLE)
	{
		ClearBit(GICR_REG,GICR_INT0);
     fc2:	ab e5       	ldi	r26, 0x5B	; 91
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	eb e5       	ldi	r30, 0x5B	; 91
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7b       	andi	r24, 0xBF	; 191
     fce:	8c 93       	st	X, r24
		SetBit(GICR_REG,GICR_INT1);

	}
#elif( INT1_INITAIL_STATE==DISABLE)
	{
		ClearBit(GICR_REG,GICR_INT1);
     fd0:	ab e5       	ldi	r26, 0x5B	; 91
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	eb e5       	ldi	r30, 0x5B	; 91
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 77       	andi	r24, 0x7F	; 127
     fdc:	8c 93       	st	X, r24
		SetBit(GICR_REG,GICR_INT2);

	}
#elif( INT0_INITAIL_STATE==DISABLE)
	{
		ClearBit(GICR_REG,GICR_INT2);
     fde:	ab e5       	ldi	r26, 0x5B	; 91
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	eb e5       	ldi	r30, 0x5B	; 91
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7d       	andi	r24, 0xDF	; 223
     fea:	8c 93       	st	X, r24
	}
#endif


}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <EXTI_u8ControlSense_Postbuild>:

u8 EXTI_u8ControlSense_Postbuild(u8 Copy_u8INTNum,u8 Copy_u8Sense)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	2d 97       	sbiw	r28, 0x0d	; 13
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	8a 83       	std	Y+2, r24	; 0x02
    1008:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Status=RT_OK;
    100a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3d 87       	std	Y+13, r19	; 0x0d
    1014:	2c 87       	std	Y+12, r18	; 0x0c
    1016:	8c 85       	ldd	r24, Y+12	; 0x0c
    1018:	9d 85       	ldd	r25, Y+13	; 0x0d
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	91 05       	cpc	r25, r1
    101e:	b9 f1       	breq	.+110    	; 0x108e <EXTI_u8ControlSense_Postbuild+0x9c>
    1020:	2c 85       	ldd	r18, Y+12	; 0x0c
    1022:	3d 85       	ldd	r19, Y+13	; 0x0d
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	2c f4       	brge	.+10     	; 0x1034 <EXTI_u8ControlSense_Postbuild+0x42>
    102a:	8c 85       	ldd	r24, Y+12	; 0x0c
    102c:	9d 85       	ldd	r25, Y+13	; 0x0d
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	71 f0       	breq	.+28     	; 0x104e <EXTI_u8ControlSense_Postbuild+0x5c>
    1032:	ab c0       	rjmp	.+342    	; 0x118a <EXTI_u8ControlSense_Postbuild+0x198>
    1034:	2c 85       	ldd	r18, Y+12	; 0x0c
    1036:	3d 85       	ldd	r19, Y+13	; 0x0d
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <EXTI_u8ControlSense_Postbuild+0x4e>
    103e:	49 c0       	rjmp	.+146    	; 0x10d2 <EXTI_u8ControlSense_Postbuild+0xe0>
    1040:	8c 85       	ldd	r24, Y+12	; 0x0c
    1042:	9d 85       	ldd	r25, Y+13	; 0x0d
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <EXTI_u8ControlSense_Postbuild+0x5a>
    104a:	71 c0       	rjmp	.+226    	; 0x112e <EXTI_u8ControlSense_Postbuild+0x13c>
    104c:	9e c0       	rjmp	.+316    	; 0x118a <EXTI_u8ControlSense_Postbuild+0x198>
	{
		case LOW_LEVEL:
		{
			switch(Copy_u8INTNum)
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	3b 87       	std	Y+11, r19	; 0x0b
    1056:	2a 87       	std	Y+10, r18	; 0x0a
    1058:	8a 85       	ldd	r24, Y+10	; 0x0a
    105a:	9b 85       	ldd	r25, Y+11	; 0x0b
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	31 f0       	breq	.+12     	; 0x106c <EXTI_u8ControlSense_Postbuild+0x7a>
    1060:	2a 85       	ldd	r18, Y+10	; 0x0a
    1062:	3b 85       	ldd	r19, Y+11	; 0x0b
    1064:	21 30       	cpi	r18, 0x01	; 1
    1066:	31 05       	cpc	r19, r1
    1068:	41 f0       	breq	.+16     	; 0x107a <EXTI_u8ControlSense_Postbuild+0x88>
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <EXTI_u8ControlSense_Postbuild+0x96>
				{
				case INT0:{MCUCR_REG|=(LOW_LEVEL_INT01<<MCUCR_ISC01_ISC00_SELECT); break;}
    106c:	e5 e5       	ldi	r30, 0x55	; 85
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	a5 e5       	ldi	r26, 0x55	; 85
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	8c 91       	ld	r24, X
    1076:	80 83       	st	Z, r24
    1078:	8a c0       	rjmp	.+276    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				case INT1:{MCUCR_REG|=(LOW_LEVEL_INT01<<MCUCR_ISC11_ISC10_SELECT); break;}
    107a:	e5 e5       	ldi	r30, 0x55	; 85
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	a5 e5       	ldi	r26, 0x55	; 85
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	8c 91       	ld	r24, X
    1084:	80 83       	st	Z, r24
    1086:	83 c0       	rjmp	.+262    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				default:{Local_u8Status=RT_NOK;}
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	80 c0       	rjmp	.+256    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				}
		break;
		}
		case LOGICAL_CHANGE:
		{
			switch(Copy_u8INTNum)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	39 87       	std	Y+9, r19	; 0x09
    1096:	28 87       	std	Y+8, r18	; 0x08
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	99 85       	ldd	r25, Y+9	; 0x09
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	31 f0       	breq	.+12     	; 0x10ac <EXTI_u8ControlSense_Postbuild+0xba>
    10a0:	28 85       	ldd	r18, Y+8	; 0x08
    10a2:	39 85       	ldd	r19, Y+9	; 0x09
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	49 f0       	breq	.+18     	; 0x10bc <EXTI_u8ControlSense_Postbuild+0xca>
    10aa:	10 c0       	rjmp	.+32     	; 0x10cc <EXTI_u8ControlSense_Postbuild+0xda>
				{
				case INT0:{MCUCR_REG|=(LOGICAL_CHANGE_INT01<<MCUCR_ISC01_ISC00_SELECT); break;}
    10ac:	a5 e5       	ldi	r26, 0x55	; 85
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e5       	ldi	r30, 0x55	; 85
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	81 60       	ori	r24, 0x01	; 1
    10b8:	8c 93       	st	X, r24
    10ba:	69 c0       	rjmp	.+210    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				case INT1:{MCUCR_REG|=(LOGICAL_CHANGE_INT01<<MCUCR_ISC11_ISC10_SELECT); break;}
    10bc:	a5 e5       	ldi	r26, 0x55	; 85
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e5       	ldi	r30, 0x55	; 85
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	84 60       	ori	r24, 0x04	; 4
    10c8:	8c 93       	st	X, r24
    10ca:	61 c0       	rjmp	.+194    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				default:{Local_u8Status=RT_NOK;}
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	5e c0       	rjmp	.+188    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				}
			break;
		}
		case FALLING_EDGE:
		{
			switch(Copy_u8INTNum)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3f 83       	std	Y+7, r19	; 0x07
    10da:	2e 83       	std	Y+6, r18	; 0x06
    10dc:	8e 81       	ldd	r24, Y+6	; 0x06
    10de:	9f 81       	ldd	r25, Y+7	; 0x07
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	89 f0       	breq	.+34     	; 0x1108 <EXTI_u8ControlSense_Postbuild+0x116>
    10e6:	2e 81       	ldd	r18, Y+6	; 0x06
    10e8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	a1 f0       	breq	.+40     	; 0x1118 <EXTI_u8ControlSense_Postbuild+0x126>
    10f0:	8e 81       	ldd	r24, Y+6	; 0x06
    10f2:	9f 81       	ldd	r25, Y+7	; 0x07
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	c1 f4       	brne	.+48     	; 0x1128 <EXTI_u8ControlSense_Postbuild+0x136>
				{
				case INT0:{MCUCR_REG|=(FALLING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT); break;}
    10f8:	a5 e5       	ldi	r26, 0x55	; 85
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e5       	ldi	r30, 0x55	; 85
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	82 60       	ori	r24, 0x02	; 2
    1104:	8c 93       	st	X, r24
    1106:	43 c0       	rjmp	.+134    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				case INT1:{MCUCR_REG|=(FALLING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT); break;}
    1108:	a5 e5       	ldi	r26, 0x55	; 85
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e5       	ldi	r30, 0x55	; 85
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	88 60       	ori	r24, 0x08	; 8
    1114:	8c 93       	st	X, r24
    1116:	3b c0       	rjmp	.+118    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				case INT2:{ClearBit(MCUCSR_REG,MCUCSR_ISC2_BIT); break;}
    1118:	a4 e5       	ldi	r26, 0x54	; 84
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e4 e5       	ldi	r30, 0x54	; 84
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8f 7b       	andi	r24, 0xBF	; 191
    1124:	8c 93       	st	X, r24
    1126:	33 c0       	rjmp	.+102    	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				default:{Local_u8Status=RT_NOK;}
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	30 c0       	rjmp	.+96     	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				}
			break;
		}
		case RISING_EDGE:
		{
			switch(Copy_u8INTNum)
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3d 83       	std	Y+5, r19	; 0x05
    1136:	2c 83       	std	Y+4, r18	; 0x04
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	89 f0       	breq	.+34     	; 0x1164 <EXTI_u8ControlSense_Postbuild+0x172>
    1142:	2c 81       	ldd	r18, Y+4	; 0x04
    1144:	3d 81       	ldd	r19, Y+5	; 0x05
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	a1 f0       	breq	.+40     	; 0x1174 <EXTI_u8ControlSense_Postbuild+0x182>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	c1 f4       	brne	.+48     	; 0x1184 <EXTI_u8ControlSense_Postbuild+0x192>
				{
				case INT0:{MCUCR_REG|=(RISING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT); break;}
    1154:	a5 e5       	ldi	r26, 0x55	; 85
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e5       	ldi	r30, 0x55	; 85
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	83 60       	ori	r24, 0x03	; 3
    1160:	8c 93       	st	X, r24
    1162:	15 c0       	rjmp	.+42     	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				case INT1:{MCUCR_REG|=(RISING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT); break;}
    1164:	a5 e5       	ldi	r26, 0x55	; 85
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e5       	ldi	r30, 0x55	; 85
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8c 60       	ori	r24, 0x0C	; 12
    1170:	8c 93       	st	X, r24
    1172:	0d c0       	rjmp	.+26     	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				case INT2:{SetBit(MCUCSR_REG,MCUCSR_ISC2_BIT); break;}
    1174:	a4 e5       	ldi	r26, 0x54	; 84
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e4 e5       	ldi	r30, 0x54	; 84
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	8c 93       	st	X, r24
    1182:	05 c0       	rjmp	.+10     	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				default:{Local_u8Status=RT_NOK;}
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	02 c0       	rjmp	.+4      	; 0x118e <EXTI_u8ControlSense_Postbuild+0x19c>
				}
			break;
		}
		default:{Local_u8Status=RT_NOK;}
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8Status;
    118e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1190:	2d 96       	adiw	r28, 0x0d	; 13
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <EXTI_VidControlSense_Prebuild>:

void EXTI_VidControlSense_Prebuild(void)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	{
		MCUCR_REG|=(RISING_EDGE_INT01<<MCUCR_ISC01_ISC00_SELECT);
	}
#elif INT0_SENSE==LOW_LEVEL_INT01
	{
		MCUCR_REG|=(LOW_LEVEL_INT01<<MCUCR_ISC01_ISC00_SELECT);
    11aa:	a5 e5       	ldi	r26, 0x55	; 85
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e5 e5       	ldi	r30, 0x55	; 85
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8c 93       	st	X, r24
	{
		MCUCR_REG|=(RISING_EDGE_INT01<<MCUCR_ISC11_ISC10_SELECT);
	}
#elif INT1_SENSE==LOW_LEVEL_INT01
	{
		MCUCR_REG|=(LOW_LEVEL_INT01<<MCUCR_ISC11_ISC10_SELECT);
    11b6:	a5 e5       	ldi	r26, 0x55	; 85
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e5       	ldi	r30, 0x55	; 85
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8c 93       	st	X, r24


	/*select Sense for INT2*/
#if INT2_SENSE==FALLING_EDGE_INT2
	{
		ClearBit(MCUCSR_REG,MCUCSR_ISC2_BIT);
    11c2:	a4 e5       	ldi	r26, 0x54	; 84
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e4 e5       	ldi	r30, 0x54	; 84
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7b       	andi	r24, 0xBF	; 191
    11ce:	8c 93       	st	X, r24
	{
		SetBit(MCUCSR_REG,MCUCSR_ISC2_BIT);
	}
#endif

}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DIO_U8SetPortDir>:
#include "DIO_REG.h"
#include "DIO_Interface.h"


u8 DIO_U8SetPortDir(enum PORTS Copy_u8PortNo,u8  Copy_u8dDir)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_U8SetPortDir+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_U8SetPortDir+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	6b 83       	std	Y+3, r22	; 0x03

	 u8 Local_Status=RT_OK;
    11e8:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo<0||Copy_u8PortNo>3)
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	18 f0       	brcs	.+6      	; 0x11f6 <DIO_U8SetPortDir+0x20>
{
	Local_Status=RT_NOK;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	32 c0       	rjmp	.+100    	; 0x125a <DIO_U8SetPortDir+0x84>

}
else
{
	switch(Copy_u8PortNo)
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	3d 83       	std	Y+5, r19	; 0x05
    11fe:	2c 83       	std	Y+4, r18	; 0x04
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	91 05       	cpc	r25, r1
    1208:	d1 f0       	breq	.+52     	; 0x123e <DIO_U8SetPortDir+0x68>
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	3d 81       	ldd	r19, Y+5	; 0x05
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	2c f4       	brge	.+10     	; 0x121e <DIO_U8SetPortDir+0x48>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	61 f0       	breq	.+24     	; 0x1234 <DIO_U8SetPortDir+0x5e>
    121c:	1e c0       	rjmp	.+60     	; 0x125a <DIO_U8SetPortDir+0x84>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <DIO_U8SetPortDir+0x72>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	91 05       	cpc	r25, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <DIO_U8SetPortDir+0x7c>
    1232:	13 c0       	rjmp	.+38     	; 0x125a <DIO_U8SetPortDir+0x84>
	{
	case 0:{DDRA_REG=Copy_u8dDir; break;}
    1234:	ea e3       	ldi	r30, 0x3A	; 58
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	80 83       	st	Z, r24
    123c:	0e c0       	rjmp	.+28     	; 0x125a <DIO_U8SetPortDir+0x84>
	case 1:{DDRB_REG=Copy_u8dDir; break;}
    123e:	e7 e3       	ldi	r30, 0x37	; 55
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	80 83       	st	Z, r24
    1246:	09 c0       	rjmp	.+18     	; 0x125a <DIO_U8SetPortDir+0x84>
	case 2:{DDRC_REG=Copy_u8dDir; break;}
    1248:	e4 e3       	ldi	r30, 0x34	; 52
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	80 83       	st	Z, r24
    1250:	04 c0       	rjmp	.+8      	; 0x125a <DIO_U8SetPortDir+0x84>
	case 3:{DDRD_REG=Copy_u8dDir; break;}
    1252:	e1 e3       	ldi	r30, 0x31	; 49
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	80 83       	st	Z, r24
	}
}
return Local_Status;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <DIO_U8SetPortVal>:

u8 DIO_U8SetPortVal(enum PORTS Copy_u8PortNo , u8 Copy_Val)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <DIO_U8SetPortVal+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <DIO_U8SetPortVal+0x8>
    1274:	0f 92       	push	r0
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Status=RT_OK;
    127e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <0||Copy_u8PortNo>3)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	18 f0       	brcs	.+6      	; 0x128c <DIO_U8SetPortVal+0x20>
	{
		 Local_Status=RT_NOK;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	32 c0       	rjmp	.+100    	; 0x12f0 <DIO_U8SetPortVal+0x84>

	}
	else
	{
		switch(Copy_u8PortNo)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3d 83       	std	Y+5, r19	; 0x05
    1294:	2c 83       	std	Y+4, r18	; 0x04
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	d1 f0       	breq	.+52     	; 0x12d4 <DIO_U8SetPortVal+0x68>
    12a0:	2c 81       	ldd	r18, Y+4	; 0x04
    12a2:	3d 81       	ldd	r19, Y+5	; 0x05
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <DIO_U8SetPortVal+0x48>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 f0       	breq	.+24     	; 0x12ca <DIO_U8SetPortVal+0x5e>
    12b2:	1e c0       	rjmp	.+60     	; 0x12f0 <DIO_U8SetPortVal+0x84>
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	81 f0       	breq	.+32     	; 0x12de <DIO_U8SetPortVal+0x72>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	81 f0       	breq	.+32     	; 0x12e8 <DIO_U8SetPortVal+0x7c>
    12c8:	13 c0       	rjmp	.+38     	; 0x12f0 <DIO_U8SetPortVal+0x84>
		{
		case 0:{PORTA_REG=Copy_Val; break;}
    12ca:	eb e3       	ldi	r30, 0x3B	; 59
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	80 83       	st	Z, r24
    12d2:	0e c0       	rjmp	.+28     	; 0x12f0 <DIO_U8SetPortVal+0x84>
		case 1:{PORTB_REG=Copy_Val; break;}
    12d4:	e8 e3       	ldi	r30, 0x38	; 56
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	80 83       	st	Z, r24
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <DIO_U8SetPortVal+0x84>
		case 2:{PORTC_REG=Copy_Val; break;}
    12de:	e5 e3       	ldi	r30, 0x35	; 53
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	80 83       	st	Z, r24
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <DIO_U8SetPortVal+0x84>
		case 3:{PORTD_REG=Copy_Val; break;}
    12e8:	e2 e3       	ldi	r30, 0x32	; 50
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01

}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <DIO_U8GetPortVal>:

u8 DIO_U8GetPortVal(enum PORTS Copy_u8PortNo, u8* u8_Val)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_U8GetPortVal+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_U8GetPortVal+0x8>
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_U8GetPortVal+0xa>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8a 83       	std	Y+2, r24	; 0x02
    1312:	7c 83       	std	Y+4, r23	; 0x04
    1314:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_Status=RT_OK;
    1316:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo<0|| Copy_u8PortNo>3)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	18 f0       	brcs	.+6      	; 0x1324 <DIO_U8GetPortVal+0x22>
	{
		Local_Status=RT_NOK;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	3a c0       	rjmp	.+116    	; 0x1398 <DIO_U8GetPortVal+0x96>

	}
	else
	{
		switch(Copy_u8PortNo)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3e 83       	std	Y+6, r19	; 0x06
    132c:	2d 83       	std	Y+5, r18	; 0x05
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	e1 f0       	breq	.+56     	; 0x1370 <DIO_U8GetPortVal+0x6e>
    1338:	2d 81       	ldd	r18, Y+5	; 0x05
    133a:	3e 81       	ldd	r19, Y+6	; 0x06
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	2c f4       	brge	.+10     	; 0x134c <DIO_U8GetPortVal+0x4a>
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	61 f0       	breq	.+24     	; 0x1362 <DIO_U8GetPortVal+0x60>
    134a:	26 c0       	rjmp	.+76     	; 0x1398 <DIO_U8GetPortVal+0x96>
    134c:	2d 81       	ldd	r18, Y+5	; 0x05
    134e:	3e 81       	ldd	r19, Y+6	; 0x06
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	a1 f0       	breq	.+40     	; 0x137e <DIO_U8GetPortVal+0x7c>
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	b1 f0       	breq	.+44     	; 0x138c <DIO_U8GetPortVal+0x8a>
    1360:	1b c0       	rjmp	.+54     	; 0x1398 <DIO_U8GetPortVal+0x96>
		{
		case 0:{*u8_Val=PINA_REG; break;}
    1362:	e9 e3       	ldi	r30, 0x39	; 57
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	80 83       	st	Z, r24
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <DIO_U8GetPortVal+0x96>
		case 1:{*u8_Val=PINB_REG; break;}
    1370:	e6 e3       	ldi	r30, 0x36	; 54
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	eb 81       	ldd	r30, Y+3	; 0x03
    1378:	fc 81       	ldd	r31, Y+4	; 0x04
    137a:	80 83       	st	Z, r24
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <DIO_U8GetPortVal+0x96>
		case 2:{*u8_Val=PINC_REG; break;}
    137e:	e3 e3       	ldi	r30, 0x33	; 51
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	eb 81       	ldd	r30, Y+3	; 0x03
    1386:	fc 81       	ldd	r31, Y+4	; 0x04
    1388:	80 83       	st	Z, r24
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <DIO_U8GetPortVal+0x96>
		case 3:{*u8_Val=PIND_REG; break;}
    138c:	e0 e3       	ldi	r30, 0x30	; 48
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	eb 81       	ldd	r30, Y+3	; 0x03
    1394:	fc 81       	ldd	r31, Y+4	; 0x04
    1396:	80 83       	st	Z, r24
		}
	}
	return Local_Status;
    1398:	89 81       	ldd	r24, Y+1	; 0x01

}
    139a:	26 96       	adiw	r28, 0x06	; 6
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DIO_U8SetPinDir>:

u8 DIO_U8SetPinDir(enum PORTS Copy_u8PortNo , enum PINS Copy_u8PinNo,u8 Copy_u8Dir)
{	u8 Local_Status=RT_OK;
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	28 97       	sbiw	r28, 0x08	; 8
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6b 83       	std	Y+3, r22	; 0x03
    13c4:	4c 83       	std	Y+4, r20	; 0x04
    13c6:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_u8Dir == HIGH)
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <DIO_U8SetPinDir+0x24>
    13ce:	6f c0       	rjmp	.+222    	; 0x14ae <DIO_U8SetPinDir+0x102>
		{
			switch(Copy_u8PortNo)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	38 87       	std	Y+8, r19	; 0x08
    13d8:	2f 83       	std	Y+7, r18	; 0x07
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	49 f1       	breq	.+82     	; 0x1436 <DIO_U8SetPinDir+0x8a>
    13e4:	2f 81       	ldd	r18, Y+7	; 0x07
    13e6:	38 85       	ldd	r19, Y+8	; 0x08
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_U8SetPinDir+0x4c>
    13ee:	8f 81       	ldd	r24, Y+7	; 0x07
    13f0:	98 85       	ldd	r25, Y+8	; 0x08
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	61 f0       	breq	.+24     	; 0x140e <DIO_U8SetPinDir+0x62>
    13f6:	d5 c0       	rjmp	.+426    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
    13f8:	2f 81       	ldd	r18, Y+7	; 0x07
    13fa:	38 85       	ldd	r19, Y+8	; 0x08
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	71 f1       	breq	.+92     	; 0x145e <DIO_U8SetPinDir+0xb2>
    1402:	8f 81       	ldd	r24, Y+7	; 0x07
    1404:	98 85       	ldd	r25, Y+8	; 0x08
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	e9 f1       	breq	.+122    	; 0x1486 <DIO_U8SetPinDir+0xda>
    140c:	ca c0       	rjmp	.+404    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
			{
			case 0:
			{
				SetBit(DDRA_REG,Copy_u8PinNo);
    140e:	aa e3       	ldi	r26, 0x3A	; 58
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ea e3       	ldi	r30, 0x3A	; 58
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_U8SetPinDir+0x80>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_U8SetPinDir+0x7c>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	b6 c0       	rjmp	.+364    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 1:
			{
				SetBit(DDRB_REG,Copy_u8PinNo);
    1436:	a7 e3       	ldi	r26, 0x37	; 55
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e7 e3       	ldi	r30, 0x37	; 55
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_U8SetPinDir+0xa8>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_U8SetPinDir+0xa4>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	a2 c0       	rjmp	.+324    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 2:
			{
				SetBit(DDRC_REG,Copy_u8PinNo);
    145e:	a4 e3       	ldi	r26, 0x34	; 52
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e4 e3       	ldi	r30, 0x34	; 52
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_U8SetPinDir+0xd0>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_U8SetPinDir+0xcc>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	8e c0       	rjmp	.+284    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
				break;
			}
			case 3:
			{
				SetBit(DDRD_REG,Copy_u8PinNo);
    1486:	a1 e3       	ldi	r26, 0x31	; 49
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e1 e3       	ldi	r30, 0x31	; 49
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_U8SetPinDir+0xf8>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_U8SetPinDir+0xf4>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	7a c0       	rjmp	.+244    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
				break;
			}

			}
		}
		else if(Copy_u8Dir==LOW)
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	88 23       	and	r24, r24
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <DIO_U8SetPinDir+0x10a>
    14b4:	74 c0       	rjmp	.+232    	; 0x159e <DIO_U8SetPinDir+0x1f2>
		{
			switch(Copy_u8PortNo)
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3e 83       	std	Y+6, r19	; 0x06
    14be:	2d 83       	std	Y+5, r18	; 0x05
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	59 f1       	breq	.+86     	; 0x1520 <DIO_U8SetPinDir+0x174>
    14ca:	2d 81       	ldd	r18, Y+5	; 0x05
    14cc:	3e 81       	ldd	r19, Y+6	; 0x06
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <DIO_U8SetPinDir+0x132>
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f0       	breq	.+26     	; 0x14f6 <DIO_U8SetPinDir+0x14a>
    14dc:	62 c0       	rjmp	.+196    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
    14de:	2d 81       	ldd	r18, Y+5	; 0x05
    14e0:	3e 81       	ldd	r19, Y+6	; 0x06
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	89 f1       	breq	.+98     	; 0x154a <DIO_U8SetPinDir+0x19e>
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <DIO_U8SetPinDir+0x148>
    14f2:	40 c0       	rjmp	.+128    	; 0x1574 <DIO_U8SetPinDir+0x1c8>
    14f4:	56 c0       	rjmp	.+172    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
			{
				case 0:
				{
					ClearBit(DDRA_REG,Copy_u8PinNo);
    14f6:	aa e3       	ldi	r26, 0x3A	; 58
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ea e3       	ldi	r30, 0x3A	; 58
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_U8SetPinDir+0x168>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_U8SetPinDir+0x164>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	41 c0       	rjmp	.+130    	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 1:
				{
					ClearBit(DDRB_REG,Copy_u8PinNo);
    1520:	a7 e3       	ldi	r26, 0x37	; 55
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e7 e3       	ldi	r30, 0x37	; 55
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_U8SetPinDir+0x192>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_U8SetPinDir+0x18e>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	2c c0       	rjmp	.+88     	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 2:
				{
					ClearBit(DDRC_REG,Copy_u8PinNo);
    154a:	a4 e3       	ldi	r26, 0x34	; 52
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e4 e3       	ldi	r30, 0x34	; 52
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_U8SetPinDir+0x1bc>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_U8SetPinDir+0x1b8>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	17 c0       	rjmp	.+46     	; 0x15a2 <DIO_U8SetPinDir+0x1f6>
					break;
				}
				case 3:
				{
					ClearBit(DDRD_REG,Copy_u8PinNo);
    1574:	a1 e3       	ldi	r26, 0x31	; 49
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e1 e3       	ldi	r30, 0x31	; 49
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <DIO_U8SetPinDir+0x1e6>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <DIO_U8SetPinDir+0x1e2>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_U8SetPinDir+0x1f6>

			}
		}
		else
		{
			Local_Status=RT_NOK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    15a4:	28 96       	adiw	r28, 0x08	; 8
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <DIO_U8SetPinVal>:

u8 DIO_U8SetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo,u8 Copy_Val)

{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	28 97       	sbiw	r28, 0x08	; 8
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	6b 83       	std	Y+3, r22	; 0x03
    15ce:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    15d0:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
{
	if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
	{
		if(Copy_Val == HIGH)
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	09 f0       	breq	.+2      	; 0x15da <DIO_U8SetPinVal+0x24>
    15d8:	6f c0       	rjmp	.+222    	; 0x16b8 <DIO_U8SetPinVal+0x102>
		{
			switch(Copy_u8PortNo)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	38 87       	std	Y+8, r19	; 0x08
    15e2:	2f 83       	std	Y+7, r18	; 0x07
    15e4:	8f 81       	ldd	r24, Y+7	; 0x07
    15e6:	98 85       	ldd	r25, Y+8	; 0x08
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	49 f1       	breq	.+82     	; 0x1640 <DIO_U8SetPinVal+0x8a>
    15ee:	2f 81       	ldd	r18, Y+7	; 0x07
    15f0:	38 85       	ldd	r19, Y+8	; 0x08
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <DIO_U8SetPinVal+0x4c>
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	98 85       	ldd	r25, Y+8	; 0x08
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	61 f0       	breq	.+24     	; 0x1618 <DIO_U8SetPinVal+0x62>
    1600:	d5 c0       	rjmp	.+426    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
    1602:	2f 81       	ldd	r18, Y+7	; 0x07
    1604:	38 85       	ldd	r19, Y+8	; 0x08
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	71 f1       	breq	.+92     	; 0x1668 <DIO_U8SetPinVal+0xb2>
    160c:	8f 81       	ldd	r24, Y+7	; 0x07
    160e:	98 85       	ldd	r25, Y+8	; 0x08
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	e9 f1       	breq	.+122    	; 0x1690 <DIO_U8SetPinVal+0xda>
    1616:	ca c0       	rjmp	.+404    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
			{
			case 0:
			{
				SetBit(PORTA_REG,Copy_u8PinNo);
    1618:	ab e3       	ldi	r26, 0x3B	; 59
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_U8SetPinVal+0x80>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_U8SetPinVal+0x7c>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	b6 c0       	rjmp	.+364    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 1:
			{
				SetBit(PORTB_REG,Copy_u8PinNo);
    1640:	a8 e3       	ldi	r26, 0x38	; 56
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e8 e3       	ldi	r30, 0x38	; 56
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_U8SetPinVal+0xa8>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_U8SetPinVal+0xa4>
    1662:	84 2b       	or	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	a2 c0       	rjmp	.+324    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 2:
			{
				SetBit(PORTC_REG,Copy_u8PinNo);
    1668:	a5 e3       	ldi	r26, 0x35	; 53
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e5 e3       	ldi	r30, 0x35	; 53
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_U8SetPinVal+0xd0>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_U8SetPinVal+0xcc>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	8e c0       	rjmp	.+284    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
				break;
			}
			case 3:
			{
				SetBit(PORTD_REG,Copy_u8PinNo);
    1690:	a2 e3       	ldi	r26, 0x32	; 50
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e2 e3       	ldi	r30, 0x32	; 50
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_U8SetPinVal+0xf8>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_U8SetPinVal+0xf4>
    16b2:	84 2b       	or	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	7a c0       	rjmp	.+244    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
				break;
			}

			}
		}
		else if(Copy_Val==LOW)
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	88 23       	and	r24, r24
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <DIO_U8SetPinVal+0x10a>
    16be:	74 c0       	rjmp	.+232    	; 0x17a8 <DIO_U8SetPinVal+0x1f2>
		{
			switch(Copy_u8PortNo)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3e 83       	std	Y+6, r19	; 0x06
    16c8:	2d 83       	std	Y+5, r18	; 0x05
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	59 f1       	breq	.+86     	; 0x172a <DIO_U8SetPinVal+0x174>
    16d4:	2d 81       	ldd	r18, Y+5	; 0x05
    16d6:	3e 81       	ldd	r19, Y+6	; 0x06
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <DIO_U8SetPinVal+0x132>
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f0       	breq	.+26     	; 0x1700 <DIO_U8SetPinVal+0x14a>
    16e6:	62 c0       	rjmp	.+196    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
    16e8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ea:	3e 81       	ldd	r19, Y+6	; 0x06
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	89 f1       	breq	.+98     	; 0x1754 <DIO_U8SetPinVal+0x19e>
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <DIO_U8SetPinVal+0x148>
    16fc:	40 c0       	rjmp	.+128    	; 0x177e <DIO_U8SetPinVal+0x1c8>
    16fe:	56 c0       	rjmp	.+172    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
			{
				case 0:
				{
					ClearBit(PORTA_REG,Copy_u8PinNo);
    1700:	ab e3       	ldi	r26, 0x3B	; 59
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_U8SetPinVal+0x168>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_U8SetPinVal+0x164>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	41 c0       	rjmp	.+130    	; 0x17ac <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 1:
				{
					ClearBit(PORTB_REG,Copy_u8PinNo);
    172a:	a8 e3       	ldi	r26, 0x38	; 56
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 e3       	ldi	r30, 0x38	; 56
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_U8SetPinVal+0x192>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_U8SetPinVal+0x18e>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	2c c0       	rjmp	.+88     	; 0x17ac <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 2:
				{
					ClearBit(PORTC_REG,Copy_u8PinNo);
    1754:	a5 e3       	ldi	r26, 0x35	; 53
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e5 e3       	ldi	r30, 0x35	; 53
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_U8SetPinVal+0x1bc>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_U8SetPinVal+0x1b8>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	17 c0       	rjmp	.+46     	; 0x17ac <DIO_U8SetPinVal+0x1f6>
					break;
				}
				case 3:
				{
					ClearBit(PORTD_REG,Copy_u8PinNo);
    177e:	a2 e3       	ldi	r26, 0x32	; 50
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e2 e3       	ldi	r30, 0x32	; 50
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_U8SetPinVal+0x1e6>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_U8SetPinVal+0x1e2>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_U8SetPinVal+0x1f6>

			}
		}
		else
		{
			Local_Status=RT_NOK;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
{
	Local_Status=RT_NOK;
}


	return Local_Status;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	28 96       	adiw	r28, 0x08	; 8
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <DIO_U8GetPinVal>:

u8 DIO_U8GetPinVal(enum PORTS Copy_u8PortNo,enum PINS  Copy_u8PinNo, u8* u8_Val)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	27 97       	sbiw	r28, 0x07	; 7
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	8a 83       	std	Y+2, r24	; 0x02
    17d6:	6b 83       	std	Y+3, r22	; 0x03
    17d8:	5d 83       	std	Y+5, r21	; 0x05
    17da:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    17dc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo>=0||Copy_u8PortNo<=3)
	{
		if(Copy_u8PinNo>=0||Copy_u8PinNo<=7)
		{

				switch(Copy_u8PortNo)
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3f 83       	std	Y+7, r19	; 0x07
    17e6:	2e 83       	std	Y+6, r18	; 0x06
    17e8:	4e 81       	ldd	r20, Y+6	; 0x06
    17ea:	5f 81       	ldd	r21, Y+7	; 0x07
    17ec:	41 30       	cpi	r20, 0x01	; 1
    17ee:	51 05       	cpc	r21, r1
    17f0:	59 f1       	breq	.+86     	; 0x1848 <DIO_U8GetPinVal+0x88>
    17f2:	8e 81       	ldd	r24, Y+6	; 0x06
    17f4:	9f 81       	ldd	r25, Y+7	; 0x07
    17f6:	82 30       	cpi	r24, 0x02	; 2
    17f8:	91 05       	cpc	r25, r1
    17fa:	34 f4       	brge	.+12     	; 0x1808 <DIO_U8GetPinVal+0x48>
    17fc:	2e 81       	ldd	r18, Y+6	; 0x06
    17fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1800:	21 15       	cp	r18, r1
    1802:	31 05       	cpc	r19, r1
    1804:	69 f0       	breq	.+26     	; 0x1820 <DIO_U8GetPinVal+0x60>
    1806:	5b c0       	rjmp	.+182    	; 0x18be <DIO_U8GetPinVal+0xfe>
    1808:	4e 81       	ldd	r20, Y+6	; 0x06
    180a:	5f 81       	ldd	r21, Y+7	; 0x07
    180c:	42 30       	cpi	r20, 0x02	; 2
    180e:	51 05       	cpc	r21, r1
    1810:	79 f1       	breq	.+94     	; 0x1870 <DIO_U8GetPinVal+0xb0>
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	9f 81       	ldd	r25, Y+7	; 0x07
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <DIO_U8GetPinVal+0x5e>
    181c:	3d c0       	rjmp	.+122    	; 0x1898 <DIO_U8GetPinVal+0xd8>
    181e:	4f c0       	rjmp	.+158    	; 0x18be <DIO_U8GetPinVal+0xfe>
				{
				case 0:
				{
					*u8_Val=GetBit(PINA_REG,Copy_u8PinNo);
    1820:	e9 e3       	ldi	r30, 0x39	; 57
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a9 01       	movw	r20, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_U8GetPinVal+0x78>
    1834:	55 95       	asr	r21
    1836:	47 95       	ror	r20
    1838:	8a 95       	dec	r24
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_U8GetPinVal+0x74>
    183c:	ca 01       	movw	r24, r20
    183e:	81 70       	andi	r24, 0x01	; 1
    1840:	ec 81       	ldd	r30, Y+4	; 0x04
    1842:	fd 81       	ldd	r31, Y+5	; 0x05
    1844:	80 83       	st	Z, r24
    1846:	3b c0       	rjmp	.+118    	; 0x18be <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 1:
				{
					*u8_Val=GetBit(PINB_REG,Copy_u8PinNo);
    1848:	e6 e3       	ldi	r30, 0x36	; 54
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a9 01       	movw	r20, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_U8GetPinVal+0xa0>
    185c:	55 95       	asr	r21
    185e:	47 95       	ror	r20
    1860:	8a 95       	dec	r24
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_U8GetPinVal+0x9c>
    1864:	ca 01       	movw	r24, r20
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	ec 81       	ldd	r30, Y+4	; 0x04
    186a:	fd 81       	ldd	r31, Y+5	; 0x05
    186c:	80 83       	st	Z, r24
    186e:	27 c0       	rjmp	.+78     	; 0x18be <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 2:
				{
					*u8_Val=GetBit(PINC_REG,Copy_u8PinNo);
    1870:	e3 e3       	ldi	r30, 0x33	; 51
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_U8GetPinVal+0xc8>
    1884:	55 95       	asr	r21
    1886:	47 95       	ror	r20
    1888:	8a 95       	dec	r24
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_U8GetPinVal+0xc4>
    188c:	ca 01       	movw	r24, r20
    188e:	81 70       	andi	r24, 0x01	; 1
    1890:	ec 81       	ldd	r30, Y+4	; 0x04
    1892:	fd 81       	ldd	r31, Y+5	; 0x05
    1894:	80 83       	st	Z, r24
    1896:	13 c0       	rjmp	.+38     	; 0x18be <DIO_U8GetPinVal+0xfe>
					break;
				}
				case 3:
				{
					*u8_Val=GetBit(PIND_REG,Copy_u8PinNo);
    1898:	e0 e3       	ldi	r30, 0x30	; 48
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_U8GetPinVal+0xf0>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_U8GetPinVal+0xec>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	ec 81       	ldd	r30, Y+4	; 0x04
    18ba:	fd 81       	ldd	r31, Y+5	; 0x05
    18bc:	80 83       	st	Z, r24
	{
		Local_Status=RT_NOK;
	}


		return Local_Status;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c0:	27 96       	adiw	r28, 0x07	; 7
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <ADC_VoidInit_PreBuild>:
static u16*Global_pu16ADC_Reading=NULL;

u8 Global_u8State=IDIL;

void ADC_VoidInit_PreBuild(void)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG=ADMUX_INITAIL_VALUE;
    18da:	e7 e2       	ldi	r30, 0x27	; 39
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 e4       	ldi	r24, 0x40	; 64
    18e0:	80 83       	st	Z, r24
	ADCSRA_REG=ADCSRA_REG_INITAIL_VALUE;
    18e2:	e6 e2       	ldi	r30, 0x26	; 38
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	86 e8       	ldi	r24, 0x86	; 134
    18e8:	80 83       	st	Z, r24
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <ADC_u8AdjustmentSelect_Postbuild>:

u8 ADC_u8AdjustmentSelect_Postbuild(u8 Copy_u8Justfication)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <ADC_u8AdjustmentSelect_Postbuild+0x6>
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status=RT_OK;
    18fc:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Justfication==LEFT_JUSTFICATION)
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	41 f4       	brne	.+16     	; 0x1914 <ADC_u8AdjustmentSelect_Postbuild+0x24>
	{
	 SetBit(ADMUX_REG,ADLAR);
    1904:	a7 e2       	ldi	r26, 0x27	; 39
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e7 e2       	ldi	r30, 0x27	; 39
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 62       	ori	r24, 0x20	; 32
    1910:	8c 93       	st	X, r24
    1912:	0d c0       	rjmp	.+26     	; 0x192e <ADC_u8AdjustmentSelect_Postbuild+0x3e>
	}
else if (Copy_u8Justfication==RIGHT_JUSTFICATION)
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	88 23       	and	r24, r24
    1918:	41 f4       	brne	.+16     	; 0x192a <ADC_u8AdjustmentSelect_Postbuild+0x3a>
	{
	 ClearBit(ADMUX_REG,ADLAR);
    191a:	a7 e2       	ldi	r26, 0x27	; 39
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e7 e2       	ldi	r30, 0x27	; 39
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8f 7d       	andi	r24, 0xDF	; 223
    1926:	8c 93       	st	X, r24
    1928:	02 c0       	rjmp	.+4      	; 0x192e <ADC_u8AdjustmentSelect_Postbuild+0x3e>
	}
else
	{
	 Local_u8Status=RT_NOK;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_u8Status;
    192e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <ADC_VoidVrefSelect_Postbuild>:

void ADC_VoidVrefSelect_Postbuild(u8 Copy_u8Vref)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <ADC_VoidVrefSelect_Postbuild+0x6>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp=ADMUX_REG;
    1946:	e7 e2       	ldi	r30, 0x27	; 39
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp&=SELECT_VREF_MASK;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	8f 73       	andi	r24, 0x3F	; 63
    1952:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp|=Copy_u8Vref;
    1954:	99 81       	ldd	r25, Y+1	; 0x01
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	89 2b       	or	r24, r25
    195a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG=Local_u8Temp;
    195c:	e7 e2       	ldi	r30, 0x27	; 39
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	80 83       	st	Z, r24
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <ADC_VoidPrescalerSelect_Postbuild>:

void ADC_VoidPrescalerSelect_Postbuild(enum ADC_PRESACLEERS Copy_u8Prescaler)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <ADC_VoidPrescalerSelect_Postbuild+0x6>
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp=ADCSRA_REG;
    197a:	e6 e2       	ldi	r30, 0x26	; 38
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp&=SELECT_PRESCALER_MASK;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	88 7f       	andi	r24, 0xF8	; 248
    1986:	89 83       	std	Y+1, r24	; 0x01
	Local_u8Temp|=Copy_u8Prescaler;
    1988:	99 81       	ldd	r25, Y+1	; 0x01
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	89 2b       	or	r24, r25
    198e:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA_REG=Local_u8Temp;
    1990:	e6 e2       	ldi	r30, 0x26	; 38
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	80 83       	st	Z, r24
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <ADC_u8ONO_OFFStateSelect_Postbuild>:

u8 ADC_u8ONO_OFFStateSelect_Postbuild(u8 Copy_u8ADC_State)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <ADC_u8ONO_OFFStateSelect_Postbuild+0x6>
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status=RT_OK;
    19ae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ADC_State==ENABLE)
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	41 f4       	brne	.+16     	; 0x19c6 <ADC_u8ONO_OFFStateSelect_Postbuild+0x24>
		{
		 SetBit(ADCSRA_REG,ADEN);
    19b6:	a6 e2       	ldi	r26, 0x26	; 38
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e6 e2       	ldi	r30, 0x26	; 38
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 68       	ori	r24, 0x80	; 128
    19c2:	8c 93       	st	X, r24
    19c4:	0d c0       	rjmp	.+26     	; 0x19e0 <ADC_u8ONO_OFFStateSelect_Postbuild+0x3e>
		}
	else if (Copy_u8ADC_State==DISABLE)
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	88 23       	and	r24, r24
    19ca:	41 f4       	brne	.+16     	; 0x19dc <ADC_u8ONO_OFFStateSelect_Postbuild+0x3a>
		{
		 ClearBit(ADCSRA_REG,ADEN);
    19cc:	a6 e2       	ldi	r26, 0x26	; 38
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e6 e2       	ldi	r30, 0x26	; 38
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 77       	andi	r24, 0x7F	; 127
    19d8:	8c 93       	st	X, r24
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <ADC_u8ONO_OFFStateSelect_Postbuild+0x3e>
		}
	else
		{
		 Local_u8Status=RT_NOK;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8Status;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <ADC_u8AutoTriggerEnable_Postbuild>:

u8 ADC_u8AutoTriggerEnable_Postbuild(u8 Copy_u8ADC_AutoTriggerEnable,u8 Copy_u8TriggerSource)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <ADC_u8AutoTriggerEnable_Postbuild+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <ADC_u8AutoTriggerEnable_Postbuild+0x8>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	8b 83       	std	Y+3, r24	; 0x03
    19fa:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Status=RT_OK;
    19fc:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_u8ADC_AutoTriggerEnable==ENABLE)
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	b9 f4       	brne	.+46     	; 0x1a32 <ADC_u8AutoTriggerEnable_Postbuild+0x46>
		{

		 SetBit(ADCSRA_REG,ADATE);
    1a04:	a6 e2       	ldi	r26, 0x26	; 38
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e6 e2       	ldi	r30, 0x26	; 38
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	80 62       	ori	r24, 0x20	; 32
    1a10:	8c 93       	st	X, r24
		 u8 Local_u8Temp=ADCSRA_REG;
    1a12:	e6 e2       	ldi	r30, 0x26	; 38
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Temp&=SELECT_AUTO_TRIGER_SOURSE_MASK;
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	8f 71       	andi	r24, 0x1F	; 31
    1a1e:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Temp|=Copy_u8TriggerSource;
    1a20:	99 81       	ldd	r25, Y+1	; 0x01
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	89 2b       	or	r24, r25
    1a26:	89 83       	std	Y+1, r24	; 0x01
		ADCSRA_REG=Local_u8Temp;
    1a28:	e6 e2       	ldi	r30, 0x26	; 38
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	0d c0       	rjmp	.+26     	; 0x1a4c <ADC_u8AutoTriggerEnable_Postbuild+0x60>

		}
	else if (Copy_u8ADC_AutoTriggerEnable==DISABLE)
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 23       	and	r24, r24
    1a36:	41 f4       	brne	.+16     	; 0x1a48 <ADC_u8AutoTriggerEnable_Postbuild+0x5c>
		{
		 ClearBit(ADCSRA_REG,ADATE);
    1a38:	a6 e2       	ldi	r26, 0x26	; 38
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e6 e2       	ldi	r30, 0x26	; 38
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 7d       	andi	r24, 0xDF	; 223
    1a44:	8c 93       	st	X, r24
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <ADC_u8AutoTriggerEnable_Postbuild+0x60>
		}
	else
		{
		 Local_u8Status=RT_NOK;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
		}

	return Local_u8Status;
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <ADC_u8GetDigitalValChannel>:

u8 ADC_u8GetDigitalValChannel(u8 Copy_u8Channel,u16 *Reading_Channel)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	27 97       	sbiw	r28, 0x07	; 7
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	7f 83       	std	Y+7, r23	; 0x07
    1a74:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_u8Status=RT_OK;
    1a76:	1c 82       	std	Y+4, r1	; 0x04

	/*Checking if ADC IDIL and finish Previous Conversion*/
	if(Global_u8State==IDIL)
    1a78:	80 91 1a 02 	lds	r24, 0x021A
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <ADC_u8GetDigitalValChannel+0x26>
    1a80:	74 c0       	rjmp	.+232    	; 0x1b6a <ADC_u8GetDigitalValChannel+0x10e>
	{
		/*Making it Buzy as it begun New Conversion */
		Global_u8State=BUZY;
    1a82:	10 92 1a 02 	sts	0x021A, r1

		/*Starting Counter of Time out Mechanism at Zero*/
		u32 Local_u32Counter=0;
    1a86:	1b 82       	std	Y+3, r1	; 0x03
    1a88:	1a 82       	std	Y+2, r1	; 0x02

		/*Choosing Channel from 8 to start conversion*/
		u8 Local_u8Temp=ADMUX_REG;
    1a8a:	e7 e2       	ldi	r30, 0x27	; 39
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Temp&=SELECT_ENDED_CHANNEL_MASK;
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	80 7e       	andi	r24, 0xE0	; 224
    1a96:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Temp|=Copy_u8Channel;
    1a98:	99 81       	ldd	r25, Y+1	; 0x01
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	89 2b       	or	r24, r25
    1a9e:	89 83       	std	Y+1, r24	; 0x01
		ADMUX_REG=Local_u8Temp;
    1aa0:	e7 e2       	ldi	r30, 0x27	; 39
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	80 83       	st	Z, r24

		/*Start Conversion Enable bit*/
		SetBit(ADCSRA_REG,ADSC);
    1aa8:	a6 e2       	ldi	r26, 0x26	; 38
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 e2       	ldi	r30, 0x26	; 38
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	80 64       	ori	r24, 0x40	; 64
    1ab4:	8c 93       	st	X, r24
		/*Checking if the configuration file.h Set flag of ADC_PIE or Not */
		if(GetBit(ADCSRA_REG,ADIE)==DISABLE)
    1ab6:	e6 e2       	ldi	r30, 0x26	; 38
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	86 95       	lsr	r24
    1abe:	86 95       	lsr	r24
    1ac0:	86 95       	lsr	r24
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <ADC_u8GetDigitalValChannel+0x74>
    1ace:	4f c0       	rjmp	.+158    	; 0x1b6e <ADC_u8GetDigitalValChannel+0x112>
		{
			while((GetBit(ADCSRA_REG,ADIF)!=1)&&(Local_u32Counter<TIME_OUT_WAITING))
    1ad0:	e6 e2       	ldi	r30, 0x26	; 38
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	82 95       	swap	r24
    1ad8:	8f 70       	andi	r24, 0x0F	; 15
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	31 f4       	brne	.+12     	; 0x1af2 <ADC_u8GetDigitalValChannel+0x96>
			{
				Local_u32Counter++;
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	9b 83       	std	Y+3, r25	; 0x03
    1aee:	8a 83       	std	Y+2, r24	; 0x02
    1af0:	ef cf       	rjmp	.-34     	; 0x1ad0 <ADC_u8GetDigitalValChannel+0x74>
		      else
			{
		    	/*Entering here indicate ADC finish its conversion correctly */

		    	/*First thing to clear Flag*/
				SetBit(ADCSRA_REG,ADIF);
    1af2:	a6 e2       	ldi	r26, 0x26	; 38
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e6 e2       	ldi	r30, 0x26	; 38
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	80 61       	ori	r24, 0x10	; 16
    1afe:	8c 93       	st	X, r24

				/*Checking on Pointer Allocation*/
				if(Reading_Channel!=NULL)
    1b00:	8e 81       	ldd	r24, Y+6	; 0x06
    1b02:	9f 81       	ldd	r25, Y+7	; 0x07
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	71 f1       	breq	.+92     	; 0x1b64 <ADC_u8GetDigitalValChannel+0x108>
				{
				/*At Left justification we may return result 8 bit only with error maximum 3 degree difference */
					if(GetBit(ADMUX_REG,ADLAR)==LEFT_JUSTFICATION)
    1b08:	e7 e2       	ldi	r30, 0x27	; 39
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 95       	swap	r24
    1b10:	86 95       	lsr	r24
    1b12:	87 70       	andi	r24, 0x07	; 7
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	81 70       	andi	r24, 0x01	; 1
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	88 23       	and	r24, r24
    1b1e:	51 f0       	breq	.+20     	; 0x1b34 <ADC_u8GetDigitalValChannel+0xd8>
					{
						*Reading_Channel= ADCH_REG;
    1b20:	e5 e2       	ldi	r30, 0x25	; 37
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	ee 81       	ldd	r30, Y+6	; 0x06
    1b2c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <ADC_u8GetDigitalValChannel+0x100>
					}
				/*At Right justification we return result all 10 bit with no error */
					else if (GetBit(ADMUX_REG,ADLAR)==RIGHT_JUSTFICATION)
    1b34:	e7 e2       	ldi	r30, 0x27	; 39
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	82 95       	swap	r24
    1b3c:	86 95       	lsr	r24
    1b3e:	87 70       	andi	r24, 0x07	; 7
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	81 70       	andi	r24, 0x01	; 1
    1b46:	90 70       	andi	r25, 0x00	; 0
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	41 f4       	brne	.+16     	; 0x1b5c <ADC_u8GetDigitalValChannel+0x100>
					{
						*Reading_Channel=ADC_10_BIT_RESULT ;
    1b4c:	e4 e2       	ldi	r30, 0x24	; 36
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	ee 81       	ldd	r30, Y+6	; 0x06
    1b56:	ff 81       	ldd	r31, Y+7	; 0x07
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
					}
				/*Return Function state to Idle state as conversion completed*/
					Global_u8State=IDIL;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 1a 02 	sts	0x021A, r24
    1b62:	05 c0       	rjmp	.+10     	; 0x1b6e <ADC_u8GetDigitalValChannel+0x112>
				}
				else
				{
					Local_u8Status=NULL_POINTER;
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	8c 83       	std	Y+4, r24	; 0x04
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <ADC_u8GetDigitalValChannel+0x112>

		}
	}
	else
	{
		Local_u8Status=BUSY_FUNC;
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	8c 83       	std	Y+4, r24	; 0x04
	}

return Local_u8Status;
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b70:	27 96       	adiw	r28, 0x07	; 7
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <ADC_u8GetDigitalValChannelAsynchronus>:

u8 ADC_u8GetDigitalValChannelAsynchronus(u8 Copy_u8Channel,u16 *Reading_Channel,void(*ADC_Notifications)(void))
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	28 97       	sbiw	r28, 0x08	; 8
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	7d 83       	std	Y+5, r23	; 0x05
    1b9a:	6c 83       	std	Y+4, r22	; 0x04
    1b9c:	5f 83       	std	Y+7, r21	; 0x07
    1b9e:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8Status=RT_OK;
    1ba0:	1a 82       	std	Y+2, r1	; 0x02
	/*Checking if ADC IDIL and finish Previous Conversion*/
	if(Global_u8State==IDIL)
    1ba2:	80 91 1a 02 	lds	r24, 0x021A
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	c9 f5       	brne	.+114    	; 0x1c1c <ADC_u8GetDigitalValChannelAsynchronus+0x9a>
	{
		u8 Local_u8Temp=ADMUX_REG;
    1baa:	e7 e2       	ldi	r30, 0x27	; 39
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	89 83       	std	Y+1, r24	; 0x01

			if(Reading_Channel!=NULL||ADC_Notifications!=NULL)
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <ADC_u8GetDigitalValChannelAsynchronus+0x40>
    1bba:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	41 f1       	breq	.+80     	; 0x1c12 <ADC_u8GetDigitalValChannelAsynchronus+0x90>
			{
				/*Making it Buzy as it begun New Conversion */
				Global_u8State=BUZY;
    1bc2:	10 92 1a 02 	sts	0x021A, r1
				/*Choosing Channel from 8 to start conversion*/
				Local_u8Temp&=SELECT_ENDED_CHANNEL_MASK;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	80 7e       	andi	r24, 0xE0	; 224
    1bca:	89 83       	std	Y+1, r24	; 0x01
				Local_u8Temp|=Copy_u8Channel;
    1bcc:	99 81       	ldd	r25, Y+1	; 0x01
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	89 2b       	or	r24, r25
    1bd2:	89 83       	std	Y+1, r24	; 0x01
				ADMUX_REG=Local_u8Temp;
    1bd4:	e7 e2       	ldi	r30, 0x27	; 39
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	80 83       	st	Z, r24

				ADC_VidCallBack_ISR_Funtion=ADC_Notifications;
    1bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bde:	9f 81       	ldd	r25, Y+7	; 0x07
    1be0:	90 93 3d 02 	sts	0x023D, r25
    1be4:	80 93 3c 02 	sts	0x023C, r24

				/*Make global Pointer has same pointing to Reading channel in main*/
				Global_pu16ADC_Reading=	Reading_Channel;
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	90 93 3f 02 	sts	0x023F, r25
    1bf0:	80 93 3e 02 	sts	0x023E, r24

				/*Open Peripheral interrupt Enable*/
				SetBit(ADCSRA_REG,ADSC);
    1bf4:	a6 e2       	ldi	r26, 0x26	; 38
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e6 e2       	ldi	r30, 0x26	; 38
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	80 64       	ori	r24, 0x40	; 64
    1c00:	8c 93       	st	X, r24
				SetBit(ADCSRA_REG,ADIE);
    1c02:	a6 e2       	ldi	r26, 0x26	; 38
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e6 e2       	ldi	r30, 0x26	; 38
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 60       	ori	r24, 0x08	; 8
    1c0e:	8c 93       	st	X, r24
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <ADC_u8GetDigitalValChannelAsynchronus+0x94>

			}
			else
			{
				Local_u8Status=NULL_POINTER;
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	8a 83       	std	Y+2, r24	; 0x02
		return BUSY_FUNC;
	}



return Local_u8Status;
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	88 87       	std	Y+8, r24	; 0x08
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <ADC_u8GetDigitalValChannelAsynchronus+0x9e>

	}
	else
	{
		/*in case Not Entering ISR (Conversion Completed) ,it remain Busy*/
		return BUSY_FUNC;
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	88 87       	std	Y+8, r24	; 0x08
    1c20:	88 85       	ldd	r24, Y+8	; 0x08
	}



return Local_u8Status;
}
    1c22:	28 96       	adiw	r28, 0x08	; 8
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <SendAddress_Callback>:

u8 SendAddress_Callback(void (*ISR_ADC)(void))
{ u8 Local_u8Status=RT_OK;
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <SendAddress_Callback+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <SendAddress_Callback+0x8>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	19 82       	std	Y+1, r1	; 0x01
	if(ISR_ADC!=0)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	49 f0       	breq	.+18     	; 0x1c60 <SendAddress_Callback+0x2c>
	{
		ADC_VidCallBack_ISR_Funtion=ISR_ADC;
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	90 93 3d 02 	sts	0x023D, r25
    1c56:	80 93 3c 02 	sts	0x023C, r24
	}
	else
	{
		return NULL_POINTER;
	}
	return Local_u8Status;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	8c 83       	std	Y+4, r24	; 0x04
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <SendAddress_Callback+0x30>
	{
		ADC_VidCallBack_ISR_Funtion=ISR_ADC;
	}
	else
	{
		return NULL_POINTER;
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	8c 83       	std	Y+4, r24	; 0x04
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Local_u8Status;

}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    1c74:	1f 92       	push	r1
    1c76:	0f 92       	push	r0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	0f 92       	push	r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	2f 93       	push	r18
    1c80:	3f 93       	push	r19
    1c82:	4f 93       	push	r20
    1c84:	5f 93       	push	r21
    1c86:	6f 93       	push	r22
    1c88:	7f 93       	push	r23
    1c8a:	8f 93       	push	r24
    1c8c:	9f 93       	push	r25
    1c8e:	af 93       	push	r26
    1c90:	bf 93       	push	r27
    1c92:	ef 93       	push	r30
    1c94:	ff 93       	push	r31
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
	if(GetBit(ADMUX_REG,ADLAR)==LEFT_JUSTFICATION)
    1c9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	82 95       	swap	r24
    1ca6:	86 95       	lsr	r24
    1ca8:	87 70       	andi	r24, 0x07	; 7
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	81 70       	andi	r24, 0x01	; 1
    1cb0:	90 70       	andi	r25, 0x00	; 0
    1cb2:	88 23       	and	r24, r24
    1cb4:	69 f0       	breq	.+26     	; 0x1cd0 <__vector_16+0x5c>
	{
		*Global_pu16ADC_Reading= ADCH_REG;
    1cb6:	a0 91 3e 02 	lds	r26, 0x023E
    1cba:	b0 91 3f 02 	lds	r27, 0x023F
    1cbe:	e5 e2       	ldi	r30, 0x25	; 37
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	9c 93       	st	X, r25
    1ccc:	8e 93       	st	-X, r24
    1cce:	16 c0       	rjmp	.+44     	; 0x1cfc <__vector_16+0x88>
	}
	else if (GetBit(ADMUX_REG,ADLAR)==RIGHT_JUSTFICATION)
    1cd0:	e7 e2       	ldi	r30, 0x27	; 39
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	82 95       	swap	r24
    1cd8:	86 95       	lsr	r24
    1cda:	87 70       	andi	r24, 0x07	; 7
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	51 f4       	brne	.+20     	; 0x1cfc <__vector_16+0x88>
	{
		*Global_pu16ADC_Reading=ADC_10_BIT_RESULT ;
    1ce8:	e0 91 3e 02 	lds	r30, 0x023E
    1cec:	f0 91 3f 02 	lds	r31, 0x023F
    1cf0:	a4 e2       	ldi	r26, 0x24	; 36
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	8d 91       	ld	r24, X+
    1cf6:	9c 91       	ld	r25, X
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
	}

	Global_u8State=IDIL;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 93 1a 02 	sts	0x021A, r24
	ADC_VidCallBack_ISR_Funtion();
    1d02:	e0 91 3c 02 	lds	r30, 0x023C
    1d06:	f0 91 3d 02 	lds	r31, 0x023D
    1d0a:	09 95       	icall
	ClearBit(ADCSRA_REG,ADIE);
    1d0c:	a6 e2       	ldi	r26, 0x26	; 38
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e6 e2       	ldi	r30, 0x26	; 38
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	87 7f       	andi	r24, 0xF7	; 247
    1d18:	8c 93       	st	X, r24
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	ff 91       	pop	r31
    1d20:	ef 91       	pop	r30
    1d22:	bf 91       	pop	r27
    1d24:	af 91       	pop	r26
    1d26:	9f 91       	pop	r25
    1d28:	8f 91       	pop	r24
    1d2a:	7f 91       	pop	r23
    1d2c:	6f 91       	pop	r22
    1d2e:	5f 91       	pop	r21
    1d30:	4f 91       	pop	r20
    1d32:	3f 91       	pop	r19
    1d34:	2f 91       	pop	r18
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	0f 90       	pop	r0
    1d3c:	1f 90       	pop	r1
    1d3e:	18 95       	reti

00001d40 <LM35_VoidInit>:
#include"../../MCAL/ADC_Driver/ADC_Interface.h"
#include "LM35_Interface.h"
const f32 ADC_STEP=4.8828125;

void LM35_VoidInit()
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInit_PreBuild();
    1d48:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <ADC_VoidInit_PreBuild>
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <LM35_u16GetTempretureWithUnit>:

u16 LM35_u16GetTempretureWithUnit(u16 Copy_u16DigitalVoltage,Degree_Unit Copy_enumUnit)
{f32 Local_f32Temprature=(Copy_u16DigitalVoltage*ADC_STEP)/10.0;
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	2d 97       	sbiw	r28, 0x0d	; 13
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	98 87       	std	Y+8, r25	; 0x08
    1d68:	8f 83       	std	Y+7, r24	; 0x07
    1d6a:	69 87       	std	Y+9, r22	; 0x09
    1d6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6e:	98 85       	ldd	r25, Y+8	; 0x08
    1d70:	cc 01       	movw	r24, r24
    1d72:	a0 e0       	ldi	r26, 0x00	; 0
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	20 91 38 02 	lds	r18, 0x0238
    1d86:	30 91 39 02 	lds	r19, 0x0239
    1d8a:	40 91 3a 02 	lds	r20, 0x023A
    1d8e:	50 91 3b 02 	lds	r21, 0x023B
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8b 83       	std	Y+3, r24	; 0x03
    1db4:	9c 83       	std	Y+4, r25	; 0x04
    1db6:	ad 83       	std	Y+5, r26	; 0x05
    1db8:	be 83       	std	Y+6, r27	; 0x06
 u16 Local_u8State=RT_OK;
    1dba:	1a 82       	std	Y+2, r1	; 0x02
    1dbc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_enumUnit)
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	3d 87       	std	Y+13, r19	; 0x0d
    1dc6:	2c 87       	std	Y+12, r18	; 0x0c
    1dc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dca:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	91 05       	cpc	r25, r1
    1dd0:	a9 f0       	breq	.+42     	; 0x1dfc <LM35_u16GetTempretureWithUnit+0xaa>
    1dd2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dd4:	3d 85       	ldd	r19, Y+13	; 0x0d
    1dd6:	22 30       	cpi	r18, 0x02	; 2
    1dd8:	31 05       	cpc	r19, r1
    1dda:	29 f1       	breq	.+74     	; 0x1e26 <LM35_u16GetTempretureWithUnit+0xd4>
    1ddc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dde:	9d 85       	ldd	r25, Y+13	; 0x0d
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <LM35_u16GetTempretureWithUnit+0x94>
    1de4:	3f c0       	rjmp	.+126    	; 0x1e64 <LM35_u16GetTempretureWithUnit+0x112>
	{
	case Celsuis_Degree   :{return (u16) (Local_f32Temprature   )   ;break; }
    1de6:	6b 81       	ldd	r22, Y+3	; 0x03
    1de8:	7c 81       	ldd	r23, Y+4	; 0x04
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9b 87       	std	Y+11, r25	; 0x0b
    1df8:	8a 87       	std	Y+10, r24	; 0x0a
    1dfa:	3c c0       	rjmp	.+120    	; 0x1e74 <LM35_u16GetTempretureWithUnit+0x122>
	case Kilven_Degree    :{return (u16)(Local_f32Temprature+273.15);break; }
    1dfc:	6b 81       	ldd	r22, Y+3	; 0x03
    1dfe:	7c 81       	ldd	r23, Y+4	; 0x04
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	23 e3       	ldi	r18, 0x33	; 51
    1e06:	33 e9       	ldi	r19, 0x93	; 147
    1e08:	48 e8       	ldi	r20, 0x88	; 136
    1e0a:	53 e4       	ldi	r21, 0x43	; 67
    1e0c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9b 87       	std	Y+11, r25	; 0x0b
    1e22:	8a 87       	std	Y+10, r24	; 0x0a
    1e24:	27 c0       	rjmp	.+78     	; 0x1e74 <LM35_u16GetTempretureWithUnit+0x122>
	case Fairenheit_Degree:{return (u16)(Local_f32Temprature*1.8+32);break; }
    1e26:	6b 81       	ldd	r22, Y+3	; 0x03
    1e28:	7c 81       	ldd	r23, Y+4	; 0x04
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	26 e6       	ldi	r18, 0x66	; 102
    1e30:	36 e6       	ldi	r19, 0x66	; 102
    1e32:	46 ee       	ldi	r20, 0xE6	; 230
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	52 e4       	ldi	r21, 0x42	; 66
    1e4a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9b 87       	std	Y+11, r25	; 0x0b
    1e60:	8a 87       	std	Y+10, r24	; 0x0a
    1e62:	08 c0       	rjmp	.+16     	; 0x1e74 <LM35_u16GetTempretureWithUnit+0x122>
	default:{Local_u8State=RT_NOK;}
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
 	}
	return Local_u8State;
    1e6c:	29 81       	ldd	r18, Y+1	; 0x01
    1e6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e70:	3b 87       	std	Y+11, r19	; 0x0b
    1e72:	2a 87       	std	Y+10, r18	; 0x0a
    1e74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e76:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    1e78:	2d 96       	adiw	r28, 0x0d	; 13
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <LED_U8ON_OFF>:
#include  "../../MCAL/DIO_Driver/DIO_REG.h"
#include  "../../MCAL/DIO_Driver/DIO_Interface.h"
#include "LED_Interface.h"

u8 LED_U8ON_OFF(enum PORTS Copy_PortNo,enum LEDs Copy_LedNo,u8 Copy_u8ON_OR_OFF)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	28 97       	sbiw	r28, 0x08	; 8
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
    1ea0:	6b 83       	std	Y+3, r22	; 0x03
    1ea2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Status=RT_OK;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_LedNo<0)||(Copy_LedNo>7)||Copy_PortNo<0||Copy_PortNo>3)
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	88 30       	cpi	r24, 0x08	; 8
    1eaa:	18 f4       	brcc	.+6      	; 0x1eb2 <LED_U8ON_OFF+0x28>
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	18 f0       	brcs	.+6      	; 0x1eb8 <LED_U8ON_OFF+0x2e>
	{
		Local_Status=RT_NOK;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	35 c1       	rjmp	.+618    	; 0x2122 <LED_U8ON_OFF+0x298>
	}
	else
	{
		if( Copy_u8ON_OR_OFF==LED_ON)
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <LED_U8ON_OFF+0x36>
    1ebe:	ba c0       	rjmp	.+372    	; 0x2034 <LED_U8ON_OFF+0x1aa>
			{
			switch(Copy_PortNo)
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	38 87       	std	Y+8, r19	; 0x08
    1ec8:	2f 83       	std	Y+7, r18	; 0x07
    1eca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ecc:	98 85       	ldd	r25, Y+8	; 0x08
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <LED_U8ON_OFF+0x4c>
    1ed4:	3d c0       	rjmp	.+122    	; 0x1f50 <LED_U8ON_OFF+0xc6>
    1ed6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed8:	38 85       	ldd	r19, Y+8	; 0x08
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LED_U8ON_OFF+0x60>
    1ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee2:	98 85       	ldd	r25, Y+8	; 0x08
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	71 f0       	breq	.+28     	; 0x1f04 <LED_U8ON_OFF+0x7a>
    1ee8:	1c c1       	rjmp	.+568    	; 0x2122 <LED_U8ON_OFF+0x298>
    1eea:	2f 81       	ldd	r18, Y+7	; 0x07
    1eec:	38 85       	ldd	r19, Y+8	; 0x08
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <LED_U8ON_OFF+0x6c>
    1ef4:	53 c0       	rjmp	.+166    	; 0x1f9c <LED_U8ON_OFF+0x112>
    1ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef8:	98 85       	ldd	r25, Y+8	; 0x08
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	91 05       	cpc	r25, r1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <LED_U8ON_OFF+0x78>
    1f00:	73 c0       	rjmp	.+230    	; 0x1fe8 <LED_U8ON_OFF+0x15e>
    1f02:	0f c1       	rjmp	.+542    	; 0x2122 <LED_U8ON_OFF+0x298>
					{
					case 0:{ SetBit(DDRA_REG,Copy_LedNo);SetBit(PORTA_REG,Copy_LedNo);break;}
    1f04:	aa e3       	ldi	r26, 0x3A	; 58
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	ea e3       	ldi	r30, 0x3A	; 58
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	48 2f       	mov	r20, r24
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <LED_U8ON_OFF+0x96>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	2a 95       	dec	r18
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <LED_U8ON_OFF+0x92>
    1f24:	84 2b       	or	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	ab e3       	ldi	r26, 0x3B	; 59
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	eb e3       	ldi	r30, 0x3B	; 59
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 2e       	mov	r0, r18
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <LED_U8ON_OFF+0xbc>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	0a 94       	dec	r0
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <LED_U8ON_OFF+0xb8>
    1f4a:	84 2b       	or	r24, r20
    1f4c:	8c 93       	st	X, r24
    1f4e:	e9 c0       	rjmp	.+466    	; 0x2122 <LED_U8ON_OFF+0x298>
					case 1:{ SetBit(DDRB_REG,Copy_LedNo);SetBit(PORTB_REG,Copy_LedNo);break;}
    1f50:	a7 e3       	ldi	r26, 0x37	; 55
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e7 e3       	ldi	r30, 0x37	; 55
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	48 2f       	mov	r20, r24
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <LED_U8ON_OFF+0xe2>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	2a 95       	dec	r18
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <LED_U8ON_OFF+0xde>
    1f70:	84 2b       	or	r24, r20
    1f72:	8c 93       	st	X, r24
    1f74:	a8 e3       	ldi	r26, 0x38	; 56
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e8 e3       	ldi	r30, 0x38	; 56
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <LED_U8ON_OFF+0x108>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <LED_U8ON_OFF+0x104>
    1f96:	84 2b       	or	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	c3 c0       	rjmp	.+390    	; 0x2122 <LED_U8ON_OFF+0x298>
					case 2:{ SetBit(DDRC_REG,Copy_LedNo);SetBit(PORTC_REG,Copy_LedNo);break;}
    1f9c:	a4 e3       	ldi	r26, 0x34	; 52
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e4 e3       	ldi	r30, 0x34	; 52
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <LED_U8ON_OFF+0x12e>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	2a 95       	dec	r18
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <LED_U8ON_OFF+0x12a>
    1fbc:	84 2b       	or	r24, r20
    1fbe:	8c 93       	st	X, r24
    1fc0:	a5 e3       	ldi	r26, 0x35	; 53
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e5 e3       	ldi	r30, 0x35	; 53
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	48 2f       	mov	r20, r24
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 2e       	mov	r0, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <LED_U8ON_OFF+0x154>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <LED_U8ON_OFF+0x150>
    1fe2:	84 2b       	or	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	9d c0       	rjmp	.+314    	; 0x2122 <LED_U8ON_OFF+0x298>
					case 3:{ SetBit(DDRD_REG,Copy_LedNo); SetBit(PORTD_REG,Copy_LedNo);break;}
    1fe8:	a1 e3       	ldi	r26, 0x31	; 49
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e1 e3       	ldi	r30, 0x31	; 49
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <LED_U8ON_OFF+0x17a>
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	2a 95       	dec	r18
    2006:	e2 f7       	brpl	.-8      	; 0x2000 <LED_U8ON_OFF+0x176>
    2008:	84 2b       	or	r24, r20
    200a:	8c 93       	st	X, r24
    200c:	a2 e3       	ldi	r26, 0x32	; 50
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e2 e3       	ldi	r30, 0x32	; 50
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	48 2f       	mov	r20, r24
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 2e       	mov	r0, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <LED_U8ON_OFF+0x1a0>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <LED_U8ON_OFF+0x19c>
    202e:	84 2b       	or	r24, r20
    2030:	8c 93       	st	X, r24
    2032:	77 c0       	rjmp	.+238    	; 0x2122 <LED_U8ON_OFF+0x298>

			         }

	        }
		else if( Copy_u8ON_OR_OFF==LED_OFF)
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	88 23       	and	r24, r24
    2038:	09 f0       	breq	.+2      	; 0x203c <LED_U8ON_OFF+0x1b2>
    203a:	73 c0       	rjmp	.+230    	; 0x2122 <LED_U8ON_OFF+0x298>
					{
					switch(Copy_PortNo)
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3e 83       	std	Y+6, r19	; 0x06
    2044:	2d 83       	std	Y+5, r18	; 0x05
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	59 f1       	breq	.+86     	; 0x20a6 <LED_U8ON_OFF+0x21c>
    2050:	2d 81       	ldd	r18, Y+5	; 0x05
    2052:	3e 81       	ldd	r19, Y+6	; 0x06
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	2c f4       	brge	.+10     	; 0x2064 <LED_U8ON_OFF+0x1da>
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f0       	breq	.+26     	; 0x207c <LED_U8ON_OFF+0x1f2>
    2062:	5f c0       	rjmp	.+190    	; 0x2122 <LED_U8ON_OFF+0x298>
    2064:	2d 81       	ldd	r18, Y+5	; 0x05
    2066:	3e 81       	ldd	r19, Y+6	; 0x06
    2068:	22 30       	cpi	r18, 0x02	; 2
    206a:	31 05       	cpc	r19, r1
    206c:	89 f1       	breq	.+98     	; 0x20d0 <LED_U8ON_OFF+0x246>
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	83 30       	cpi	r24, 0x03	; 3
    2074:	91 05       	cpc	r25, r1
    2076:	09 f4       	brne	.+2      	; 0x207a <LED_U8ON_OFF+0x1f0>
    2078:	40 c0       	rjmp	.+128    	; 0x20fa <LED_U8ON_OFF+0x270>
    207a:	53 c0       	rjmp	.+166    	; 0x2122 <LED_U8ON_OFF+0x298>
							{
							case 0:{ ClearBit(PORTA_REG,Copy_LedNo);break;}
    207c:	ab e3       	ldi	r26, 0x3B	; 59
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	eb e3       	ldi	r30, 0x3B	; 59
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	48 2f       	mov	r20, r24
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	02 2e       	mov	r0, r18
    2094:	02 c0       	rjmp	.+4      	; 0x209a <LED_U8ON_OFF+0x210>
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	0a 94       	dec	r0
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <LED_U8ON_OFF+0x20c>
    209e:	80 95       	com	r24
    20a0:	84 23       	and	r24, r20
    20a2:	8c 93       	st	X, r24
    20a4:	3e c0       	rjmp	.+124    	; 0x2122 <LED_U8ON_OFF+0x298>
							case 1:{ ClearBit(PORTB_REG,Copy_LedNo);break;}
    20a6:	a8 e3       	ldi	r26, 0x38	; 56
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e8 e3       	ldi	r30, 0x38	; 56
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	48 2f       	mov	r20, r24
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 2e       	mov	r0, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <LED_U8ON_OFF+0x23a>
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	0a 94       	dec	r0
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <LED_U8ON_OFF+0x236>
    20c8:	80 95       	com	r24
    20ca:	84 23       	and	r24, r20
    20cc:	8c 93       	st	X, r24
    20ce:	29 c0       	rjmp	.+82     	; 0x2122 <LED_U8ON_OFF+0x298>
							case 2:{ ClearBit(PORTC_REG,Copy_LedNo);break;}
    20d0:	a5 e3       	ldi	r26, 0x35	; 53
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e5 e3       	ldi	r30, 0x35	; 53
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	48 2f       	mov	r20, r24
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	02 2e       	mov	r0, r18
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <LED_U8ON_OFF+0x264>
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	0a 94       	dec	r0
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <LED_U8ON_OFF+0x260>
    20f2:	80 95       	com	r24
    20f4:	84 23       	and	r24, r20
    20f6:	8c 93       	st	X, r24
    20f8:	14 c0       	rjmp	.+40     	; 0x2122 <LED_U8ON_OFF+0x298>
							case 3:{ ClearBit(PORTD_REG,Copy_LedNo);break;}
    20fa:	a2 e3       	ldi	r26, 0x32	; 50
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e2 e3       	ldi	r30, 0x32	; 50
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	48 2f       	mov	r20, r24
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 2e       	mov	r0, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <LED_U8ON_OFF+0x28e>
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <LED_U8ON_OFF+0x28a>
    211c:	80 95       	com	r24
    211e:	84 23       	and	r24, r20
    2120:	8c 93       	st	X, r24
			        }



	}
	return Local_Status;
    2122:	89 81       	ldd	r24, Y+1	; 0x01

}
    2124:	28 96       	adiw	r28, 0x08	; 8
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <LCD_VoidSendCommand>:
u8 Global_u8YPos=0;
u8 Global_u8EnterGoToFunc=0;
/*if we select send command*/
# if(LCD_MODE==BIT_8)
void LCD_VoidSendCommand(u8 Copy_u8Command)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	2f 97       	sbiw	r28, 0x0f	; 15
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	8f 87       	std	Y+15, r24	; 0x0f
	/*for function set: RS:command,R/W:write */
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_RS_PIN,LOW);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	65 e0       	ldi	r22, 0x05	; 5
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_R_W_PIN,LOW);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	66 e0       	ldi	r22, 0x06	; 6
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
		DIO_U8SetPortVal(LCD_DATA_PORT,Copy_u8Command);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	6f 85       	ldd	r22, Y+15	; 0x0f
    2164:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_U8SetPortVal>


	/*making enable pulse high for 2mile sec only*/
	DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,HIGH);
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	67 e0       	ldi	r22, 0x07	; 7
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e0       	ldi	r26, 0x00	; 0
    2178:	b0 e4       	ldi	r27, 0x40	; 64
    217a:	8b 87       	std	Y+11, r24	; 0x0b
    217c:	9c 87       	std	Y+12, r25	; 0x0c
    217e:	ad 87       	std	Y+13, r26	; 0x0d
    2180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2182:	6b 85       	ldd	r22, Y+11	; 0x0b
    2184:	7c 85       	ldd	r23, Y+12	; 0x0c
    2186:	8d 85       	ldd	r24, Y+13	; 0x0d
    2188:	9e 85       	ldd	r25, Y+14	; 0x0e
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8f 83       	std	Y+7, r24	; 0x07
    219c:	98 87       	std	Y+8, r25	; 0x08
    219e:	a9 87       	std	Y+9, r26	; 0x09
    21a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	57 e4       	ldi	r21, 0x47	; 71
    21d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d8:	18 16       	cp	r1, r24
    21da:	4c f5       	brge	.+82     	; 0x222e <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21de:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <LCD_VoidSendCommand+0xee>
    2206:	88 ec       	ldi	r24, 0xC8	; 200
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_VoidSendCommand+0xdc>
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <LCD_VoidSendCommand+0xd0>
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	9a 81       	ldd	r25, Y+2	; 0x02
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_VoidSendCommand+0x118>
    2252:	9a 83       	std	Y+2, r25	; 0x02
    2254:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,LOW);
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	67 e0       	ldi	r22, 0x07	; 7
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>

}
    2260:	2f 96       	adiw	r28, 0x0f	; 15
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <LCD_VoidSendData>:

/* if we select send data*/
void LCD_VoidSendData(u8 Copy_u8Data)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	2f 97       	sbiw	r28, 0x0f	; 15
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	8f 87       	std	Y+15, r24	; 0x0f
		    /*for function set:
	        * RS:command
	        * R/W:write
	       */
	        DIO_U8SetPinVal(LCD_Config_PORT,LCD_RS_PIN,HIGH);
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	65 e0       	ldi	r22, 0x05	; 5
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
			DIO_U8SetPinVal(LCD_Config_PORT,LCD_R_W_PIN,LOW);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	66 e0       	ldi	r22, 0x06	; 6
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
			DIO_U8SetPortVal(LCD_DATA_PORT,Copy_u8Data);
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	6f 85       	ldd	r22, Y+15	; 0x0f
    22a0:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_U8SetPortVal>


		/*making enable pulse high for 2mile sec only*/
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,HIGH);
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	67 e0       	ldi	r22, 0x07	; 7
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e4       	ldi	r27, 0x40	; 64
    22b6:	8b 87       	std	Y+11, r24	; 0x0b
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	ad 87       	std	Y+13, r26	; 0x0d
    22bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	98 87       	std	Y+8, r25	; 0x08
    22da:	a9 87       	std	Y+9, r26	; 0x09
    22dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCD_VoidSendData+0x8e>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_VoidSendData+0xee>
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_VoidSendData+0xdc>
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_VoidSendData+0xd0>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_VoidSendData+0x118>
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_U8SetPinVal(LCD_Config_PORT,LCD_EN_PIN,LOW);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	67 e0       	ldi	r22, 0x07	; 7
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>



}
    239c:	2f 96       	adiw	r28, 0x0f	; 15
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <LCD_VoidInit>:



/*to initialize the LCD*/
void LCD_VoidInit(void)
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	a6 97       	sbiw	r28, 0x26	; 38
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e2       	ldi	r26, 0x20	; 32
    23c8:	b2 e4       	ldi	r27, 0x42	; 66
    23ca:	8b a3       	std	Y+35, r24	; 0x23
    23cc:	9c a3       	std	Y+36, r25	; 0x24
    23ce:	ad a3       	std	Y+37, r26	; 0x25
    23d0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	6b a1       	ldd	r22, Y+35	; 0x23
    23d4:	7c a1       	ldd	r23, Y+36	; 0x24
    23d6:	8d a1       	ldd	r24, Y+37	; 0x25
    23d8:	9e a1       	ldd	r25, Y+38	; 0x26
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a ef       	ldi	r20, 0xFA	; 250
    23e0:	54 e4       	ldi	r21, 0x44	; 68
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8f 8f       	std	Y+31, r24	; 0x1f
    23ec:	98 a3       	std	Y+32, r25	; 0x20
    23ee:	a9 a3       	std	Y+33, r26	; 0x21
    23f0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    23f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23f4:	78 a1       	ldd	r23, Y+32	; 0x20
    23f6:	89 a1       	ldd	r24, Y+33	; 0x21
    23f8:	9a a1       	ldd	r25, Y+34	; 0x22
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <LCD_VoidInit+0x66>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9e 8f       	std	Y+30, r25	; 0x1e
    2410:	8d 8f       	std	Y+29, r24	; 0x1d
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <LCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    2414:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2416:	78 a1       	ldd	r23, Y+32	; 0x20
    2418:	89 a1       	ldd	r24, Y+33	; 0x21
    241a:	9a a1       	ldd	r25, Y+34	; 0x22
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <LCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	6b a1       	ldd	r22, Y+35	; 0x23
    242e:	7c a1       	ldd	r23, Y+36	; 0x24
    2430:	8d a1       	ldd	r24, Y+37	; 0x25
    2432:	9e a1       	ldd	r25, Y+38	; 0x26
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9e 8f       	std	Y+30, r25	; 0x1e
    2452:	8d 8f       	std	Y+29, r24	; 0x1d
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <LCD_VoidInit+0xc6>
    2456:	88 ec       	ldi	r24, 0xC8	; 200
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9c 8f       	std	Y+28, r25	; 0x1c
    245c:	8b 8f       	std	Y+27, r24	; 0x1b
    245e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_VoidInit+0xb4>
    2466:	9c 8f       	std	Y+28, r25	; 0x1c
    2468:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9e 8f       	std	Y+30, r25	; 0x1e
    2472:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2476:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <LCD_VoidInit+0xa8>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <LCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2480:	78 a1       	ldd	r23, Y+32	; 0x20
    2482:	89 a1       	ldd	r24, Y+33	; 0x21
    2484:	9a a1       	ldd	r25, Y+34	; 0x22
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9e 8f       	std	Y+30, r25	; 0x1e
    2490:	8d 8f       	std	Y+29, r24	; 0x1d
    2492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2494:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2496:	9a 8f       	std	Y+26, r25	; 0x1a
    2498:	89 8f       	std	Y+25, r24	; 0x19
    249a:	89 8d       	ldd	r24, Y+25	; 0x19
    249c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_VoidInit+0xf0>
    24a2:	9a 8f       	std	Y+26, r25	; 0x1a
    24a4:	89 8f       	std	Y+25, r24	; 0x19
		LCD_VoidSendCommand(0b00110000);

	}
#elif NUM_LINES ==LINE2
	{
		LCD_VoidSendCommand(0b00111000);
    24a6:	88 e3       	ldi	r24, 0x38	; 56
    24a8:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a8 e4       	ldi	r26, 0x48	; 72
    24b2:	b2 e4       	ldi	r27, 0x42	; 66
    24b4:	8d 8b       	std	Y+21, r24	; 0x15
    24b6:	9e 8b       	std	Y+22, r25	; 0x16
    24b8:	af 8b       	std	Y+23, r26	; 0x17
    24ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24bc:	6d 89       	ldd	r22, Y+21	; 0x15
    24be:	7e 89       	ldd	r23, Y+22	; 0x16
    24c0:	8f 89       	ldd	r24, Y+23	; 0x17
    24c2:	98 8d       	ldd	r25, Y+24	; 0x18
    24c4:	2b ea       	ldi	r18, 0xAB	; 171
    24c6:	3a ea       	ldi	r19, 0xAA	; 170
    24c8:	4a e2       	ldi	r20, 0x2A	; 42
    24ca:	50 e4       	ldi	r21, 0x40	; 64
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	89 8b       	std	Y+17, r24	; 0x11
    24d6:	9a 8b       	std	Y+18, r25	; 0x12
    24d8:	ab 8b       	std	Y+19, r26	; 0x13
    24da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24dc:	69 89       	ldd	r22, Y+17	; 0x11
    24de:	7a 89       	ldd	r23, Y+18	; 0x12
    24e0:	8b 89       	ldd	r24, Y+19	; 0x13
    24e2:	9c 89       	ldd	r25, Y+20	; 0x14
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	1c f4       	brge	.+6      	; 0x24fa <LCD_VoidInit+0x14c>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	88 8b       	std	Y+16, r24	; 0x10
    24f8:	91 c0       	rjmp	.+290    	; 0x261c <LCD_VoidInit+0x26e>
	else if (__tmp > 255)
    24fa:	69 89       	ldd	r22, Y+17	; 0x11
    24fc:	7a 89       	ldd	r23, Y+18	; 0x12
    24fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2500:	9c 89       	ldd	r25, Y+20	; 0x14
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	53 e4       	ldi	r21, 0x43	; 67
    250a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	0c f0       	brlt	.+2      	; 0x2514 <LCD_VoidInit+0x166>
    2512:	7b c0       	rjmp	.+246    	; 0x260a <LCD_VoidInit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8c 87       	std	Y+12, r24	; 0x0c
    252e:	9d 87       	std	Y+13, r25	; 0x0d
    2530:	ae 87       	std	Y+14, r26	; 0x0e
    2532:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6c 85       	ldd	r22, Y+12	; 0x0c
    2536:	7d 85       	ldd	r23, Y+13	; 0x0d
    2538:	8e 85       	ldd	r24, Y+14	; 0x0e
    253a:	9f 85       	ldd	r25, Y+15	; 0x0f
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	88 87       	std	Y+8, r24	; 0x08
    254e:	99 87       	std	Y+9, r25	; 0x09
    2550:	aa 87       	std	Y+10, r26	; 0x0a
    2552:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2554:	68 85       	ldd	r22, Y+8	; 0x08
    2556:	79 85       	ldd	r23, Y+9	; 0x09
    2558:	8a 85       	ldd	r24, Y+10	; 0x0a
    255a:	9b 85       	ldd	r25, Y+11	; 0x0b
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <LCD_VoidInit+0x1c8>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9f 83       	std	Y+7, r25	; 0x07
    2572:	8e 83       	std	Y+6, r24	; 0x06
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <LCD_VoidInit+0x246>
	else if (__tmp > 65535)
    2576:	68 85       	ldd	r22, Y+8	; 0x08
    2578:	79 85       	ldd	r23, Y+9	; 0x09
    257a:	8a 85       	ldd	r24, Y+10	; 0x0a
    257c:	9b 85       	ldd	r25, Y+11	; 0x0b
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <LCD_VoidInit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2590:	7d 85       	ldd	r23, Y+13	; 0x0d
    2592:	8e 85       	ldd	r24, Y+14	; 0x0e
    2594:	9f 85       	ldd	r25, Y+15	; 0x0f
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9f 83       	std	Y+7, r25	; 0x07
    25b4:	8e 83       	std	Y+6, r24	; 0x06
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <LCD_VoidInit+0x228>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9d 83       	std	Y+5, r25	; 0x05
    25be:	8c 83       	std	Y+4, r24	; 0x04
    25c0:	8c 81       	ldd	r24, Y+4	; 0x04
    25c2:	9d 81       	ldd	r25, Y+5	; 0x05
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_VoidInit+0x216>
    25c8:	9d 83       	std	Y+5, r25	; 0x05
    25ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8e 81       	ldd	r24, Y+6	; 0x06
    25ce:	9f 81       	ldd	r25, Y+7	; 0x07
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9f 83       	std	Y+7, r25	; 0x07
    25d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8e 81       	ldd	r24, Y+6	; 0x06
    25d8:	9f 81       	ldd	r25, Y+7	; 0x07
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <LCD_VoidInit+0x20a>
    25de:	24 c0       	rjmp	.+72     	; 0x2628 <LCD_VoidInit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	68 85       	ldd	r22, Y+8	; 0x08
    25e2:	79 85       	ldd	r23, Y+9	; 0x09
    25e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9f 83       	std	Y+7, r25	; 0x07
    25f2:	8e 83       	std	Y+6, r24	; 0x06
    25f4:	8e 81       	ldd	r24, Y+6	; 0x06
    25f6:	9f 81       	ldd	r25, Y+7	; 0x07
    25f8:	9b 83       	std	Y+3, r25	; 0x03
    25fa:	8a 83       	std	Y+2, r24	; 0x02
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_VoidInit+0x252>
    2604:	9b 83       	std	Y+3, r25	; 0x03
    2606:	8a 83       	std	Y+2, r24	; 0x02
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <LCD_VoidInit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    260a:	69 89       	ldd	r22, Y+17	; 0x11
    260c:	7a 89       	ldd	r23, Y+18	; 0x12
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	88 8b       	std	Y+16, r24	; 0x10
    261c:	88 89       	ldd	r24, Y+16	; 0x10
    261e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8a 95       	dec	r24
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_VoidInit+0x274>
    2626:	89 83       	std	Y+1, r24	; 0x01
	}
#endif

	_delay_us(50);
/*set ON/OFF Control |  Display :ON, Cursur:OFF ,Blink:OFF*/
	LCD_VoidSendCommand(0b00001100);
    2628:	8c e0       	ldi	r24, 0x0C	; 12
    262a:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>

	/* Display Clear */
	LCD_VoidSendCommand(0x01);
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    2634:	a6 96       	adiw	r28, 0x26	; 38
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <LCD_VoidGoToPos>:



/*To go to defined position in the LCD */
void LCD_VoidGoToPos(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <LCD_VoidGoToPos+0x6>
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8a 83       	std	Y+2, r24	; 0x02
    2654:	6b 83       	std	Y+3, r22	; 0x03
	Global_u8EnterGoToFunc=1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	80 93 43 02 	sts	0x0243, r24
	Global_u8XPos=Copy_u8XPos;
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	80 93 41 02 	sts	0x0241, r24
	Global_u8YPos=Copy_u8YPos;
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	80 93 42 02 	sts	0x0242, r24
u8 Local_PositionAddress;
/*if the position in line1 the address is from  0 to 0x40 which is Y position */
	if(Copy_u8XPos==0)
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	88 23       	and	r24, r24
    266c:	19 f4       	brne	.+6      	; 0x2674 <LCD_VoidGoToPos+0x2e>
	{
		Local_PositionAddress=Copy_u8YPos;
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	06 c0       	rjmp	.+12     	; 0x2680 <LCD_VoidGoToPos+0x3a>

	}
	/*if the position in line2 the address is from  0x41 to 0x67 which is yposition+0x40 */
	else if(Copy_u8XPos==1)
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	19 f4       	brne	.+6      	; 0x2680 <LCD_VoidGoToPos+0x3a>
		{
			Local_PositionAddress=Copy_u8YPos+0x40;
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	80 5c       	subi	r24, 0xC0	; 192
    267e:	89 83       	std	Y+1, r24	; 0x01

		}
	/*we set the register DDRAM with its command which in d.s the 8th bit is 1 and the rest of bits is address*/

	LCD_VoidSendCommand(1<<7 | Local_PositionAddress);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	80 68       	ori	r24, 0x80	; 128
    2684:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <LCD_VoidClearDisplay>:


/*To clear the LCD*/
void LCD_VoidClearDisplay(void)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
	 Global_u8Clear=1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	80 93 40 02 	sts	0x0240, r24
	LCD_VoidSendCommand(1);
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <LCD_VoidCursorON>:
void LCD_VoidCursorON(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(SOLID_CURSOR);
    26b6:	8e e0       	ldi	r24, 0x0E	; 14
    26b8:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <LCD_VoidCursorOFF>:
void LCD_VoidCursorOFF()
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(CURSOR_OFF);
    26ca:	8c e0       	ldi	r24, 0x0C	; 12
    26cc:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <LCD_VoidBlinkingCursorON>:
void LCD_VoidBlinkingCursorON(void)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(BLINK_CURSOR);
    26de:	8f e0       	ldi	r24, 0x0F	; 15
    26e0:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <LCD_VoidDisplayON>:

void LCD_VoidDisplayON(void)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(DISPLAY_ON);
    26f2:	8c e0       	ldi	r24, 0x0C	; 12
    26f4:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <LCD_VoidDisplayOFF>:
void LCD_VoidDisplayOFF(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(DISPLAY_OFF);
    2706:	88 e0       	ldi	r24, 0x08	; 8
    2708:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>
}
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <LCD_VoidShiftLeft>:


/*to shift the words left from defined position*/
void LCD_VoidShiftLeft(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	00 d0       	rcall	.+0      	; 0x2718 <LCD_VoidShiftLeft+0x6>
    2718:	00 d0       	rcall	.+0      	; 0x271a <LCD_VoidShiftLeft+0x8>
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	8a 83       	std	Y+2, r24	; 0x02
    2720:	6b 83       	std	Y+3, r22	; 0x03
    2722:	4c 83       	std	Y+4, r20	; 0x04
	s8 Local_ShiftIterator=0;
    2724:	19 82       	std	Y+1, r1	; 0x01
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator>Copy_u8YPos-Copy_u8ShiftNumber ;Local_ShiftIterator--)
    2726:	8c 81       	ldd	r24, Y+4	; 0x04
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	0b c0       	rjmp	.+22     	; 0x2742 <LCD_VoidShiftLeft+0x30>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
    272c:	99 81       	ldd	r25, Y+1	; 0x01
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	69 2f       	mov	r22, r25
    2732:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>
		LCD_VoidSendData(' ');
    2736:	80 e2       	ldi	r24, 0x20	; 32
    2738:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_VoidSendData>

/*to shift the words left from defined position*/
void LCD_VoidShiftLeft(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
	s8 Local_ShiftIterator=0;
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator>Copy_u8YPos-Copy_u8ShiftNumber ;Local_ShiftIterator--)
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	81 50       	subi	r24, 0x01	; 1
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	48 2f       	mov	r20, r24
    2746:	55 27       	eor	r21, r21
    2748:	47 fd       	sbrc	r20, 7
    274a:	50 95       	com	r21
    274c:	8c 81       	ldd	r24, Y+4	; 0x04
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	b9 01       	movw	r22, r18
    275a:	68 1b       	sub	r22, r24
    275c:	79 0b       	sbc	r23, r25
    275e:	cb 01       	movw	r24, r22
    2760:	84 17       	cp	r24, r20
    2762:	95 07       	cpc	r25, r21
    2764:	1c f3       	brlt	.-58     	; 0x272c <LCD_VoidShiftLeft+0x1a>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
		LCD_VoidSendData(' ');
	}
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <LCD_VoidShiftRight>:
/*to shift the words Right from defined position*/
void LCD_VoidShiftRight(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <LCD_VoidShiftRight+0x6>
    277a:	00 d0       	rcall	.+0      	; 0x277c <LCD_VoidShiftRight+0x8>
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	8a 83       	std	Y+2, r24	; 0x02
    2782:	6b 83       	std	Y+3, r22	; 0x03
    2784:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_ShiftIterator=0;
    2786:	19 82       	std	Y+1, r1	; 0x01
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator<Copy_u8YPos+Copy_u8ShiftNumber ;Local_ShiftIterator++)
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	0a c0       	rjmp	.+20     	; 0x27a2 <LCD_VoidShiftRight+0x2e>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	69 81       	ldd	r22, Y+1	; 0x01
    2792:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>
		LCD_VoidSendData(' ');
    2796:	80 e2       	ldi	r24, 0x20	; 32
    2798:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_VoidSendData>
}
/*to shift the words Right from defined position*/
void LCD_VoidShiftRight(u8 Copy_u8ShiftNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
	u8 Local_ShiftIterator=0;
	for(Local_ShiftIterator=Copy_u8YPos ; Local_ShiftIterator<Copy_u8YPos+Copy_u8ShiftNumber ;Local_ShiftIterator++)
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	8f 5f       	subi	r24, 0xFF	; 255
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	48 2f       	mov	r20, r24
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	48 17       	cp	r20, r24
    27ba:	59 07       	cpc	r21, r25
    27bc:	44 f3       	brlt	.-48     	; 0x278e <LCD_VoidShiftRight+0x1a>
	{
		LCD_VoidGoToPos(Copy_u8XPos,Local_ShiftIterator);
		LCD_VoidSendData(' ');
	}
}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <LCD_VoidSendNumber>:
/*to convert ascii char to integer*/

void LCD_VoidSendNumber(u32 Copy_u32Char)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	68 97       	sbiw	r28, 0x18	; 24
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	98 8f       	std	Y+24, r25	; 0x18
    27e2:	8f 8b       	std	Y+23, r24	; 0x17
u8 Local_Char_Converted[16];
u32  Local_Temp=Copy_u32Char;
    27e4:	8f 89       	ldd	r24, Y+23	; 0x17
    27e6:	98 8d       	ldd	r25, Y+24	; 0x18
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
u8 Counter=0;
    27ec:	1c 82       	std	Y+4, r1	; 0x04
    27ee:	0d c0       	rjmp	.+26     	; 0x280a <LCD_VoidSendNumber+0x3e>
while(Local_Temp>=1)
{
    Counter++;
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	8c 83       	std	Y+4, r24	; 0x04
    Local_Temp/=10;
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	2a e0       	ldi	r18, 0x0A	; 10
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	b9 01       	movw	r22, r18
    2800:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__udivmodhi4>
    2804:	cb 01       	movw	r24, r22
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
void LCD_VoidSendNumber(u32 Copy_u32Char)
{
u8 Local_Char_Converted[16];
u32  Local_Temp=Copy_u32Char;
u8 Counter=0;
while(Local_Temp>=1)
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	79 f7       	brne	.-34     	; 0x27f0 <LCD_VoidSendNumber+0x24>
{
    Counter++;
    Local_Temp/=10;
}
Local_Temp=Copy_u32Char;
    2812:	8f 89       	ldd	r24, Y+23	; 0x17
    2814:	98 8d       	ldd	r25, Y+24	; 0x18
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05

	for(u8 i=0;i<Counter;i++)
    281a:	1b 82       	std	Y+3, r1	; 0x03
    281c:	1e c0       	rjmp	.+60     	; 0x285a <LCD_VoidSendNumber+0x8e>
		{

			Local_Char_Converted[i]=Local_Temp%10+'0';
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	e8 2f       	mov	r30, r24
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	2a e0       	ldi	r18, 0x0A	; 10
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	b9 01       	movw	r22, r18
    282e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__udivmodhi4>
    2832:	28 2f       	mov	r18, r24
    2834:	20 5d       	subi	r18, 0xD0	; 208
    2836:	ce 01       	movw	r24, r28
    2838:	07 96       	adiw	r24, 0x07	; 7
    283a:	e8 0f       	add	r30, r24
    283c:	f9 1f       	adc	r31, r25
    283e:	20 83       	st	Z, r18

			Local_Temp/=10;
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	2a e0       	ldi	r18, 0x0A	; 10
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	b9 01       	movw	r22, r18
    284a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__udivmodhi4>
    284e:	cb 01       	movw	r24, r22
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    Counter++;
    Local_Temp/=10;
}
Local_Temp=Copy_u32Char;

	for(u8 i=0;i<Counter;i++)
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	8b 83       	std	Y+3, r24	; 0x03
    285a:	9b 81       	ldd	r25, Y+3	; 0x03
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	98 17       	cp	r25, r24
    2860:	f0 f2       	brcs	.-68     	; 0x281e <LCD_VoidSendNumber+0x52>
			Local_Char_Converted[i]=Local_Temp%10+'0';

			Local_Temp/=10;
		}

	for (int i = Counter-1; i >=0 ; i--)
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	88 2f       	mov	r24, r24
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	0f c0       	rjmp	.+30     	; 0x288e <LCD_VoidSendNumber+0xc2>
		{
			LCD_VoidSendData(Local_Char_Converted[i]);
    2870:	29 81       	ldd	r18, Y+1	; 0x01
    2872:	3a 81       	ldd	r19, Y+2	; 0x02
    2874:	ce 01       	movw	r24, r28
    2876:	07 96       	adiw	r24, 0x07	; 7
    2878:	fc 01       	movw	r30, r24
    287a:	e2 0f       	add	r30, r18
    287c:	f3 1f       	adc	r31, r19
    287e:	80 81       	ld	r24, Z
    2880:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_VoidSendData>
			Local_Char_Converted[i]=Local_Temp%10+'0';

			Local_Temp/=10;
		}

	for (int i = Counter-1; i >=0 ; i--)
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	99 23       	and	r25, r25
    2894:	6c f7       	brge	.-38     	; 0x2870 <LCD_VoidSendNumber+0xa4>
		{
			LCD_VoidSendData(Local_Char_Converted[i]);
		}


}
    2896:	68 96       	adiw	r28, 0x18	; 24
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <LCD_VoidSendString>:


void LCD_VoidSendString( const u8* Copy_PtString)
{u8 Local_Counter=0;
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <LCD_VoidSendString+0x6>
    28ae:	0f 92       	push	r0
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9b 83       	std	Y+3, r25	; 0x03
    28b6:	8a 83       	std	Y+2, r24	; 0x02
    28b8:	19 82       	std	Y+1, r1	; 0x01
    28ba:	0e c0       	rjmp	.+28     	; 0x28d8 <LCD_VoidSendString+0x30>

    while(Copy_PtString[Local_Counter]!='\0')
    {

    	LCD_VoidSendData(Copy_PtString[Local_Counter]);
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	fc 01       	movw	r30, r24
    28c8:	e2 0f       	add	r30, r18
    28ca:	f3 1f       	adc	r31, r19
    28cc:	80 81       	ld	r24, Z
    28ce:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_VoidSendData>
    	Local_Counter++;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	89 83       	std	Y+1, r24	; 0x01


void LCD_VoidSendString( const u8* Copy_PtString)
{u8 Local_Counter=0;

    while(Copy_PtString[Local_Counter]!='\0')
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	fc 01       	movw	r30, r24
    28e4:	e2 0f       	add	r30, r18
    28e6:	f3 1f       	adc	r31, r19
    28e8:	80 81       	ld	r24, Z
    28ea:	88 23       	and	r24, r24
    28ec:	39 f7       	brne	.-50     	; 0x28bc <LCD_VoidSendString+0x14>

    	LCD_VoidSendData(Copy_PtString[Local_Counter]);
    	Local_Counter++;
    }

}
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <LCD_VoidCreateSpecialChar>:


void LCD_VoidCreateSpecialChar(const u8 *Copy_PcDataPattern,u8 Copy_u8BlockNo,u8 Copy_u8XPos,u8 Copy_u8YPos)

{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	27 97       	sbiw	r28, 0x07	; 7
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	6d 83       	std	Y+5, r22	; 0x05
    2914:	4e 83       	std	Y+6, r20	; 0x06
    2916:	2f 83       	std	Y+7, r18	; 0x07
	/*calculating the address of CGRAM which is 64 byte for 8 locations */
u8 Local_u8CGRAMAddress=8*Copy_u8BlockNo;
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	8a 83       	std	Y+2, r24	; 0x02

/*for counting in for loop*/
u8 Local_u8Iterator=0;
    292c:	19 82       	std	Y+1, r1	; 0x01

/*Send CGRAM Address as command to LCD ,Setting bit 6,clearing bit 7 */
LCD_VoidSendCommand(1<<6 |Local_u8CGRAMAddress);
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	80 64       	ori	r24, 0x40	; 64
    2932:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_VoidSendCommand>

/*Send Data(our pattern) in CGRAM in the address chosen above*/
 for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    2936:	19 82       	std	Y+1, r1	; 0x01
    2938:	0e c0       	rjmp	.+28     	; 0x2956 <LCD_VoidCreateSpecialChar+0x5c>
	{
	 LCD_VoidSendData(Copy_PcDataPattern[Local_u8Iterator]);
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	fc 01       	movw	r30, r24
    2946:	e2 0f       	add	r30, r18
    2948:	f3 1f       	adc	r31, r19
    294a:	80 81       	ld	r24, Z
    294c:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_VoidSendData>

/*Send CGRAM Address as command to LCD ,Setting bit 6,clearing bit 7 */
LCD_VoidSendCommand(1<<6 |Local_u8CGRAMAddress);

/*Send Data(our pattern) in CGRAM in the address chosen above*/
 for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	88 30       	cpi	r24, 0x08	; 8
    295a:	78 f3       	brcs	.-34     	; 0x293a <LCD_VoidCreateSpecialChar+0x40>
	{
	 LCD_VoidSendData(Copy_PcDataPattern[Local_u8Iterator]);
	}
 /*choose the position in LCD display*/
 LCD_VoidGoToPos(Copy_u8XPos, Copy_u8YPos);
    295c:	8e 81       	ldd	r24, Y+6	; 0x06
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>

 /*Sending data to display LCD which were written in GCRAM ,it take the location of address and take the whole block from Copy_u8BlockNo*8 to Copy_u8BlockNo*8+8*/
 LCD_VoidSendData(Copy_u8BlockNo);
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_VoidSendData>
}
    296a:	27 96       	adiw	r28, 0x07	; 7
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <Keypad_u8GetPressedKey>:
#include "../Keypad_Module/Keypad_REG.h"



u8 Keypad_u8GetPressedKey()
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	00 d0       	rcall	.+0      	; 0x2982 <Keypad_u8GetPressedKey+0x6>
    2982:	00 d0       	rcall	.+0      	; 0x2984 <Keypad_u8GetPressedKey+0x8>
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
	/*if not pressed return value indicate that not pressed*/
u8 Local_u8KeypadPressedStatus;
u8 Local_u8KeypadValue=TR_NOT_PRESSED;
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	8b 83       	std	Y+3, r24	; 0x03
u8 Local_u8KeypadCoulumnIterator=0;
    298c:	1a 82       	std	Y+2, r1	; 0x02
u8 Local_u8KeypadRowIterator=0;
    298e:	19 82       	std	Y+1, r1	; 0x01
/*value showed when pressing*/
static u8 Local__u8KeypadValues[ROW_NUM][COULUMN_NUM]=ARRAY_VALUE;
static u8 Local_u8KeypadCoulums[COULUMN_NUM]={KEYPAD_COULUMN0,KEYPAD_COULUMN1,KEYPAD_COULUMN2,KEYPAD_COULUMN3};
static u8 Local_u8KeypadRows[ROW_NUM]={KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};

for(Local_u8KeypadCoulumnIterator=0;Local_u8KeypadCoulumnIterator<COULUMN_NUM;Local_u8KeypadCoulumnIterator++)
    2990:	1a 82       	std	Y+2, r1	; 0x02
    2992:	5a c0       	rjmp	.+180    	; 0x2a48 <Keypad_u8GetPressedKey+0xcc>
{
	/*Activate the coulumn seriesly*/
	DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],LOW);
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	fc 01       	movw	r30, r24
    299c:	e1 5e       	subi	r30, 0xE1	; 225
    299e:	fd 4f       	sbci	r31, 0xFD	; 253
    29a0:	90 81       	ld	r25, Z
    29a2:	83 e0       	ldi	r24, 0x03	; 3
    29a4:	69 2f       	mov	r22, r25
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>

	for(Local_u8KeypadRowIterator=0;  Local_u8KeypadRowIterator<ROW_NUM ;Local_u8KeypadRowIterator++)
    29ac:	19 82       	std	Y+1, r1	; 0x01
    29ae:	3a c0       	rjmp	.+116    	; 0x2a24 <Keypad_u8GetPressedKey+0xa8>
	{

     DIO_U8GetPinVal(KEYPAD_PORT,Local_u8KeypadRows[Local_u8KeypadRowIterator],&Local_u8KeypadPressedStatus);
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	fc 01       	movw	r30, r24
    29b8:	e5 5e       	subi	r30, 0xE5	; 229
    29ba:	fd 4f       	sbci	r31, 0xFD	; 253
    29bc:	90 81       	ld	r25, Z
    29be:	9e 01       	movw	r18, r28
    29c0:	2c 5f       	subi	r18, 0xFC	; 252
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	83 e0       	ldi	r24, 0x03	; 3
    29c6:	69 2f       	mov	r22, r25
    29c8:	a9 01       	movw	r20, r18
    29ca:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_U8GetPinVal>
     /*if we pressed on button the coulomn selected in for loop 1 which indicate the button pushed here */
       if(Local_u8KeypadPressedStatus==LOW)
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	88 23       	and	r24, r24
    29d2:	11 f5       	brne	.+68     	; 0x2a18 <Keypad_u8GetPressedKey+0x9c>
       {
    	   /*put the value of pressed key*/
    	   Local_u8KeypadValue=Local__u8KeypadValues[Local_u8KeypadRowIterator][Local_u8KeypadCoulumnIterator];
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	48 2f       	mov	r20, r24
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	ca 01       	movw	r24, r20
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	82 0f       	add	r24, r18
    29ec:	93 1f       	adc	r25, r19
    29ee:	fc 01       	movw	r30, r24
    29f0:	ed 5d       	subi	r30, 0xDD	; 221
    29f2:	fd 4f       	sbci	r31, 0xFD	; 253
    29f4:	80 81       	ld	r24, Z
    29f6:	8b 83       	std	Y+3, r24	; 0x03
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <Keypad_u8GetPressedKey+0x9c>
       }
       /*polling to indicate that user pull your hand up the button or not */
       while(Local_u8KeypadPressedStatus==LOW)
       {
    	   /*check again the user pulled up his hand or not*/
    	   DIO_U8GetPinVal(KEYPAD_PORT,Local_u8KeypadRows[Local_u8KeypadRowIterator],&Local_u8KeypadPressedStatus);
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	fc 01       	movw	r30, r24
    2a02:	e5 5e       	subi	r30, 0xE5	; 229
    2a04:	fd 4f       	sbci	r31, 0xFD	; 253
    2a06:	90 81       	ld	r25, Z
    2a08:	9e 01       	movw	r18, r28
    2a0a:	2c 5f       	subi	r18, 0xFC	; 252
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
    2a10:	69 2f       	mov	r22, r25
    2a12:	a9 01       	movw	r20, r18
    2a14:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_U8GetPinVal>
    	   /*put the value of pressed key*/
    	   Local_u8KeypadValue=Local__u8KeypadValues[Local_u8KeypadRowIterator][Local_u8KeypadCoulumnIterator];

       }
       /*polling to indicate that user pull your hand up the button or not */
       while(Local_u8KeypadPressedStatus==LOW)
    2a18:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1a:	88 23       	and	r24, r24
    2a1c:	71 f3       	breq	.-36     	; 0x29fa <Keypad_u8GetPressedKey+0x7e>
for(Local_u8KeypadCoulumnIterator=0;Local_u8KeypadCoulumnIterator<COULUMN_NUM;Local_u8KeypadCoulumnIterator++)
{
	/*Activate the coulumn seriesly*/
	DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],LOW);

	for(Local_u8KeypadRowIterator=0;  Local_u8KeypadRowIterator<ROW_NUM ;Local_u8KeypadRowIterator++)
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	8f 5f       	subi	r24, 0xFF	; 255
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	84 30       	cpi	r24, 0x04	; 4
    2a28:	18 f2       	brcs	.-122    	; 0x29b0 <Keypad_u8GetPressedKey+0x34>
       }
      // return Local_u8KeypadValue;

	}
	/*Deactivate the coulumn seriesly*/
		DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],HIGH);
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	fc 01       	movw	r30, r24
    2a32:	e1 5e       	subi	r30, 0xE1	; 225
    2a34:	fd 4f       	sbci	r31, 0xFD	; 253
    2a36:	90 81       	ld	r25, Z
    2a38:	83 e0       	ldi	r24, 0x03	; 3
    2a3a:	69 2f       	mov	r22, r25
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
/*value showed when pressing*/
static u8 Local__u8KeypadValues[ROW_NUM][COULUMN_NUM]=ARRAY_VALUE;
static u8 Local_u8KeypadCoulums[COULUMN_NUM]={KEYPAD_COULUMN0,KEYPAD_COULUMN1,KEYPAD_COULUMN2,KEYPAD_COULUMN3};
static u8 Local_u8KeypadRows[ROW_NUM]={KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};

for(Local_u8KeypadCoulumnIterator=0;Local_u8KeypadCoulumnIterator<COULUMN_NUM;Local_u8KeypadCoulumnIterator++)
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	8a 83       	std	Y+2, r24	; 0x02
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	84 30       	cpi	r24, 0x04	; 4
    2a4c:	08 f4       	brcc	.+2      	; 0x2a50 <Keypad_u8GetPressedKey+0xd4>
    2a4e:	a2 cf       	rjmp	.-188    	; 0x2994 <Keypad_u8GetPressedKey+0x18>
	}
	/*Deactivate the coulumn seriesly*/
		DIO_U8SetPinVal(KEYPAD_PORT,Local_u8KeypadCoulums[Local_u8KeypadCoulumnIterator],HIGH);
}

return Local_u8KeypadValue;
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <DC_MOTOR_VidRotateClockWise>:



/*if you want to rotate the motor clockwise*/
void DC_MOTOR_VidRotateClockWise(void)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,UNTI_CLOCKWISE_PIN,LOW);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	67 e0       	ldi	r22, 0x07	; 7
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,CLOCKWISE_PIN,HIGH);
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	64 e0       	ldi	r22, 0x04	; 4
    2a76:	41 e0       	ldi	r20, 0x01	; 1
    2a78:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>

}
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <DC_MOTOR_VidRotateUntiClockWise>:

/*if you want to rotate the motor unti_clockwise*/
void DC_MOTOR_VidRotateUntiClockWise(void)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,CLOCKWISE_PIN,LOW);
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	64 e0       	ldi	r22, 0x04	; 4
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,UNTI_CLOCKWISE_PIN,HIGH);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	67 e0       	ldi	r22, 0x07	; 7
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
}
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <DC_MOTOR_VidStop>:

void DC_MOTOR_VidStop(void)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,CLOCKWISE_PIN,LOW);
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	64 e0       	ldi	r22, 0x04	; 4
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
	DIO_U8SetPinVal(DC_MOTOR_PORT_CONNECT,UNTI_CLOCKWISE_PIN,LOW);
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	67 e0       	ldi	r22, 0x07	; 7
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_U8SetPinVal>
}
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <main>:
void pop(void);
u32 power(u32 a, u32 b);
u16 Global_u16Temp=0;
u16 Global_u16LDR_Measure=0;
int main(void)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	e4 97       	sbiw	r28, 0x34	; 52
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
	PORT_VoidInit();
    2ada:	0e 94 17 07 	call	0xe2e	; 0xe2e <PORT_VoidInit>
	LCD_VoidInit();
    2ade:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VoidInit>
	LM35_VoidInit();
    2ae2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LM35_VoidInit>
    SendAddress_Callback(INT17_INTERRUPT);
    2ae6:	83 ed       	ldi	r24, 0xD3	; 211
    2ae8:	9a e1       	ldi	r25, 0x1A	; 26
    2aea:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <SendAddress_Callback>
	while(1)
	{



		LCD_VoidSendString("1-Automatic");
    2aee:	80 e6       	ldi	r24, 0x60	; 96
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
		LCD_VoidGoToPos(1,0);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>
		LCD_VoidSendString("2-Manual");
    2afe:	8c e6       	ldi	r24, 0x6C	; 108
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>

		do
		{
			Local_u8KeyPressed=Keypad_u8GetPressedKey();
    2b06:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    2b0a:	80 93 4a 02 	sts	0x024A, r24
		}while(Local_u8KeyPressed==TR_NOT_PRESSED);
    2b0e:	80 91 4a 02 	lds	r24, 0x024A
    2b12:	8f 3f       	cpi	r24, 0xFF	; 255
    2b14:	c1 f3       	breq	.-16     	; 0x2b06 <main+0x40>

		if(Local_u8KeyPressed=='1')
    2b16:	80 91 4a 02 	lds	r24, 0x024A
    2b1a:	81 33       	cpi	r24, 0x31	; 49
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <main+0x5a>
    2b1e:	5f c2       	rjmp	.+1214   	; 0x2fde <main+0x518>
		 {
			do{
				    LCD_VoidClearDisplay();
    2b20:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
					ADC_u8GetDigitalValChannel(SINGLE_ENDED_CHANNEL_ADC1,&Global_u16Temp);
    2b24:	26 e4       	ldi	r18, 0x46	; 70
    2b26:	32 e0       	ldi	r19, 0x02	; 2
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	b9 01       	movw	r22, r18
    2b2c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ADC_u8GetDigitalValChannel>
					LCD_VoidSendString("Temprature=");
    2b30:	85 e7       	ldi	r24, 0x75	; 117
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
					LCD_VoidSendNumber(LM35_u16GetTempretureWithUnit(Global_u16Temp,Celsuis_Degree));
    2b38:	80 91 46 02 	lds	r24, 0x0246
    2b3c:	90 91 47 02 	lds	r25, 0x0247
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LM35_u16GetTempretureWithUnit>
    2b46:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_VoidSendNumber>
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a8 ec       	ldi	r26, 0xC8	; 200
    2b50:	b2 e4       	ldi	r27, 0x42	; 66
    2b52:	8f a3       	std	Y+39, r24	; 0x27
    2b54:	98 a7       	std	Y+40, r25	; 0x28
    2b56:	a9 a7       	std	Y+41, r26	; 0x29
    2b58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	4a ef       	ldi	r20, 0xFA	; 250
    2b68:	54 e4       	ldi	r21, 0x44	; 68
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	8b a3       	std	Y+35, r24	; 0x23
    2b74:	9c a3       	std	Y+36, r25	; 0x24
    2b76:	ad a3       	std	Y+37, r26	; 0x25
    2b78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b80:	9e a1       	ldd	r25, Y+38	; 0x26
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	2c f4       	brge	.+10     	; 0x2b9c <main+0xd6>
		__ticks = 1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	9a a3       	std	Y+34, r25	; 0x22
    2b98:	89 a3       	std	Y+33, r24	; 0x21
    2b9a:	3f c0       	rjmp	.+126    	; 0x2c1a <main+0x154>
	else if (__tmp > 65535)
    2b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	3f ef       	ldi	r19, 0xFF	; 255
    2ba8:	4f e7       	ldi	r20, 0x7F	; 127
    2baa:	57 e4       	ldi	r21, 0x47	; 71
    2bac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb0:	18 16       	cp	r1, r24
    2bb2:	4c f5       	brge	.+82     	; 0x2c06 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e2       	ldi	r20, 0x20	; 32
    2bc2:	51 e4       	ldi	r21, 0x41	; 65
    2bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9a a3       	std	Y+34, r25	; 0x22
    2bda:	89 a3       	std	Y+33, r24	; 0x21
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <main+0x136>
    2bde:	88 ec       	ldi	r24, 0xC8	; 200
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	98 a3       	std	Y+32, r25	; 0x20
    2be4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be8:	98 a1       	ldd	r25, Y+32	; 0x20
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <main+0x124>
    2bee:	98 a3       	std	Y+32, r25	; 0x20
    2bf0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	9a a3       	std	Y+34, r25	; 0x22
    2bfa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	69 f7       	brne	.-38     	; 0x2bde <main+0x118>
    2c04:	14 c0       	rjmp	.+40     	; 0x2c2e <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c06:	6b a1       	ldd	r22, Y+35	; 0x23
    2c08:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	9a a3       	std	Y+34, r25	; 0x22
    2c18:	89 a3       	std	Y+33, r24	; 0x21
    2c1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c20:	8d 8f       	std	Y+29, r24	; 0x1d
    2c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <main+0x160>
    2c2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2c:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);
					if(LM35_u16GetTempretureWithUnit(Global_u16Temp,Celsuis_Degree)>=30)
    2c2e:	80 91 46 02 	lds	r24, 0x0246
    2c32:	90 91 47 02 	lds	r25, 0x0247
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LM35_u16GetTempretureWithUnit>
    2c3c:	8e 31       	cpi	r24, 0x1E	; 30
    2c3e:	91 05       	cpc	r25, r1
    2c40:	18 f0       	brcs	.+6      	; 0x2c48 <main+0x182>
					{
						 DC_MOTOR_VidRotateClockWise();
    2c42:	0e 94 30 15 	call	0x2a60	; 0x2a60 <DC_MOTOR_VidRotateClockWise>
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <main+0x186>
					}
					else
					{
						DC_MOTOR_VidStop();
    2c48:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <DC_MOTOR_VidStop>
					}
					ADC_u8GetDigitalValChannel(SINGLE_ENDED_CHANNEL_ADC2,&Global_u16LDR_Measure);
    2c4c:	28 e4       	ldi	r18, 0x48	; 72
    2c4e:	32 e0       	ldi	r19, 0x02	; 2
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	b9 01       	movw	r22, r18
    2c54:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ADC_u8GetDigitalValChannel>
					if(Global_u16Temp<=20)
    2c58:	80 91 46 02 	lds	r24, 0x0246
    2c5c:	90 91 47 02 	lds	r25, 0x0247
    2c60:	85 31       	cpi	r24, 0x15	; 21
    2c62:	91 05       	cpc	r25, r1
    2c64:	48 f5       	brcc	.+82     	; 0x2cb8 <main+0x1f2>
					{
						 LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						 LED_U8ON_OFF(PORTB,LED1,LED_ON);
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	61 e0       	ldi	r22, 0x01	; 1
    2c74:	41 e0       	ldi	r20, 0x01	; 1
    2c76:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						 LED_U8ON_OFF(PORTB,LED2,LED_ON);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	62 e0       	ldi	r22, 0x02	; 2
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						 LED_U8ON_OFF(PORTB,LED3,LED_ON);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	63 e0       	ldi	r22, 0x03	; 3
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						 LED_U8ON_OFF(PORTB,LED4,LED_ON);
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	64 e0       	ldi	r22, 0x04	; 4
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						 LED_U8ON_OFF(PORTB,LED5,LED_ON);
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	65 e0       	ldi	r22, 0x05	; 5
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						 LED_U8ON_OFF(PORTB,LED6,LED_ON);
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	66 e0       	ldi	r22, 0x06	; 6
    2ca6:	41 e0       	ldi	r20, 0x01	; 1
    2ca8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						 LED_U8ON_OFF(PORTB,LED7,LED_ON);
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	67 e0       	ldi	r22, 0x07	; 7
    2cb0:	41 e0       	ldi	r20, 0x01	; 1
    2cb2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    2cb6:	89 c1       	rjmp	.+786    	; 0x2fca <main+0x504>


					}

					else if(Global_u16Temp>20&&Global_u16Temp<=131)
    2cb8:	80 91 46 02 	lds	r24, 0x0246
    2cbc:	90 91 47 02 	lds	r25, 0x0247
    2cc0:	85 31       	cpi	r24, 0x15	; 21
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	80 f1       	brcs	.+96     	; 0x2d26 <main+0x260>
    2cc6:	80 91 46 02 	lds	r24, 0x0246
    2cca:	90 91 47 02 	lds	r25, 0x0247
    2cce:	84 38       	cpi	r24, 0x84	; 132
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	48 f5       	brcc	.+82     	; 0x2d26 <main+0x260>
					{
						LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						LED_U8ON_OFF(PORTB,LED1,LED_ON);
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	61 e0       	ldi	r22, 0x01	; 1
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
					    LED_U8ON_OFF(PORTB,LED2,LED_ON);
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	62 e0       	ldi	r22, 0x02	; 2
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
					    LED_U8ON_OFF(PORTB,LED3,LED_ON);
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	63 e0       	ldi	r22, 0x03	; 3
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
					    LED_U8ON_OFF(PORTB,LED4,LED_ON);
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	64 e0       	ldi	r22, 0x04	; 4
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
					    LED_U8ON_OFF(PORTB,LED5,LED_ON);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	65 e0       	ldi	r22, 0x05	; 5
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
					    LED_U8ON_OFF(PORTB,LED6,LED_ON);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	66 e0       	ldi	r22, 0x06	; 6
    2d14:	41 e0       	ldi	r20, 0x01	; 1
    2d16:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
					    LED_U8ON_OFF(PORTB,LED7,LED_OFF);
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	67 e0       	ldi	r22, 0x07	; 7
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    2d24:	52 c1       	rjmp	.+676    	; 0x2fca <main+0x504>
					}
					else if(Global_u16Temp>131&&Global_u16Temp<=252)
    2d26:	80 91 46 02 	lds	r24, 0x0246
    2d2a:	90 91 47 02 	lds	r25, 0x0247
    2d2e:	84 38       	cpi	r24, 0x84	; 132
    2d30:	91 05       	cpc	r25, r1
    2d32:	80 f1       	brcs	.+96     	; 0x2d94 <main+0x2ce>
    2d34:	80 91 46 02 	lds	r24, 0x0246
    2d38:	90 91 47 02 	lds	r25, 0x0247
    2d3c:	8d 3f       	cpi	r24, 0xFD	; 253
    2d3e:	91 05       	cpc	r25, r1
    2d40:	48 f5       	brcc	.+82     	; 0x2d94 <main+0x2ce>
							{
							LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED1,LED_ON);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	61 e0       	ldi	r22, 0x01	; 1
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						    LED_U8ON_OFF(PORTB,LED2,LED_ON);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	62 e0       	ldi	r22, 0x02	; 2
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						    LED_U8ON_OFF(PORTB,LED3,LED_ON);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	63 e0       	ldi	r22, 0x03	; 3
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						    LED_U8ON_OFF(PORTB,LED4,LED_ON);
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	64 e0       	ldi	r22, 0x04	; 4
    2d6e:	41 e0       	ldi	r20, 0x01	; 1
    2d70:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						    LED_U8ON_OFF(PORTB,LED5,LED_ON);
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	65 e0       	ldi	r22, 0x05	; 5
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						    LED_U8ON_OFF(PORTB,LED6,LED_OFF);
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	66 e0       	ldi	r22, 0x06	; 6
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
						    LED_U8ON_OFF(PORTB,LED7,LED_OFF);
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	67 e0       	ldi	r22, 0x07	; 7
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    2d92:	1b c1       	rjmp	.+566    	; 0x2fca <main+0x504>
							}
					else if(Global_u16Temp>252&&Global_u16Temp<=373)
    2d94:	80 91 46 02 	lds	r24, 0x0246
    2d98:	90 91 47 02 	lds	r25, 0x0247
    2d9c:	8d 3f       	cpi	r24, 0xFD	; 253
    2d9e:	91 05       	cpc	r25, r1
    2da0:	88 f1       	brcs	.+98     	; 0x2e04 <main+0x33e>
    2da2:	80 91 46 02 	lds	r24, 0x0246
    2da6:	90 91 47 02 	lds	r25, 0x0247
    2daa:	21 e0       	ldi	r18, 0x01	; 1
    2dac:	86 37       	cpi	r24, 0x76	; 118
    2dae:	92 07       	cpc	r25, r18
    2db0:	48 f5       	brcc	.+82     	; 0x2e04 <main+0x33e>
									{
							LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED1,LED_ON);
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	41 e0       	ldi	r20, 0x01	; 1
    2dc2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED2,LED_ON);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	62 e0       	ldi	r22, 0x02	; 2
    2dca:	41 e0       	ldi	r20, 0x01	; 1
    2dcc:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED3,LED_ON);
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	63 e0       	ldi	r22, 0x03	; 3
    2dd4:	41 e0       	ldi	r20, 0x01	; 1
    2dd6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED4,LED_ON);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	64 e0       	ldi	r22, 0x04	; 4
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED5,LED_OFF);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	65 e0       	ldi	r22, 0x05	; 5
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED6,LED_OFF);
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	66 e0       	ldi	r22, 0x06	; 6
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
							LED_U8ON_OFF(PORTB,LED7,LED_OFF);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	67 e0       	ldi	r22, 0x07	; 7
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    2e02:	e3 c0       	rjmp	.+454    	; 0x2fca <main+0x504>
									}
					else if(Global_u16Temp>373&&Global_u16Temp<=494)
    2e04:	80 91 46 02 	lds	r24, 0x0246
    2e08:	90 91 47 02 	lds	r25, 0x0247
    2e0c:	31 e0       	ldi	r19, 0x01	; 1
    2e0e:	86 37       	cpi	r24, 0x76	; 118
    2e10:	93 07       	cpc	r25, r19
    2e12:	88 f1       	brcs	.+98     	; 0x2e76 <main+0x3b0>
    2e14:	80 91 46 02 	lds	r24, 0x0246
    2e18:	90 91 47 02 	lds	r25, 0x0247
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	8f 3e       	cpi	r24, 0xEF	; 239
    2e20:	94 07       	cpc	r25, r20
    2e22:	48 f5       	brcc	.+82     	; 0x2e76 <main+0x3b0>
									{
									LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	41 e0       	ldi	r20, 0x01	; 1
    2e2a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									LED_U8ON_OFF(PORTB,LED1,LED_ON);
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	61 e0       	ldi	r22, 0x01	; 1
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								 LED_U8ON_OFF(PORTB,LED2,LED_ON);
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	62 e0       	ldi	r22, 0x02	; 2
    2e3c:	41 e0       	ldi	r20, 0x01	; 1
    2e3e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								 LED_U8ON_OFF(PORTB,LED3,LED_ON);
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	63 e0       	ldi	r22, 0x03	; 3
    2e46:	41 e0       	ldi	r20, 0x01	; 1
    2e48:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								 LED_U8ON_OFF(PORTB,LED4,LED_OFF);
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	64 e0       	ldi	r22, 0x04	; 4
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								 LED_U8ON_OFF(PORTB,LED5,LED_OFF);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	65 e0       	ldi	r22, 0x05	; 5
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								 LED_U8ON_OFF(PORTB,LED6,LED_OFF);
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	66 e0       	ldi	r22, 0x06	; 6
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								 LED_U8ON_OFF(PORTB,LED7,LED_OFF);
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	67 e0       	ldi	r22, 0x07	; 7
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    2e74:	aa c0       	rjmp	.+340    	; 0x2fca <main+0x504>
									}
					else if(Global_u16Temp>494&&Global_u16Temp<=615)
    2e76:	80 91 46 02 	lds	r24, 0x0246
    2e7a:	90 91 47 02 	lds	r25, 0x0247
    2e7e:	51 e0       	ldi	r21, 0x01	; 1
    2e80:	8f 3e       	cpi	r24, 0xEF	; 239
    2e82:	95 07       	cpc	r25, r21
    2e84:	88 f1       	brcs	.+98     	; 0x2ee8 <main+0x422>
    2e86:	80 91 46 02 	lds	r24, 0x0246
    2e8a:	90 91 47 02 	lds	r25, 0x0247
    2e8e:	22 e0       	ldi	r18, 0x02	; 2
    2e90:	88 36       	cpi	r24, 0x68	; 104
    2e92:	92 07       	cpc	r25, r18
    2e94:	48 f5       	brcc	.+82     	; 0x2ee8 <main+0x422>
									{
									LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	41 e0       	ldi	r20, 0x01	; 1
    2e9c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									LED_U8ON_OFF(PORTB,LED1,LED_ON);
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	61 e0       	ldi	r22, 0x01	; 1
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED2,LED_ON);
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	62 e0       	ldi	r22, 0x02	; 2
    2eae:	41 e0       	ldi	r20, 0x01	; 1
    2eb0:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED3,LED_OFF);
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	63 e0       	ldi	r22, 0x03	; 3
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED4,LED_OFF);
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	64 e0       	ldi	r22, 0x04	; 4
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED5,LED_OFF);
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	65 e0       	ldi	r22, 0x05	; 5
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED6,LED_OFF);
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	66 e0       	ldi	r22, 0x06	; 6
    2ed6:	40 e0       	ldi	r20, 0x00	; 0
    2ed8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED7,LED_OFF);
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	67 e0       	ldi	r22, 0x07	; 7
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    2ee6:	71 c0       	rjmp	.+226    	; 0x2fca <main+0x504>
									}
					else if(Global_u16Temp>615&&Global_u16Temp<=736)
    2ee8:	80 91 46 02 	lds	r24, 0x0246
    2eec:	90 91 47 02 	lds	r25, 0x0247
    2ef0:	32 e0       	ldi	r19, 0x02	; 2
    2ef2:	88 36       	cpi	r24, 0x68	; 104
    2ef4:	93 07       	cpc	r25, r19
    2ef6:	88 f1       	brcs	.+98     	; 0x2f5a <main+0x494>
    2ef8:	80 91 46 02 	lds	r24, 0x0246
    2efc:	90 91 47 02 	lds	r25, 0x0247
    2f00:	42 e0       	ldi	r20, 0x02	; 2
    2f02:	81 3e       	cpi	r24, 0xE1	; 225
    2f04:	94 07       	cpc	r25, r20
    2f06:	48 f5       	brcc	.+82     	; 0x2f5a <main+0x494>
									{
									LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									LED_U8ON_OFF(PORTB,LED1,LED_ON);
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED2,LED_OFF);
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	62 e0       	ldi	r22, 0x02	; 2
    2f20:	40 e0       	ldi	r20, 0x00	; 0
    2f22:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED3,LED_OFF);
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	63 e0       	ldi	r22, 0x03	; 3
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED4,LED_OFF);
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	64 e0       	ldi	r22, 0x04	; 4
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED5,LED_OFF);
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	65 e0       	ldi	r22, 0x05	; 5
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED6,LED_OFF);
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	66 e0       	ldi	r22, 0x06	; 6
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									 LED_U8ON_OFF(PORTB,LED7,LED_OFF);
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	67 e0       	ldi	r22, 0x07	; 7
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    2f58:	38 c0       	rjmp	.+112    	; 0x2fca <main+0x504>
									}
					else if(Global_u16Temp>857&&Global_u16Temp<=978)
    2f5a:	80 91 46 02 	lds	r24, 0x0246
    2f5e:	90 91 47 02 	lds	r25, 0x0247
    2f62:	53 e0       	ldi	r21, 0x03	; 3
    2f64:	8a 35       	cpi	r24, 0x5A	; 90
    2f66:	95 07       	cpc	r25, r21
    2f68:	80 f1       	brcs	.+96     	; 0x2fca <main+0x504>
    2f6a:	80 91 46 02 	lds	r24, 0x0246
    2f6e:	90 91 47 02 	lds	r25, 0x0247
    2f72:	23 e0       	ldi	r18, 0x03	; 3
    2f74:	83 3d       	cpi	r24, 0xD3	; 211
    2f76:	92 07       	cpc	r25, r18
    2f78:	40 f5       	brcc	.+80     	; 0x2fca <main+0x504>
									{
									LED_U8ON_OFF(PORTB,LED0,LED_ON);
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									LED_U8ON_OFF(PORTB,LED1,LED_OFF);
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	61 e0       	ldi	r22, 0x01	; 1
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								    LED_U8ON_OFF(PORTB,LED2,LED_OFF);
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	62 e0       	ldi	r22, 0x02	; 2
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								    LED_U8ON_OFF(PORTB,LED3,LED_OFF);
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	63 e0       	ldi	r22, 0x03	; 3
    2f9c:	40 e0       	ldi	r20, 0x00	; 0
    2f9e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								    LED_U8ON_OFF(PORTB,LED4,LED_OFF);
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	64 e0       	ldi	r22, 0x04	; 4
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								    LED_U8ON_OFF(PORTB,LED5,LED_OFF);
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	65 e0       	ldi	r22, 0x05	; 5
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								    LED_U8ON_OFF(PORTB,LED6,LED_OFF);
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	66 e0       	ldi	r22, 0x06	; 6
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
								    LED_U8ON_OFF(PORTB,LED7,LED_OFF);
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	67 e0       	ldi	r22, 0x07	; 7
    2fc4:	40 e0       	ldi	r20, 0x00	; 0
    2fc6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
									}
			Local_u8KeyPressed=Keypad_u8GetPressedKey();
    2fca:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    2fce:	80 93 4a 02 	sts	0x024A, r24
			}while(Local_u8KeyPressed==TR_NOT_PRESSED);
    2fd2:	80 91 4a 02 	lds	r24, 0x024A
    2fd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <main+0x516>
    2fda:	a2 cd       	rjmp	.-1212   	; 0x2b20 <main+0x5a>
    2fdc:	88 cd       	rjmp	.-1264   	; 0x2aee <main+0x28>


		 }
		else if(Local_u8KeyPressed=='2')
    2fde:	80 91 4a 02 	lds	r24, 0x024A
    2fe2:	82 33       	cpi	r24, 0x32	; 50
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <main+0x522>
    2fe6:	83 cd       	rjmp	.-1274   	; 0x2aee <main+0x28>
	  {

			do
			{
				LCD_VoidClearDisplay();
    2fe8:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
				LCD_VoidSendString("1-Light System");
    2fec:	81 e8       	ldi	r24, 0x81	; 129
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
				LCD_VoidGoToPos(1,0);
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>
				LCD_VoidSendString("2-Temp System");
    2ffc:	80 e9       	ldi	r24, 0x90	; 144
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
				Local_u8KeyPressed=Keypad_u8GetPressedKey();
    3004:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    3008:	80 93 4a 02 	sts	0x024A, r24




			if(Local_u8KeyPressed=='1')
    300c:	80 91 4a 02 	lds	r24, 0x024A
    3010:	81 33       	cpi	r24, 0x31	; 49
    3012:	09 f0       	breq	.+2      	; 0x3016 <main+0x550>
    3014:	40 c0       	rjmp	.+128    	; 0x3096 <main+0x5d0>
			{
				LCD_VoidClearDisplay();
    3016:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
				LCD_VoidSendString("1-LED_ON");
    301a:	8e e9       	ldi	r24, 0x9E	; 158
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
				LCD_VoidGoToPos(1,0);
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>
				LCD_VoidSendString("2-LED_OFF");
    302a:	87 ea       	ldi	r24, 0xA7	; 167
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
				do
				{

				Local_u8KeyPressed=Keypad_u8GetPressedKey();
    3032:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    3036:	80 93 4a 02 	sts	0x024A, r24
				switch(Local_u8KeyPressed)
    303a:	80 91 4a 02 	lds	r24, 0x024A
    303e:	48 2f       	mov	r20, r24
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	5c ab       	std	Y+52, r21	; 0x34
    3044:	4b ab       	std	Y+51, r20	; 0x33
    3046:	8b a9       	ldd	r24, Y+51	; 0x33
    3048:	9c a9       	ldd	r25, Y+52	; 0x34
    304a:	81 33       	cpi	r24, 0x31	; 49
    304c:	91 05       	cpc	r25, r1
    304e:	31 f0       	breq	.+12     	; 0x305c <main+0x596>
    3050:	2b a9       	ldd	r18, Y+51	; 0x33
    3052:	3c a9       	ldd	r19, Y+52	; 0x34
    3054:	22 33       	cpi	r18, 0x32	; 50
    3056:	31 05       	cpc	r19, r1
    3058:	39 f0       	breq	.+14     	; 0x3068 <main+0x5a2>
    305a:	0b c0       	rjmp	.+22     	; 0x3072 <main+0x5ac>

				{
				case '1':{LED_U8ON_OFF(PORTB,LED0,LED_ON);break;}
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
    3066:	05 c0       	rjmp	.+10     	; 0x3072 <main+0x5ac>
				case '2':{LED_U8ON_OFF(PORTB,LED0,LED_OFF);break;}
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LED_U8ON_OFF>
				}
				}while((Local_u8KeyPressed==TR_NOT_PRESSED||Local_u8KeyPressed=='1'||Local_u8KeyPressed=='2')&&Local_u8KeyPressed!='r');
    3072:	80 91 4a 02 	lds	r24, 0x024A
    3076:	8f 3f       	cpi	r24, 0xFF	; 255
    3078:	49 f0       	breq	.+18     	; 0x308c <main+0x5c6>
    307a:	80 91 4a 02 	lds	r24, 0x024A
    307e:	81 33       	cpi	r24, 0x31	; 49
    3080:	29 f0       	breq	.+10     	; 0x308c <main+0x5c6>
    3082:	80 91 4a 02 	lds	r24, 0x024A
    3086:	82 33       	cpi	r24, 0x32	; 50
    3088:	09 f0       	breq	.+2      	; 0x308c <main+0x5c6>
    308a:	f4 c1       	rjmp	.+1000   	; 0x3474 <main+0x9ae>
    308c:	80 91 4a 02 	lds	r24, 0x024A
    3090:	82 37       	cpi	r24, 0x72	; 114
    3092:	79 f6       	brne	.-98     	; 0x3032 <main+0x56c>
    3094:	ef c1       	rjmp	.+990    	; 0x3474 <main+0x9ae>


			}
			else if(Local_u8KeyPressed=='2')
    3096:	80 91 4a 02 	lds	r24, 0x024A
    309a:	82 33       	cpi	r24, 0x32	; 50
    309c:	09 f0       	breq	.+2      	; 0x30a0 <main+0x5da>
    309e:	ea c1       	rjmp	.+980    	; 0x3474 <main+0x9ae>
			{
				LCD_VoidClearDisplay();
    30a0:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
				LCD_VoidSendString("1-SetTemp");
    30a4:	81 eb       	ldi	r24, 0xB1	; 177
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
				LCD_VoidGoToPos(1,0);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>
				LCD_VoidSendString("2-Change Temp");
    30b4:	8b eb       	ldi	r24, 0xBB	; 187
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
				do
				{
					Local_u8KeyPressed=Keypad_u8GetPressedKey();
    30bc:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    30c0:	80 93 4a 02 	sts	0x024A, r24
				}while(Local_u8KeyPressed==TR_NOT_PRESSED);
    30c4:	80 91 4a 02 	lds	r24, 0x024A
    30c8:	8f 3f       	cpi	r24, 0xFF	; 255
    30ca:	c1 f3       	breq	.-16     	; 0x30bc <main+0x5f6>

					switch(Local_u8KeyPressed)
    30cc:	80 91 4a 02 	lds	r24, 0x024A
    30d0:	48 2f       	mov	r20, r24
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	5a ab       	std	Y+50, r21	; 0x32
    30d6:	49 ab       	std	Y+49, r20	; 0x31
    30d8:	89 a9       	ldd	r24, Y+49	; 0x31
    30da:	9a a9       	ldd	r25, Y+50	; 0x32
    30dc:	81 33       	cpi	r24, 0x31	; 49
    30de:	91 05       	cpc	r25, r1
    30e0:	39 f0       	breq	.+14     	; 0x30f0 <main+0x62a>
    30e2:	29 a9       	ldd	r18, Y+49	; 0x31
    30e4:	3a a9       	ldd	r19, Y+50	; 0x32
    30e6:	22 33       	cpi	r18, 0x32	; 50
    30e8:	31 05       	cpc	r19, r1
    30ea:	09 f4       	brne	.+2      	; 0x30ee <main+0x628>
    30ec:	4a c1       	rjmp	.+660    	; 0x3382 <main+0x8bc>
    30ee:	c2 c1       	rjmp	.+900    	; 0x3474 <main+0x9ae>

				{
					case '1':
					{
						LCD_VoidClearDisplay();
    30f0:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
						LCD_VoidSendString("Enter Temp,Please!");
    30f4:	89 ec       	ldi	r24, 0xC9	; 201
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
						u8 i=0;
    30fc:	1e a6       	std	Y+46, r1	; 0x2e
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	aa e7       	ldi	r26, 0x7A	; 122
    3104:	b4 e4       	ldi	r27, 0x44	; 68
    3106:	89 8f       	std	Y+25, r24	; 0x19
    3108:	9a 8f       	std	Y+26, r25	; 0x1a
    310a:	ab 8f       	std	Y+27, r26	; 0x1b
    310c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	69 8d       	ldd	r22, Y+25	; 0x19
    3110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a ef       	ldi	r20, 0xFA	; 250
    311c:	54 e4       	ldi	r21, 0x44	; 68
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	8d 8b       	std	Y+21, r24	; 0x15
    3128:	9e 8b       	std	Y+22, r25	; 0x16
    312a:	af 8b       	std	Y+23, r26	; 0x17
    312c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    312e:	6d 89       	ldd	r22, Y+21	; 0x15
    3130:	7e 89       	ldd	r23, Y+22	; 0x16
    3132:	8f 89       	ldd	r24, Y+23	; 0x17
    3134:	98 8d       	ldd	r25, Y+24	; 0x18
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <main+0x68a>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <main+0x708>
	else if (__tmp > 65535)
    3150:	6d 89       	ldd	r22, Y+21	; 0x15
    3152:	7e 89       	ldd	r23, Y+22	; 0x16
    3154:	8f 89       	ldd	r24, Y+23	; 0x17
    3156:	98 8d       	ldd	r25, Y+24	; 0x18
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <main+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	69 8d       	ldd	r22, Y+25	; 0x19
    316a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    316c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    316e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9c 8b       	std	Y+20, r25	; 0x14
    318e:	8b 8b       	std	Y+19, r24	; 0x13
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <main+0x6ea>
    3192:	88 ec       	ldi	r24, 0xC8	; 200
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9a 8b       	std	Y+18, r25	; 0x12
    3198:	89 8b       	std	Y+17, r24	; 0x11
    319a:	89 89       	ldd	r24, Y+17	; 0x11
    319c:	9a 89       	ldd	r25, Y+18	; 0x12
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <main+0x6d8>
    31a2:	9a 8b       	std	Y+18, r25	; 0x12
    31a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8b 89       	ldd	r24, Y+19	; 0x13
    31a8:	9c 89       	ldd	r25, Y+20	; 0x14
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9c 8b       	std	Y+20, r25	; 0x14
    31ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8b 89       	ldd	r24, Y+19	; 0x13
    31b2:	9c 89       	ldd	r25, Y+20	; 0x14
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <main+0x6cc>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <main+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	6d 89       	ldd	r22, Y+21	; 0x15
    31bc:	7e 89       	ldd	r23, Y+22	; 0x16
    31be:	8f 89       	ldd	r24, Y+23	; 0x17
    31c0:	98 8d       	ldd	r25, Y+24	; 0x18
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9c 8b       	std	Y+20, r25	; 0x14
    31cc:	8b 8b       	std	Y+19, r24	; 0x13
    31ce:	8b 89       	ldd	r24, Y+19	; 0x13
    31d0:	9c 89       	ldd	r25, Y+20	; 0x14
    31d2:	98 8b       	std	Y+16, r25	; 0x10
    31d4:	8f 87       	std	Y+15, r24	; 0x0f
    31d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d8:	98 89       	ldd	r25, Y+16	; 0x10
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <main+0x714>
    31de:	98 8b       	std	Y+16, r25	; 0x10
    31e0:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						LCD_VoidClearDisplay();
    31e2:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <main+0x74a>

						while(i<=2)
						{
								do
								{
								Local_u8KeyPressed=Keypad_u8GetPressedKey();
    31e8:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    31ec:	80 93 4a 02 	sts	0x024A, r24
								}while(Local_u8KeyPressed==TR_NOT_PRESSED);
    31f0:	80 91 4a 02 	lds	r24, 0x024A
    31f4:	8f 3f       	cpi	r24, 0xFF	; 255
    31f6:	c1 f3       	breq	.-16     	; 0x31e8 <main+0x722>

								LCD_VoidSendData(Local_u8KeyPressed);
    31f8:	80 91 4a 02 	lds	r24, 0x024A
    31fc:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_VoidSendData>
								push(Local_u8KeyPressed-'0');
    3200:	80 91 4a 02 	lds	r24, 0x024A
    3204:	80 53       	subi	r24, 0x30	; 48
    3206:	0e 94 9c 1a 	call	0x3538	; 0x3538 <push>
						        i++;
    320a:	8e a5       	ldd	r24, Y+46	; 0x2e
    320c:	8f 5f       	subi	r24, 0xFF	; 255
    320e:	8e a7       	std	Y+46, r24	; 0x2e
						LCD_VoidSendString("Enter Temp,Please!");
						u8 i=0;
						_delay_ms(1000);
						LCD_VoidClearDisplay();

						while(i<=2)
    3210:	8e a5       	ldd	r24, Y+46	; 0x2e
    3212:	83 30       	cpi	r24, 0x03	; 3
    3214:	48 f3       	brcs	.-46     	; 0x31e8 <main+0x722>

								LCD_VoidSendData(Local_u8KeyPressed);
								push(Local_u8KeyPressed-'0');
						        i++;
						}
						u8 Local_u8Counter=0;
    3216:	1d a6       	std	Y+45, r1	; 0x2d
						for(u32 l=power(10,top);l>=1;l/=10)
    3218:	80 91 33 02 	lds	r24, 0x0233
    321c:	28 2f       	mov	r18, r24
    321e:	33 27       	eor	r19, r19
    3220:	27 fd       	sbrc	r18, 7
    3222:	30 95       	com	r19
    3224:	8a e0       	ldi	r24, 0x0A	; 10
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	b9 01       	movw	r22, r18
    322a:	0e 94 49 1a 	call	0x3492	; 0x3492 <power>
    322e:	9c a7       	std	Y+44, r25	; 0x2c
    3230:	8b a7       	std	Y+43, r24	; 0x2b
    3232:	2a c0       	rjmp	.+84     	; 0x3288 <main+0x7c2>
						{
							Global_u8SetTemp+=item[Local_u8Counter++]*l;
    3234:	8d a5       	ldd	r24, Y+45	; 0x2d
    3236:	88 2f       	mov	r24, r24
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	fc 01       	movw	r30, r24
    323c:	e5 5b       	subi	r30, 0xB5	; 181
    323e:	fd 4f       	sbci	r31, 0xFD	; 253
    3240:	80 81       	ld	r24, Z
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	8b a5       	ldd	r24, Y+43	; 0x2b
    3248:	9c a5       	ldd	r25, Y+44	; 0x2c
    324a:	a9 01       	movw	r20, r18
    324c:	48 9f       	mul	r20, r24
    324e:	90 01       	movw	r18, r0
    3250:	49 9f       	mul	r20, r25
    3252:	30 0d       	add	r19, r0
    3254:	58 9f       	mul	r21, r24
    3256:	30 0d       	add	r19, r0
    3258:	11 24       	eor	r1, r1
    325a:	80 91 44 02 	lds	r24, 0x0244
    325e:	90 91 45 02 	lds	r25, 0x0245
    3262:	82 0f       	add	r24, r18
    3264:	93 1f       	adc	r25, r19
    3266:	90 93 45 02 	sts	0x0245, r25
    326a:	80 93 44 02 	sts	0x0244, r24
    326e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3270:	8f 5f       	subi	r24, 0xFF	; 255
    3272:	8d a7       	std	Y+45, r24	; 0x2d
								LCD_VoidSendData(Local_u8KeyPressed);
								push(Local_u8KeyPressed-'0');
						        i++;
						}
						u8 Local_u8Counter=0;
						for(u32 l=power(10,top);l>=1;l/=10)
    3274:	8b a5       	ldd	r24, Y+43	; 0x2b
    3276:	9c a5       	ldd	r25, Y+44	; 0x2c
    3278:	2a e0       	ldi	r18, 0x0A	; 10
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	b9 01       	movw	r22, r18
    327e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__udivmodhi4>
    3282:	cb 01       	movw	r24, r22
    3284:	9c a7       	std	Y+44, r25	; 0x2c
    3286:	8b a7       	std	Y+43, r24	; 0x2b
    3288:	8b a5       	ldd	r24, Y+43	; 0x2b
    328a:	9c a5       	ldd	r25, Y+44	; 0x2c
    328c:	00 97       	sbiw	r24, 0x00	; 0
    328e:	91 f6       	brne	.-92     	; 0x3234 <main+0x76e>
						{
							Global_u8SetTemp+=item[Local_u8Counter++]*l;
						}

						LCD_VoidSendNumber(Global_u8SetTemp);
    3290:	80 91 44 02 	lds	r24, 0x0244
    3294:	90 91 45 02 	lds	r25, 0x0245
    3298:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_VoidSendNumber>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	aa e7       	ldi	r26, 0x7A	; 122
    32a2:	b4 e4       	ldi	r27, 0x44	; 68
    32a4:	8b 87       	std	Y+11, r24	; 0x0b
    32a6:	9c 87       	std	Y+12, r25	; 0x0c
    32a8:	ad 87       	std	Y+13, r26	; 0x0d
    32aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	4a ef       	ldi	r20, 0xFA	; 250
    32ba:	54 e4       	ldi	r21, 0x44	; 68
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8f 83       	std	Y+7, r24	; 0x07
    32c6:	98 87       	std	Y+8, r25	; 0x08
    32c8:	a9 87       	std	Y+9, r26	; 0x09
    32ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32cc:	6f 81       	ldd	r22, Y+7	; 0x07
    32ce:	78 85       	ldd	r23, Y+8	; 0x08
    32d0:	89 85       	ldd	r24, Y+9	; 0x09
    32d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5f e3       	ldi	r21, 0x3F	; 63
    32dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	2c f4       	brge	.+10     	; 0x32ee <main+0x828>
		__ticks = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	3f c0       	rjmp	.+126    	; 0x336c <main+0x8a6>
	else if (__tmp > 65535)
    32ee:	6f 81       	ldd	r22, Y+7	; 0x07
    32f0:	78 85       	ldd	r23, Y+8	; 0x08
    32f2:	89 85       	ldd	r24, Y+9	; 0x09
    32f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	3f ef       	ldi	r19, 0xFF	; 255
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	57 e4       	ldi	r21, 0x47	; 71
    32fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	4c f5       	brge	.+82     	; 0x3358 <main+0x892>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	6b 85       	ldd	r22, Y+11	; 0x0b
    3308:	7c 85       	ldd	r23, Y+12	; 0x0c
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e2       	ldi	r20, 0x20	; 32
    3314:	51 e4       	ldi	r21, 0x41	; 65
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	0f c0       	rjmp	.+30     	; 0x334e <main+0x888>
    3330:	88 ec       	ldi	r24, 0xC8	; 200
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	8b 83       	std	Y+3, r24	; 0x03
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	9c 81       	ldd	r25, Y+4	; 0x04
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <main+0x876>
    3340:	9c 83       	std	Y+4, r25	; 0x04
    3342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	9e 83       	std	Y+6, r25	; 0x06
    334c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	69 f7       	brne	.-38     	; 0x3330 <main+0x86a>
    3356:	8e c0       	rjmp	.+284    	; 0x3474 <main+0x9ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	9a 81       	ldd	r25, Y+2	; 0x02
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <main+0x8b2>
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	79 c0       	rjmp	.+242    	; 0x3474 <main+0x9ae>
						_delay_ms(1000);
						break;
					}
					case '2':
					{
						LCD_VoidClearDisplay();
    3382:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
						LCD_VoidSendString("1-Increment");
    3386:	8c ed       	ldi	r24, 0xDC	; 220
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
						LCD_VoidGoToPos(1,0);
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_VoidGoToPos>
						LCD_VoidSendString("2-Decrement");
    3396:	88 ee       	ldi	r24, 0xE8	; 232
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>

						do
						{
								Local_u8KeyPressed=Keypad_u8GetPressedKey();
    339e:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    33a2:	80 93 4a 02 	sts	0x024A, r24
								switch(Local_u8KeyPressed)
    33a6:	80 91 4a 02 	lds	r24, 0x024A
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	38 ab       	std	Y+48, r19	; 0x30
    33b0:	2f a7       	std	Y+47, r18	; 0x2f
    33b2:	4f a5       	ldd	r20, Y+47	; 0x2f
    33b4:	58 a9       	ldd	r21, Y+48	; 0x30
    33b6:	41 33       	cpi	r20, 0x31	; 49
    33b8:	51 05       	cpc	r21, r1
    33ba:	31 f0       	breq	.+12     	; 0x33c8 <main+0x902>
    33bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33be:	98 a9       	ldd	r25, Y+48	; 0x30
    33c0:	82 33       	cpi	r24, 0x32	; 50
    33c2:	91 05       	cpc	r25, r1
    33c4:	21 f1       	breq	.+72     	; 0x340e <main+0x948>
    33c6:	45 c0       	rjmp	.+138    	; 0x3452 <main+0x98c>
								{
									case '1':{
										 LCD_VoidClearDisplay();
    33c8:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
										ADC_u8GetDigitalValChannel(SINGLE_ENDED_CHANNEL_ADC1,&Global_u16Temp);
    33cc:	26 e4       	ldi	r18, 0x46	; 70
    33ce:	32 e0       	ldi	r19, 0x02	; 2
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	b9 01       	movw	r22, r18
    33d4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ADC_u8GetDigitalValChannel>
										LCD_VoidSendString("Temprature=");
    33d8:	85 e7       	ldi	r24, 0x75	; 117
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
										++Global_u16Temp;
    33e0:	80 91 46 02 	lds	r24, 0x0246
    33e4:	90 91 47 02 	lds	r25, 0x0247
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	90 93 47 02 	sts	0x0247, r25
    33ee:	80 93 46 02 	sts	0x0246, r24
									LCD_VoidSendNumber(LM35_u16GetTempretureWithUnit(Global_u16Temp,Celsuis_Degree));
    33f2:	80 91 46 02 	lds	r24, 0x0246
    33f6:	90 91 47 02 	lds	r25, 0x0247
    33fa:	60 e0       	ldi	r22, 0x00	; 0
    33fc:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LM35_u16GetTempretureWithUnit>
    3400:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_VoidSendNumber>
									LCD_VoidSendString(" c");
    3404:	84 ef       	ldi	r24, 0xF4	; 244
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
    340c:	22 c0       	rjmp	.+68     	; 0x3452 <main+0x98c>

									break;
									}
									case '2':{
										 LCD_VoidClearDisplay();
    340e:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_VoidClearDisplay>
										ADC_u8GetDigitalValChannel(SINGLE_ENDED_CHANNEL_ADC1,&Global_u16Temp);
    3412:	26 e4       	ldi	r18, 0x46	; 70
    3414:	32 e0       	ldi	r19, 0x02	; 2
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	b9 01       	movw	r22, r18
    341a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ADC_u8GetDigitalValChannel>
										LCD_VoidSendString("Temprature=");
    341e:	85 e7       	ldi	r24, 0x75	; 117
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
										--Global_u16Temp;
    3426:	80 91 46 02 	lds	r24, 0x0246
    342a:	90 91 47 02 	lds	r25, 0x0247
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	90 93 47 02 	sts	0x0247, r25
    3434:	80 93 46 02 	sts	0x0246, r24
										LCD_VoidSendNumber(LM35_u16GetTempretureWithUnit(Global_u16Temp,Celsuis_Degree));
    3438:	80 91 46 02 	lds	r24, 0x0246
    343c:	90 91 47 02 	lds	r25, 0x0247
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LM35_u16GetTempretureWithUnit>
    3446:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_VoidSendNumber>
										LCD_VoidSendString(" c");
    344a:	84 ef       	ldi	r24, 0xF4	; 244
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>

										break;
									}
								}
						}while((Local_u8KeyPressed==TR_NOT_PRESSED||Local_u8KeyPressed=='1'||Local_u8KeyPressed=='2')&&Local_u8KeyPressed!='r');
    3452:	80 91 4a 02 	lds	r24, 0x024A
    3456:	8f 3f       	cpi	r24, 0xFF	; 255
    3458:	41 f0       	breq	.+16     	; 0x346a <main+0x9a4>
    345a:	80 91 4a 02 	lds	r24, 0x024A
    345e:	81 33       	cpi	r24, 0x31	; 49
    3460:	21 f0       	breq	.+8      	; 0x346a <main+0x9a4>
    3462:	80 91 4a 02 	lds	r24, 0x024A
    3466:	82 33       	cpi	r24, 0x32	; 50
    3468:	29 f4       	brne	.+10     	; 0x3474 <main+0x9ae>
    346a:	80 91 4a 02 	lds	r24, 0x024A
    346e:	82 37       	cpi	r24, 0x72	; 114
    3470:	09 f0       	breq	.+2      	; 0x3474 <main+0x9ae>
    3472:	95 cf       	rjmp	.-214    	; 0x339e <main+0x8d8>
		 }




			Local_u8KeyPressed=Keypad_u8GetPressedKey();
    3474:	0e 94 be 14 	call	0x297c	; 0x297c <Keypad_u8GetPressedKey>
    3478:	80 93 4a 02 	sts	0x024A, r24

			}while(Local_u8KeyPressed==TR_NOT_PRESSED&&Local_u8KeyPressed!='r');
    347c:	80 91 4a 02 	lds	r24, 0x024A
    3480:	8f 3f       	cpi	r24, 0xFF	; 255
    3482:	09 f0       	breq	.+2      	; 0x3486 <main+0x9c0>
    3484:	34 cb       	rjmp	.-2456   	; 0x2aee <main+0x28>
    3486:	80 91 4a 02 	lds	r24, 0x024A
    348a:	82 37       	cpi	r24, 0x72	; 114
    348c:	09 f0       	breq	.+2      	; 0x3490 <main+0x9ca>
    348e:	ac cd       	rjmp	.-1192   	; 0x2fe8 <main+0x522>
    3490:	2e cb       	rjmp	.-2468   	; 0x2aee <main+0x28>

00003492 <power>:




u32 power(u32 a, u32 b)
{   if(b==0)
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	27 97       	sbiw	r28, 0x07	; 7
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	9b 83       	std	Y+3, r25	; 0x03
    34a8:	8a 83       	std	Y+2, r24	; 0x02
    34aa:	7d 83       	std	Y+5, r23	; 0x05
    34ac:	6c 83       	std	Y+4, r22	; 0x04
    34ae:	8c 81       	ldd	r24, Y+4	; 0x04
    34b0:	9d 81       	ldd	r25, Y+5	; 0x05
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	29 f4       	brne	.+10     	; 0x34c0 <power+0x2e>
	return 1;
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	50 e0       	ldi	r21, 0x00	; 0
    34ba:	5f 83       	std	Y+7, r21	; 0x07
    34bc:	4e 83       	std	Y+6, r20	; 0x06
    34be:	20 c0       	rjmp	.+64     	; 0x3500 <power+0x6e>
      for (u8 i=1; i<b; i++)
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	11 c0       	rjmp	.+34     	; 0x34e8 <power+0x56>
            a *=a;
    34c6:	2a 81       	ldd	r18, Y+2	; 0x02
    34c8:	3b 81       	ldd	r19, Y+3	; 0x03
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	9b 81       	ldd	r25, Y+3	; 0x03
    34ce:	ac 01       	movw	r20, r24
    34d0:	24 9f       	mul	r18, r20
    34d2:	c0 01       	movw	r24, r0
    34d4:	25 9f       	mul	r18, r21
    34d6:	90 0d       	add	r25, r0
    34d8:	34 9f       	mul	r19, r20
    34da:	90 0d       	add	r25, r0
    34dc:	11 24       	eor	r1, r1
    34de:	9b 83       	std	Y+3, r25	; 0x03
    34e0:	8a 83       	std	Y+2, r24	; 0x02


u32 power(u32 a, u32 b)
{   if(b==0)
	return 1;
      for (u8 i=1; i<b; i++)
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	8f 5f       	subi	r24, 0xFF	; 255
    34e6:	89 83       	std	Y+1, r24	; 0x01
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	8c 81       	ldd	r24, Y+4	; 0x04
    34f0:	9d 81       	ldd	r25, Y+5	; 0x05
    34f2:	28 17       	cp	r18, r24
    34f4:	39 07       	cpc	r19, r25
    34f6:	38 f3       	brcs	.-50     	; 0x34c6 <power+0x34>
            a *=a;
      return a;
    34f8:	8a 81       	ldd	r24, Y+2	; 0x02
    34fa:	9b 81       	ldd	r25, Y+3	; 0x03
    34fc:	9f 83       	std	Y+7, r25	; 0x07
    34fe:	8e 83       	std	Y+6, r24	; 0x06
    3500:	8e 81       	ldd	r24, Y+6	; 0x06
    3502:	9f 81       	ldd	r25, Y+7	; 0x07
}
    3504:	27 96       	adiw	r28, 0x07	; 7
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <isEmpty>:
u8 isEmpty()
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	0f 92       	push	r0
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	return top < 0;
    3520:	80 91 33 02 	lds	r24, 0x0233
    3524:	19 82       	std	Y+1, r1	; 0x01
    3526:	88 23       	and	r24, r24
    3528:	14 f4       	brge	.+4      	; 0x352e <isEmpty+0x18>
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <push>:

void push(u8 Element)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	0f 92       	push	r0
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	89 83       	std	Y+1, r24	; 0x01
	if (top >= MAX_SIZE-1)
    3544:	80 91 33 02 	lds	r24, 0x0233
    3548:	82 30       	cpi	r24, 0x02	; 2
    354a:	2c f0       	brlt	.+10     	; 0x3556 <push+0x1e>
	{
		LCD_VoidSendString("Stack Full");
    354c:	87 ef       	ldi	r24, 0xF7	; 247
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
    3554:	0f c0       	rjmp	.+30     	; 0x3574 <push+0x3c>
	}
	else
	{
		top++;
    3556:	80 91 33 02 	lds	r24, 0x0233
    355a:	8f 5f       	subi	r24, 0xFF	; 255
    355c:	80 93 33 02 	sts	0x0233, r24
		item[top] = Element;
    3560:	80 91 33 02 	lds	r24, 0x0233
    3564:	99 27       	eor	r25, r25
    3566:	87 fd       	sbrc	r24, 7
    3568:	90 95       	com	r25
    356a:	fc 01       	movw	r30, r24
    356c:	e5 5b       	subi	r30, 0xB5	; 181
    356e:	fd 4f       	sbci	r31, 0xFD	; 253
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	80 83       	st	Z, r24
	}
}
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <pop>:
void pop()
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
	if (isEmpty())
    3584:	0e 94 8b 1a 	call	0x3516	; 0x3516 <isEmpty>
    3588:	88 23       	and	r24, r24
    358a:	29 f0       	breq	.+10     	; 0x3596 <pop+0x1a>
		LCD_VoidSendString("No Data deleted");
    358c:	82 e0       	ldi	r24, 0x02	; 2
    358e:	91 e0       	ldi	r25, 0x01	; 1
    3590:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_VoidSendString>
    3594:	05 c0       	rjmp	.+10     	; 0x35a0 <pop+0x24>
	else
		top--;
    3596:	80 91 33 02 	lds	r24, 0x0233
    359a:	81 50       	subi	r24, 0x01	; 1
    359c:	80 93 33 02 	sts	0x0233, r24
}
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <INT17_INTERRUPT>:

void INT17_INTERRUPT()
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
	PORTA_REG^=(1<<0);
    35ae:	ab e3       	ldi	r26, 0x3B	; 59
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	eb e3       	ldi	r30, 0x3B	; 59
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	90 81       	ld	r25, Z
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	89 27       	eor	r24, r25
    35bc:	8c 93       	st	X, r24
}
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret

000035c4 <__udivmodhi4>:
    35c4:	aa 1b       	sub	r26, r26
    35c6:	bb 1b       	sub	r27, r27
    35c8:	51 e1       	ldi	r21, 0x11	; 17
    35ca:	07 c0       	rjmp	.+14     	; 0x35da <__udivmodhi4_ep>

000035cc <__udivmodhi4_loop>:
    35cc:	aa 1f       	adc	r26, r26
    35ce:	bb 1f       	adc	r27, r27
    35d0:	a6 17       	cp	r26, r22
    35d2:	b7 07       	cpc	r27, r23
    35d4:	10 f0       	brcs	.+4      	; 0x35da <__udivmodhi4_ep>
    35d6:	a6 1b       	sub	r26, r22
    35d8:	b7 0b       	sbc	r27, r23

000035da <__udivmodhi4_ep>:
    35da:	88 1f       	adc	r24, r24
    35dc:	99 1f       	adc	r25, r25
    35de:	5a 95       	dec	r21
    35e0:	a9 f7       	brne	.-22     	; 0x35cc <__udivmodhi4_loop>
    35e2:	80 95       	com	r24
    35e4:	90 95       	com	r25
    35e6:	bc 01       	movw	r22, r24
    35e8:	cd 01       	movw	r24, r26
    35ea:	08 95       	ret

000035ec <__prologue_saves__>:
    35ec:	2f 92       	push	r2
    35ee:	3f 92       	push	r3
    35f0:	4f 92       	push	r4
    35f2:	5f 92       	push	r5
    35f4:	6f 92       	push	r6
    35f6:	7f 92       	push	r7
    35f8:	8f 92       	push	r8
    35fa:	9f 92       	push	r9
    35fc:	af 92       	push	r10
    35fe:	bf 92       	push	r11
    3600:	cf 92       	push	r12
    3602:	df 92       	push	r13
    3604:	ef 92       	push	r14
    3606:	ff 92       	push	r15
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	ca 1b       	sub	r28, r26
    3616:	db 0b       	sbc	r29, r27
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	09 94       	ijmp

00003624 <__epilogue_restores__>:
    3624:	2a 88       	ldd	r2, Y+18	; 0x12
    3626:	39 88       	ldd	r3, Y+17	; 0x11
    3628:	48 88       	ldd	r4, Y+16	; 0x10
    362a:	5f 84       	ldd	r5, Y+15	; 0x0f
    362c:	6e 84       	ldd	r6, Y+14	; 0x0e
    362e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3630:	8c 84       	ldd	r8, Y+12	; 0x0c
    3632:	9b 84       	ldd	r9, Y+11	; 0x0b
    3634:	aa 84       	ldd	r10, Y+10	; 0x0a
    3636:	b9 84       	ldd	r11, Y+9	; 0x09
    3638:	c8 84       	ldd	r12, Y+8	; 0x08
    363a:	df 80       	ldd	r13, Y+7	; 0x07
    363c:	ee 80       	ldd	r14, Y+6	; 0x06
    363e:	fd 80       	ldd	r15, Y+5	; 0x05
    3640:	0c 81       	ldd	r16, Y+4	; 0x04
    3642:	1b 81       	ldd	r17, Y+3	; 0x03
    3644:	aa 81       	ldd	r26, Y+2	; 0x02
    3646:	b9 81       	ldd	r27, Y+1	; 0x01
    3648:	ce 0f       	add	r28, r30
    364a:	d1 1d       	adc	r29, r1
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	ed 01       	movw	r28, r26
    3658:	08 95       	ret

0000365a <_exit>:
    365a:	f8 94       	cli

0000365c <__stop_program>:
    365c:	ff cf       	rjmp	.-2      	; 0x365c <__stop_program>
